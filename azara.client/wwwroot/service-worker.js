//self.addEventListener('install', function (event) {//    event.waitUntil(//        caches.open('my-cache').then(function (cache) {//            return cache.addAll([//                '/',//                '/index.html',//                '/css/style.css',//                '/js/common.js'//            ]);//        })//    );//});//self.addEventListener('fetch', function (event) {//    event.respondWith(//        caches.match(event.request).then(function (response) {//            if (response) {//                return response;//            }//            return fetch(event.request);//        })//    );//});// Define the cache nameconst CACHE_NAME = 'my-pwa-cache';// Define the files to cacheconst FILES_TO_CACHE = [    '/', ,    '/index.html',    '/css/style.css',    '/js/common.js'];// Install the service worker and cache the filesself.addEventListener('install', event => {    event.waitUntil(        caches.open(CACHE_NAME)            .then(cache => cache.addAll(FILES_TO_CACHE))            .then(() => self.skipWaiting())    );});// Serve files from cache firstself.addEventListener('fetch', event => {    console.log("cache call fetch")    event.respondWith(        caches.open('my-pwa-cache').then(function (cache) {            return cache.match(event.request).then(function (response) {                if (response) {                    return response;                } else {                    return fetch(event.request).then(function (response) {                        cache.put(event.request, response.clone());                        console.log('cache put');                        return response;                    });                }            });        })    );});self.addEventListener('activate', function (event) {    event.waitUntil(        caches.keys().then(function (cacheNames) {            return Promise.all(                cacheNames.map(function (cacheName) {                    if (cacheName !== 'my-pwa-cache') {                        console.log(cacheName);                        return caches.delete(cacheName);                    }                })            );        })    );});