@page "/blog-details/{Id}"
@layout LoginLayout

<PageTitle>@ClientTitleModel.BlogTitle</PageTitle>

@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
    <!-- Preloader End -->
}
else
{
    <HeadContent>
        <meta property="og:type" content="website" />
        <meta property="og:title" content="@blogResponse.MetaTitle" name="title" />
        <!--<meta property="og:url" content="https://damienbod.com" />-->
        <meta property="og:image" content="@blogResponse.Image" name="image">
        <meta property="og:image:height" content="384" />
        <meta property="og:image:width" content="384" />
        <meta property="og:site_name" content="Azara" />
        <meta property="og:description" content="@blogResponse.MetaDescriptions" name="descriptions" />
    </HeadContent>

    <!-- Top Back Panel start -->
    <div class="position-fixed top-0 start-0 end-0 container">
        <div class="back-panel d-flex align-items-center justify-content-start">
            <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
            <h1>Blog Details</h1>
        </div>
    </div>
    <!-- Top Back Panel end -->
    <!-- Blog Details start -->
    <section class="blog-details common-padding position-relative xs-padding">
        <div class="container">
            <div class="row">
                <div class="col-12 col-md-10 mx-auto">
                    <!-- Coupon Reward Image Start -->
                    <div class="coupon-reward-img sm-margin">
                        <img src='@(!string.IsNullOrWhiteSpace(blogResponse.Image) ? blogResponse.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Blog">
                    </div>
                    <!-- Coupon Reward Image end -->

                    <h2>@blogResponse.Title</h2>

                    <div class="card blog-card bg-transparent rounded-0">
                        <div class="card-text d-flex align-items-center justify-content-between p-0">
                            <h5><img src="images/user-blog.svg" class="img-fluid" alt="User">@blogResponse.AuthorName</h5>
                            <h5><img src="images/blog-calendar.svg" class="img-fluid" alt="Calendar">@blogResponse.PublishedDate.ToString("dddd, dd MMMM yyyy")</h5>
                        </div>
                    </div>

                    <!-- Description start -->
                    <div class="blog-description mb-4">
                        @blogDescription
                    </div>
                    <!-- Description end -->
                </div>
                <!-- col -->
            </div>
            <!-- row -->
        </div>

    </section>
}
@code {

    [Parameter]
    public string Id { get; set; }
    bool Loader = false;

    BlogDataRetrive blogResponse = new BlogDataRetrive();
    MarkupString blogDescription => (MarkupString)blogResponse.Descriptions;

    protected override async Task OnInitializedAsync()
    {
        Loader = true;
        var token = await localStorage.GetItemAsync<string>("token");

        Id = GenericHelper.Decipher(Id, 3);
        await BlogGetById();
        Loader = false;
        StateHasChanged();
    }

    internal async Task BlogGetById()
    {
        Loader = true;
        var result = await BlogHelpers.BlogbyID(new BaseIdRequest { Id = new(Id) });
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                blogResponse = JsonConvert.DeserializeObject<BlogDataRetrive>(result.data);
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        Loader = false;
        StateHasChanged();
    }

}
