@page "/shop-product-list-detail/{Id}"

@layout LoginLayout

<PageTitle>@ClientTitleModel.ShopProductTitle</PageTitle>

@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
  <!-- Preloader End -->
}
else
{
    <main class="custom-main-section">

        <!--******************* Header Section Start *********************-->
        <!-- Top Back Panel start -->
        <div class="position-fixed top-0 start-0 end-0 container">
            <div class="back-panel d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center justify-content-start">
                    <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
                    <h1>@response.Name</h1>
                </div>
            </div>
        </div>
        <!-- Top Back Panel end -->
        <!--******************* Header Section End *********************-->

        <section class="common-padding position-relative xs-padding">
            <div class="container">
                <div class="row">
                    <div class="col-12 mx-auto">

                        <div class="row">
                            <div class="col-lg-6">
                                <div class="product-details-slider position-relative">
                                    <div class="discount-label">@response.OfferName</div>
                                    <!-- slider start -->
                                    <div thumbsSlider="" class="swiper productSwiper">
                                        <div class="swiper-wrapper">
                                            @if (ImageList != null && ImageList.Count > 0)
                                            {
                                                @foreach (var img in ImageList)
                                                {
                                                    <div class="swiper-slide">
                                                        <img src="@img" class="img-fluid" alt="Store">
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="swiper thumbnailsSwiper">
                                        <div class="swiper-wrapper">
                                            @if (ImageList != null && ImageList.Count > 0)
                                            {
                                                @foreach (var img in ImageList)
                                                {
                                                    <div class="swiper-slide">
                                                        <img src="@img" class="img-fluid" alt="Store">
                                                    </div>
                                                }

                                            }
                                        </div>
                                    </div>
                                    <!-- slider end -->
                                </div>
                                <!-- Product Details Slider end -->
                            </div>
                            <!-- col -->
                            <div class="col-lg-6">
                                <div class="product-details-slider position-relative">
                                    <!-- caption start -->
                                    <div class="product-slider-caption featured-product-card position-relative bg-transparent rounded-0">
                                        <h2>@response.Name</h2>
                                        <div class="card-text d-flex align-items-center justify-content-between">
                                            <h5 class="m-0">
                                                <a href="#"><img src="images/shop-icon.svg" class="img-fluid me-3 shop-icon" alt="Shop">@response.StoreName</a>
                                            </h5>
                                            <div class="d-flex align-items-center justify-content-between">
                                                <del>@String.Format("{0:C}", @response.OriginalPrice)</del>
                                                <h4>@String.Format("{0:C}", @response.DiscountedPrice)</h4>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- caption end -->
                                </div>

                                <div class="product-description border-bottom-0 mb-0">
                                    <h3>Description</h3>
                                    @if (lenth != null && lenth > 300)
                                    {
                                        <div class="collapse show" id="collapseExample">
                                            <p>
                                                @response.Description.Substring(0,100) ...
                                            </p>
                                        </div>
                                        <div class="collapse" id="collapseExample">
                                            <p>
                                                @response.Description
                                            </p>
                                        </div>
                                    }
                                    else
                                    {
                                        <p>
                                            @response.Description
                                        </p>
                                    }
                                </div>

                                @if (lenth != null && lenth > 300)
                                {
                                    <a class="readmore-button collapsed" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample"></a>
                                }
                            </div>
                        </div>
                        <!-- col -->
                    </div>
                    <!-- row -->
                    <!-- Reward Section start -->
                    <div class="d-flex align-items-center justify-content-between mb-4 review-top-border">
                        <h2 class="m-0">Deals & Coupons</h2>
                        <a href="/Shop-product-deal-coupon" class="btn view-all-btn">View All</a>
                    </div>
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 rewards-row gx-md-3 gx-4">
                        @if (rewardListResponse.Details != null)
                        {
                            @if (rewardListResponse.Details.Count != 0)
                            {
                                @foreach (var reward in rewardListResponse.Details.Take(3))
                                {
                                    @if (reward.IsUsed == true)
                                    {
                                        <div class="col">
                                            @*<div class="card rewards-card expired">
                        <a class="card-img">
                        <img src="@reward.Image" class="img-fluid" alt="Reward">
                        </a>
                        <div class="card-text d-flex align-items-center justify-content-between">
                        <h6>Valid till 30th Aug, 2022</h6>
                        <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                        </div>
                        </div>*@
                                            <div class="card rewards-card expired featured-product-card position-relative cursor-pointer">
                                                <a class="d-flex align-items-lg-start">
                                                    <div class="card-img">
                                                        <img src="@reward.Image" class="img-fluid" alt="Reward">
                                                    </div>
                                                    <h4 class="fw-500 m-0">
                                                    </h4>
                                                </a>
                                                <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                                    <div class="card-text d-flex align-items-center justify-content-between">
                                                        <h5 class="mb-0">
                                                            <a href="javascript:void(0)">Valid till 30th Aug, 2022</a>
                                                        </h5>
                                                        <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span></span></a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col">
                                            @*<div class="card rewards-card">
                        <a @onclick="e => RewardGetByID(reward.Id)" class="card-img">
                        <img src="@reward.Image" class="img-fluid" alt="Reward">
                        </a>
                        <div class="card-text d-flex align-items-center justify-content-between">
                        <h6>Valid till 30th Aug, 2022</h6>
                        <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                        </div>
                        </div>*@
                                            <div class="card rewards-card expired featured-product-card position-relative cursor-pointer">
                                                <a @onclick="e => RewardGetByID(reward.Id)" class="d-flex align-items-lg-start">
                                                    <div class="card-img">
                                                        <img src="@reward.Image" class="img-fluid" alt="Reward">
                                                    </div>
                                                    <h4 class="fw-500 m-0">
                                                    </h4>
                                                </a>
                                                <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                                    <div class="card-text d-flex align-items-center justify-content-between">
                                                        <h5 class="mb-0">
                                                            <a @onclick="e => RewardGetByID(reward.Id)">Valid till 30th Aug, 2022</a>
                                                        </h5>
                                                        <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span></span></a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                    <!-- row -->
                    <!-- Reward Section end -->

                </div>
                <!-- col -->
            </div>
            <!-- row -->
        </section>
    </main>
}
@code {
    int lenth;
    bool Loader = true;
    [Parameter]
    public string Id { get; set; }

    ShopProductByIdResponse response = new ShopProductByIdResponse();
    RewardListResponse rewardListResponse = new RewardListResponse();
    MyRewardInsertRequest insertMyReward = new MyRewardInsertRequest();


    ListRequest listRequest = new ListRequest();

    List<string> ImageList = new();
    string userId;
    bool IsUsed = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        userId = await localStorage.GetItemAsync<string>("userId");

        Id = GenericHelper.Decipher(Id, 3);
        await productGetById();
        await LoadRewardData();
    }

    internal async Task productGetById()
    {
        Loader = true;
        var result = await ShopProductHelpers.ProductGetByIdApi(new BaseIdRequest { Id = new(Id) });
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                response = JsonConvert.DeserializeObject<ShopProductByIdResponse>(result.data);
                lenth = response.Description.Length;

                if (response != null && !string.IsNullOrWhiteSpace(response.Image))
                    ImageList = JsonConvert.DeserializeObject<List<string>>(response.Image);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Error");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        StateHasChanged();
        Loader = false;

    }

    internal async Task LoadRewardData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = 3;
        var result = await RewardHelper.RewardListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                rewardListResponse = JsonConvert.DeserializeObject<RewardListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task AddReward(string id)
    {
        Loader = true;
        insertMyReward.UserId = userId;
        insertMyReward.RewardId = id;
        var result = await CommonHelpers.MyRewardAddApi(insertMyReward);

        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(insertMyReward.UserId))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Updated Successfully!");
                    NavManager.NavigateTo("/");
                    StateHasChanged();

                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Insert Successfully!");
                    NavManager.NavigateTo("/");
                    StateHasChanged();

                }
                IsUsed = true;
            }
            else if (result.meta.statusCode == 500)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }

            return;
        }
        StateHasChanged();

    }

    internal void RewardGetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/reward-detail/{cipheredId}");
        StateHasChanged();
    }
}
