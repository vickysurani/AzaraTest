@page "/shop-product-list"
@using System.Text.Json.Nodes;
@using azara.client.Models.Inventory.Request;
@using azara.client.Models.POSSubCategory.Response;
@using azara.client.Models.POSSubCategory;

@layout LoginLayout

<PageTitle>@ClientTitleModel.ShopProductTitle</PageTitle>

<main>
    <!-- Top Back Panel start -->
    <div class="position-fixed top-0 start-0 end-0 container">
        <div class="back-panel d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center justify-content-start">
                <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
                <h1>Product List</h1>
            </div>
            <a href="javascript:void(0)" class="top-panel-img" data-bs-toggle="modal" data-bs-target="#shopFilterModal">
                <img src="images/filter-icon.svg" class="img-fluid" alt="Filter">
            </a>
        </div>
    </div>
    <!-- Top Back Panel end -->
    <!--******************* Middle Section Start ******************-->
    <!-- Featured Products start -->
    <section class="common-padding featured-product-details position-relative xs-padding">
        <div class="container">
            <div class="row featured-product-row row-cols-1 row-cols-md-2 row-cols-lg-3 gx-3 gx-lg-4 justify-content-md-start">
                @if (ListFlage == true)
                {

                    <!-- col -->
                    @if (posInventoryResponse.Details != null)
                    {
                        @if (posInventoryResponse.Details.Count != 0)
                        {
                            @foreach (var PosProduct in posInventoryResponse.Details)
                            {
                                <div class="col">
                                    @*<div class="card featured-product-card position-relative" @onclick="e => GetPosProductByID(PosProduct.ListId)">
                    <span class="discount-label position-absolute"> % OFF</span>
                    <a class="card-img">
                    <img src='@(!string.IsNullOrWhiteSpace(PosProduct.Image) ? PosProduct.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Featured Products">
                    </a>
                    <div class="p-2">
                    <h4 class="fw-500">@PosProduct.Attribute</h4>
                    <div class="card-text d-flex align-items-start justify-content-between">
                    <h5 class="m-0">
                    <a>
                    <img src="images/shop-icon.svg" class="img-fluid" alt="Shop">@PosProduct.Desc1
                    </a>
                    </h5>
                    <div class="d-flex align-items-center justify-content-end ms-auto">
                    <del>@String.Format("{0:C}", @PosProduct.Price1)</del>
                    <h4>@String.Format("{0:C}", @PosProduct.Price2)</h4>
                    </div>
                    </div>
                    </div>
                    </div>*@
                                    <a class="card featured-product-card position-relative cursor-pointer" @onclick="e => GetPosProductByID(PosProduct.ListId)">

                                        @*<div class="discount-label">
                        <span class="position-absolute"> % OFF</span>
                        </div>*@

                                        <div class="d-flex align-items-lg-start">
                                            <div class="card-img">
                                                <img src='@(!string.IsNullOrWhiteSpace(PosProduct.Image) ? PosProduct.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Featured Products">
                                            </div>
                                            <h4 class="fw-500 m-0">
                                                @PosProduct.Attribute
                                                <h5 class="fw-500 m-0">@PosProduct.Description</h5>
                                            </h4>
                                        </div>

                                        <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                            <div class="card-text d-flex align-items-center justify-content-between">
                                                @if (PosProduct.StoreListDetails != null)
                                                {
                                                    @if (PosProduct.StoreListDetails.Count != 0)
                                                    {

                                                        @foreach (var storeDetails in PosProduct.StoreListDetails.Where(s => s.IsLocationFound).Take(1))
                                                        {
                                                            <h5 class="m-0">
                                                                <span class="mb-0 innter-subtitle">
                                                                    <img src="images/shop-icon.svg" class="img-fluid" alt="Shop">@storeDetails.Name
                                                                </span>
                                                            </h5>
                                                        }
                                                    }
                                                }
                                                <div class="d-flex align-items-center justify-content-end ms-auto">
                                                    <del>$ @PosProduct.Price1</del>
                                                    <h4>$ @PosProduct.Price2</h4>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            }
                        }
                        else
                        {
                            <h5 class="m-0">
                                <a>
                                    <img src="images/shop-icon.svg" class="img-fluid" alt="Shop"> OOPS!! NO Products Found
                                </a>
                            </h5>
                        }
                    }
                }
            </div>
            <!-- row -->
        </div>
    </section>
    <!-- Featured Products end -->
</main>

<div class="modal fade bottom shop-filter-modal" id="shopFilterModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog container">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="exampleModalLabel">Filter</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="filter-selection">
                    <h4>Sort By Price:</h4>
                    <div class="form-check p-0">
                        <label class="form-check-label" for="filtersortby01">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="filtersortby01" @onclick="@(() => SortBy("discount"))">
                            Low to High
                        </label>
                    </div>
                    <div class="form-check p-0">
                        <label class="form-check-label" for="filtersortby02">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="filtersortby02" @onclick="@(() => SortBy("discount_desc"))">
                            High to Low
                        </label>
                    </div>
                </div>
            </div>
            <div class="filter-selection">
                <h4>Category:</h4>
                @if (pOSDepartmentListResponse.Details != null && pOSDepartmentListResponse.Details.Count > 0)
                {
                    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var data in pOSDepartmentListResponse.Details)
                        {
                            <input type="radio" class="btn-check" name="btnradio01" id="@data.DepartmentName" autocomplete="off" checked="">
                            <label class="btn" value="@listRequest.Name" @onclick="e => SubCategoryList(data.ListId)" for="@data.DepartmentName">@data.DepartmentName</label>
                        }
                    </div>
                }
                @if (flag == true)
                {
                    <p class="mt-2">No Sub category found</p>
                }

                @if (pOSSubCategoryByIdResponse.Details != null && pOSSubCategoryByIdResponse.Details.Count > 0)
                {
                    <h4 class="mt-1">Sub Category:</h4>
                    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var category in pOSSubCategoryByIdResponse.Details)
                        {
                            <input type="radio" class="btn-check" name="btnradio02" id="@category.Name" autocomplete="off" checked="">
                            <label class="btn" id="@category.Name" value="@category.Name" for="@category.Name"
                           @onclick="e => Apply(category.Name)">@category.Name</label>
                        }
                    </div>
                }
            </div>
            <div class="modal-footer justify-content-between justify-content-md-start border-0 p-0">
                <button type="button" class="btn btn-common btn-barcode me-3 me-xl-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-common" data-bs-dismiss="modal" @onclick="ApplyFilter">Apply</button>
            </div>
        </div>
    </div>
</div>

<!--  Shop Filter Modal start -->
@if (Loader == true)
{
    <!-- Preloader Start -->
    <div id="preloader">
        <div class="main-container">
            <!-- Circle animation img start -->
            <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
            <!-- Circle animation img end -->
            <!-- Azara logo start -->
            <div class="center-logo">
                <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
            </div>
            <!-- Azara logo end -->
        </div>
    </div>
    <!-- Preloader End -->
}

<!--  Shop Filter Modal end -->
@code {

    ShopProductListResponse shopProductListResponse = new();
    ProductListBysubcategoryId Listresponse = new ProductListBysubcategoryId();
    ProductCategoryResponse productCategoryResponse = new ProductCategoryResponse();
    ListRequest listRequest = new ListRequest();
    PaginationRequest paginationRequest = new PaginationRequest();
    PosInventoryResponse posInventoryResponse = new PosInventoryResponse();
    POSInventoryListRequest pOSInventoryListRequest = new POSInventoryListRequest();
    POSSubCategoryByIdResponse pOSSubCategoryByIdResponse = new POSSubCategoryByIdResponse();
    POSDepartmentListRequest pOSDepartmentListRequest = new POSDepartmentListRequest();
    POSDepartmentListResponse pOSDepartmentListResponse = new POSDepartmentListResponse();
    POSInventoryDistinctSubCategoryList request = new POSInventoryDistinctSubCategoryList();


    int PageSize = 1000;
    bool Loader = true, ListFlage = true;
    string token;
    [Parameter]
    public string Id { get; set; }
    public string listId { get; set; }
    public bool flag = false;
    protected override async Task OnInitializedAsync()
    {
        token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
        string[] url = NavManager.Uri.Split('/');
        if (location != null)
        {
            await localStorage.SetItemAsync("locationDetail", location.ToString());
            pOSInventoryListRequest.LocationDetail = location.ToString();
        }
        if (Id != null)
        {
            Id = GenericHelper.Decipher(Id, 3);
        }

        Loader = true;
        await LoadProductCategory();
        if (Id != null)
        {
            await ProductListByProductSubCategory();
        }
        else
        {
            await LoadPosProductData();
            if (url.Last() == "shop-product-list")
            {
                await StartHubConnection();
            }
            //await StartHubConnection();
            await GetProduct();
            await DeleteProduct();
            await UpdateProduct();
            await LoadPoductCategoryData();
        }

        Loader = false;
        StateHasChanged();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;

        var result = await ShopProductHelpers.ShopProductList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }

        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                shopProductListResponse = JsonConvert.DeserializeObject<ShopProductListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task LoadPosProductData(int pageNumber = 0)
    {
        Loader = true;
        paginationRequest.PageNo = pageNumber;
        paginationRequest.PageSize = 100;

        var result = await ShopProductHelpers.PosInventoryList(pOSInventoryListRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            posInventoryResponse = JsonConvert.DeserializeObject<PosInventoryResponse>(result.data);

        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task LoadPoductCategoryData()
    {
        Loader = true;
        //listRequest.PageNo = pageNumber;
        //listRequest.PageSize = PageSize;

        //var result = await ShopProductHelpers.ProductCategoryList(listRequest);
        var result = await POSDepartmentListHelper.DepartmentList(pOSDepartmentListRequest);

        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                //productCategoryListResponse = JsonConvert.DeserializeObject<ProductCategoryResponse>(result.data);
                pOSDepartmentListResponse = JsonConvert.DeserializeObject<POSDepartmentListResponse>(result.data);


            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task LoadProductCategory(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;

        var result = await ShopProductHelpers.ProductCategoryList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }

        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                productCategoryResponse = JsonConvert.DeserializeObject<ProductCategoryResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task SubCategoryList(string Id)
    {
        Loader = true;
        request.DepartmentListID = Id;
        var result = await ShopProductHelpers.ProductSubCategorybyID(request);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                pOSSubCategoryByIdResponse = JsonConvert.DeserializeObject<POSSubCategoryByIdResponse>(result.data);
                if (pOSSubCategoryByIdResponse.Details.Count == 0)
                {
                    flag = true;
                }
                if (pOSSubCategoryByIdResponse.Details.Count != 0)
                {
                    flag = false;
                }

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Error");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task ProductListByProductSubCategory()
    {
        Loader = true;
        ListFlage = false;

        var result = await ShopProductHelpers.ProductListByProductSubCategory(new BaseIdRequest { Id = new(Id) });
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }

        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                Listresponse = JsonConvert.DeserializeObject<ProductListBysubcategoryId>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/shop-product-list-detail/{cipheredId}");
        StateHasChanged();
    }

    internal void GetPosProductByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/shop-pos-product-list-detail/{cipheredId}");
        StateHasChanged();
    }

    internal void StoreGetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/store-details/{cipheredId}");
        StateHasChanged();
    }

    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(pOSInventoryListRequest.SortBy))
        {
            string[] search = pOSInventoryListRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                pOSInventoryListRequest.SortBy = pOSInventoryListRequest.SortBy.Contains("desc") ? pOSInventoryListRequest.SortBy.Replace("desc", "asc") : pOSInventoryListRequest.SortBy.Replace("asc", "desc");
            else
                pOSInventoryListRequest.SortBy = $"{sortBy}_asc";
        }
        else
            pOSInventoryListRequest.SortBy = $"{sortBy}_asc";

    }

    public async void Apply(string filter)
    {
        pOSInventoryListRequest.Desc1 = filter;
    }

    public async void ApplyFilter()
    {
        await LoadPosProductData();
        StateHasChanged();
        //await LoadData();
        //NavManager.NavigateTo($"/shop-product-list");
    }

    private async void SearchData(ChangeEventArgs e)
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            listRequest.Name = e.Value.ToString().Trim();
            await LoadData();
        }
        else
        {
            listRequest.Name = string.Empty;
            await LoadData();
        }
        Loader = false;
        StateHasChanged();
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        //if (IsConnected)
        //    await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    internal async Task GetProduct()
    {
        try
        {
            hubConnection.On<dynamic>("product_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task UpdateProduct()
    {
        try
        {
            hubConnection.On<dynamic>("product_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task DeleteProduct()
    {
        try
        {
            hubConnection.On<dynamic>("product_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

}
