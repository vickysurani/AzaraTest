@page "/deals"

<PageTitle>@ClientTitleModel.DealTitle</PageTitle>

<!-- Top Back Panel start -->
<div class="position-fixed top-0 start-0 end-0 container">
    <div class="back-panel d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center justify-content-start">
            <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
            <h1>Deals</h1>
        </div>
    </div>
</div>
<!-- Top Back Panel end -->
<!-- Deals start -->
<section class="common-padding xs-padding">
    <div class="container">
        <div class="row row-cols-1 row-cols-md-3 gx-12 gx-md-3 gx-lg-4 deal-row">
            @if (dealsListResponse.Details != null )
            {
                @if (dealsListResponse.Details.Count != 0)
                {
                    @foreach (var data in dealsListResponse.Details)
                    {
                        <div class="col">
                            <div class="card rewards-card">
                                <a @onclick="e => GetByID(data.Id)" class="card-img">
                                    <img src="@data.DealBannerImage" class="img-fluid" alt="Reward">
                                </a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <section class=" py-5 position-relative d-flex align-items-center justify-content-center">
                        <div class="no-data-found text-center">
                            <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                            <h2>Oppps...</h2>
                            <h4>No Deales Found</h4>
                        </div>
                    </section>
                }
            }

        </div>
    </div>
</section>
<!-- Deals end -->
@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
  <!-- Preloader End -->
}
@code {
    DealsListResponse dealsListResponse = new DealsListResponse();
    ListRequest listRequest = new ListRequest();
    int PageSize;
    bool Loader = true;
    string token;

    protected override async Task OnInitializedAsync()
    {
        string[] url = NavManager.Uri.Split('/');
        token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        Loader = true;
        await LoadData();
        //await StartHubConnection();
        if (url.Last() == "deals")
        {
            await StartHubConnection();
        }
        await GetAdvertisement();
        await DeleteAdvertisement();
        await UpdateAdvertisement();
        await StatusUpdateAdvertisement();
        Loader = false;

        StateHasChanged();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        var result = await DealsHelpers.DealsListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                dealsListResponse = JsonConvert.DeserializeObject<DealsListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
        }
        Loader = false;
        StateHasChanged();
    }

    internal void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/deals-details/{cipheredId}");
        StateHasChanged();
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        if (hubConnection.ConnectionId != null)
            await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    internal async Task GetAdvertisement()
    {
        try
        {
            hubConnection.On<dynamic>("advertisement_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task UpdateAdvertisement()
    {
        try
        {
            hubConnection.On<dynamic>("advertisement_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task DeleteAdvertisement()
    {
        try
        {
            hubConnection.On<dynamic>("advertisement_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task StatusUpdateAdvertisement()
    {
        try
        {
            hubConnection.On<dynamic>("advertisement_status_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

}
