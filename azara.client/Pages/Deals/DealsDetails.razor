@page "/deals-details/{Id}"
@using System.Text.Json.Nodes
@using azara.client.Models.Deals.Request

@layout LoginLayout

<PageTitle>@ClientTitleModel.DealTitle</PageTitle>

<!-- Top Back Panel start -->
<div class="position-fixed top-0 start-0 end-0 container">
    <div class="back-panel d-flex align-items-center justify-content-start">
        <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
        <h1>Deals Details</h1>
    </div>
</div>
<!-- Top Back Panel end -->
<!-- Coupon Details start -->
<section class="common-padding position-relative xs-padding">
    <div class="container">
        <div class="row">
            <div class="col-12">

                <div class="row">
                    <div class="col-lg-6 mb-4 mb-lg-0">
                        <!-- Coupon Reward Image Start -->
                        <div class="coupon-reward-img sm-margin">
                            <img src="@dealsResponse.DealBannerImage" class="img-fluid" alt="Coupon Reward">
                        </div>
                        <!-- Coupon Reward Image end -->
                    </div>
                    <!-- col end -->
                    <div class="col-lg-6">
                        <!-- Description start -->
                        <div class="product-description border-bottom-0 mb-0">
                            <h3>Description</h3>
                            @if (lenth != null && lenth > 300)
                            {
                                <p>
                                    @dealsResponse.Description.Substring(0,200)
                                </p>
                                <div class="collapse" id="collapseExample">
                                    <p>
                                        @dealsResponse.Description
                                    </p>
                                </div>
                                    @if (lenth != null && lenth > 300)
                                    {
                                        <a class="readmore-button collapsed" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample"></a>
                                    }
                            }
                            else
                            {
                                <p>
                                    @dealsResponse.Description
                                </p>
                            }
                        </div>
                       
                        <!-- Description end -->
                    </div>
                    <!-- col end -->
                </div>
                <!-- row end -->
                <!-- Available at Stores start -->
                @*<section class="position-relative xl-margin ">
                <div class="container">
                @if (dealsResponse.StoreDetails != null && dealsResponse.StoreDetails.Count > 0 & dealsResponse.StoreDetails.Any(w => !w.IsNearestLocation))
                {
                <h2>All Store</h2>
                <div class="row store-row row-cols-1">
                @if (dealsResponse.StoreDetails != null && dealsResponse.StoreDetails.Count > 0)
                {
                @foreach (var store in dealsResponse.StoreDetails.Where(w => !w.IsNearestLocation))
                {
                <div class="col">
                <a @onclick="e => GetByID(store.StoreId)" class="card store-card position-relative">
                <div class="card-img">
                <img src='@(!string.IsNullOrWhiteSpace(store.Image) ? store.Image : "AdminPanelImages/DefaultImage.png")' class="img-fluid" alt="Store">
                </div>
                <div class="card-text">
                <h3>@store.Name</h3>
                <h5><img src="images/location-icon.svg" class="img-fluid" alt="Location">@store.Location</h5>
                </div>
                </a>
                </div>
                }
                }
                else
                {
                <h5 class="m-0">
                <a>
                <img src="images/shop-icon.svg" class="img-fluid" alt="Event"> OOPS!! NO Deals Found Like This
                </a>
                </h5>
                }
                </div>
                }
                <!-- row -->
                </div>
                </section>*@
                <!-- Available at Stores end -->
            </div>
            <!-- col -->
        </div>
    </div>
    <!-- row -->

</section>

<!-- Available at Stores start -->
<section class="position-relative xl-margin ">
    <div class="container">
        <div class="mt-0 mb-4 pt-4 review-top-border">
            <h2 class="m-0 mt-md-3">Available at Stores</h2>
            @*<a href="Shop-product-deal-coupon" class="btn view-all-btn">View All</a>*@
        </div>
        @if (dealsResponse.StoreDetails != null && dealsResponse.StoreDetails.Count > 0 && dealsResponse.StoreDetails.Any(w => w.IsNearestLocation))
        {
            @*<h2>Nearest Store</h2>*@
            <div class="row store-row row-cols-1 row-cols-lg-2">
                @if (dealsResponse.StoreDetails != null && dealsResponse.StoreDetails.Count > 0)
                {
                    @foreach (var store in dealsResponse.StoreDetails.Where(w => w.IsNearestLocation))
                    {
                        <div class="col">
                            <a @onclick="e => GetByID(store.StoreId)" class="card store-card position-relative">
                                <div class="card-img">
                                    <img src='@(!string.IsNullOrWhiteSpace(store.Image) ? store.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Store">
                                </div>
                                <div class="card-text">
                                    <h3>@store.Name</h3>
                                    <h5><img src="images/location-icon.svg" class="img-fluid" alt="Location">@store.Location</h5>
                                </div>
                            </a>
                        </div>
                    }
                }
                @if (dealsResponse.StoreDetails != null && dealsResponse.StoreDetails.Count > 0)
                {
                    @foreach (var store in dealsResponse.StoreDetails.Where(w => !w.IsNearestLocation))
                    {
                        <div class="col">
                            <a @onclick="e => GetByID(store.StoreId)" class="card store-card position-relative">
                                <div class="card-img">
                                    <img src='@(!string.IsNullOrWhiteSpace(store.Image) ? store.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Store">
                                </div>
                                <div class="card-text">
                                    <h3>@store.Name</h3>
                                    <h5><img src="images/location-icon.svg" class="img-fluid" alt="Location">@store.Location</h5>
                                </div>
                            </a>
                        </div>
                    }
                }

            </div>
        }
        else
        {
            <h5 class="m-0">
                <a>
                    <img src="images/shop-icon.svg" class="img-fluid" alt="Event"> OOPS!! NO Deals Found Like This
                </a>
            </h5>
        }
    </div>
</section>
<!-- Available at Stores end -->
<!-- Coupon Details end -->
@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
  <!-- Preloader End -->
}
@code {
    int lenth;
    [Parameter]
    public string Id { get; set; }
    bool Loader = false;

    List<string> ImageList = new();
    DealsGetByIdResponse dealsResponse = new DealsGetByIdResponse();
    private string locationDetails { get; set; } = string.Empty;
    private AdvertisementIdRequest advertisementIdRequest = new();


    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
        if (location != null)
        {
            await localStorage.SetItemAsync("locationDetail", location.ToString());
            advertisementIdRequest.LocationDetail = location.ToString();
        }

        Id = GenericHelper.Decipher(Id, 3);
        await DealsGetById();
    }



    internal async Task DealsGetById()
    {
        advertisementIdRequest.Id = new(Id);
        var result = await DealsHelpers.DealsbyID(advertisementIdRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                dealsResponse = JsonConvert.DeserializeObject<DealsGetByIdResponse>(result.data);
                lenth = dealsResponse.Description.Length;

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        StateHasChanged();
    }

    internal void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/store-details/{cipheredId}");
        StateHasChanged();
    }

}

