@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using azara.client.Models.Chat.Request
@using azara.client.Models.Chat.Response

<PageTitle>@ClientTitleModel.ChatTitle</PageTitle>

@if (Loader == true)
{
    <!-- Preloader Start -->
    <div id="preloader">
        <div class="main-container">
            <!-- Circle animation img start -->
            <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
            <!-- Circle animation img end -->
            <!-- Azara logo start -->
            <div class="center-logo">
                <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
            </div>
            <!-- Azara logo end -->
        </div>
    </div>
    <!-- Preloader End -->
}
else
{
    <header class="position-relative sm-margin mb-2">
        <div class="container">
            <div class="d-flex align-items-center justify-content-between">
                <div class="top-bar-header d-flex align-items-center justify-content-start">
                    <a href="#" class="bars custom-toggle-bar" @onclick="CustomToggleBar" data-bs-toggle="modal" data-bs-target="#side-navigation-menu">
                        <span></span>
                        <span></span>
                        <span></span>
                    </a>
                    <h1>Chat</h1>
                </div>
                <a href="notification.html" class="account-label">
                    <img src="images/notification-icon.svg" class="img-fluid notification" alt="Notification">
                </a>
            </div>
        </div>
    </header>
    <!--******************* Header Section End *********************-->
    <!--******************* Middle Section Start ******************-->
    <main class="custom-main-section">
        <div class="container">
            <div class="row chat-row">
                <div class="col-12 col-md-11 mx-auto">
                    <div class="chat-detail-section position-relative">
                        <ul class="p-0 m-0 chat-section">
                            @if (byIdResponse.chatDetails != null && byIdResponse.chatDetails.Count > 0)
                            {
                                bool isDateChange = true;
                                DateTime date = DateTime.UtcNow;
                                @foreach (var store in byIdResponse.chatDetails)
                                {
                                    if (date.Date != store.Created.Date)
                                    {
                                        date = store.Created;
                                        isDateChange = true;
                                    }

                                    if (isDateChange)
                                    {
                                        if (store.Created >= DateTime.Today)
                                        {
                                            <li class="custom-date-text">Today</li>
                                        }
                                        else if (store.Created >= DateTime.Today.AddDays(-1))
                                        {
                                            <li class="custom-date-text">Yesterday</li>
                                        }
                                        else
                                        {
                                            <li class="custom-date-text">@store.Created.ToString("dd/MM/yy")</li>
                                        }
                                        isDateChange = false;
                                    }
                                    <li class="@(@store.IsUserMessage ? "userMessage" : "adminMessage")">
                                        <p>@store.Message</p>
                                        <span class="time">@store.Created.ToString("HH:mm tt")</span>
                                        <div class="position-absolute top-0">
                                            <div class="dropdown">
                                                <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <span></span><span></span><span></span>
                                                </button>
                                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                                    <li><a class="dropdown-item" href="#"><img src="images/edit-icon.svg" class="img-fluid" alt="Edit"> Edit</a></li>
                                                    <li><a class="dropdown-item" href="#"><img src="images/close.svg" class="img-fluid" alt="Edit"> Remove</a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </li>
                                }
                            }
                            <EditForm Model="chatInsert" OnValidSubmit="SendChat">
                                <div class="msg-footer">
                                    <div class="position-relative w-100">
                                        <InputText @bind-Value="chatInsert.Message" class="form-control" placeholder="Write here..." id="message"></InputText>
                                        <ValidationMessage For="@(() => chatInsert.Message)" />

                                        @*<a href="javascript:void(0)" class="gallery"><img src="images/gallery-icon.svg" class="img-fluid" alt="Gallery"></a>*@
                                    </div>
                                    <button type="submit" class="submit"> <img src="images/submit-icon.svg" class="img-fluid" alt="Submit"></button>
                                </div>
                            </EditForm>
                        </ul>
                    </div>
                </div>
                <!-- col -->
            </div>
            <!-- row -->
        </div>
    </main>
}
@code {
    ChatGetByIdResponse byIdResponse = new ChatGetByIdResponse();
    ListRequest listRequest = new ListRequest();
    BaseIdRequest request = new BaseIdRequest();
    ChatInsertRequest chatInsert = new ChatInsertRequest();
    int PageSize = 10;
    bool Loader = true;
    string token, userid;
    Guid Id;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string[] url = NavManager.Uri.Split('/');
            token = await localStorage.GetItemAsync<string>("token");
            Id = await localStorage.GetItemAsync<Guid>("userId");
            TokenResponse.Token = token;
            Loader = true;
            if (url.Last() == "chat")
            {
                await StartHubConnection();
            }
            //await StartHubConnection();
            await ChatReceive();
            await ChatLoad();

            Loader = false;
            await JsRuntime.InvokeVoidAsync("scrollDown");
            StateHasChanged();

        }
    }

    internal async Task ChatLoad()
    {
        Loader = true;
        request.Id = Id;
        var result = await ChatHelpers.ChatbyID(request);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                byIdResponse = JsonConvert.DeserializeObject<ChatGetByIdResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        Loader = false;
        StateHasChanged();
    }


    internal async Task SendChat()
    {
        if (string.IsNullOrWhiteSpace(chatInsert.Message))
            return;

        chatInsert.UserId = Id;
        var result = await ChatHelpers.ChatInsertApi(chatInsert);
        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await ChatLoad();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
            return;
        }
        chatInsert.Message = string.Empty;
        await JsRuntime.InvokeVoidAsync("scrollDown");
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        //if (IsConnected)
        //    await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    internal async Task ChatReceive()
    {
        try
        {
            hubConnection.On<dynamic>("user_chat", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    var chatReceive = JsonConvert.DeserializeObject<ChatReceive>(encodedMsg);
                    if (chatReceive != null)
                    {
                        if (chatReceive.Id.Equals(Id) && !string.IsNullOrWhiteSpace(chatReceive.Message))
                            AddChatData(chatReceive.Message);
                    }
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task AddChatData(string message)
    {
        byIdResponse.chatDetails.Add(new ChatDetail
            {
                Created = DateTime.UtcNow,
                IsUserMessage = false,
                Message = message
            });
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("scrollDown");
    }

    private void CustomToggleBar()
    {
        JsRuntime.InvokeVoidAsync("CustomToggleBar");
    }
}
