@page "/privacyPolicy"

@layout LoginLayout

<!-- Top Back Panel start -->
<div class="position-fixed top-0 start-0 end-0 container">
    <div class="back-panel d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center justify-content-start">
            <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
            <h1>
                Privacy Policy
            </h1>
        </div>
    </div>
</div>
<!-- Top Back Panel end -->
<!-- Privacy Policy start -->
<section class="terms-condt-details common-padding position-relative xs-padding">
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-10 mx-auto">
                @if (listResponse.details != null)
                {
                    @if (listResponse.details.Count != 0)
                    {
                        @foreach (var data in listResponse.details)
                        {
                            <p>@data.description</p>
                        }

                    }

                }
            </div>
            <!-- col -->
        </div>
        <!-- row -->
    </div>
</section>

@code {


    PrivacyPolicyListResponse listResponse = new PrivacyPolicyListResponse();
    PrivacyPolicyGetListRequest listRequest = new PrivacyPolicyGetListRequest();
    int PageSize = 1000, lenth;
    bool Loader = true;
    string token;

    protected override async Task OnInitializedAsync()
    {
        string[] url = NavManager.Uri.Split('/');
        token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        Loader = true;
        await LoadData();
        StateHasChanged();
        Loader = false;

        StateHasChanged();
    }


    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        var result = await CommonHelpers.PrivacyPolicyList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                listResponse = JsonConvert.DeserializeObject<PrivacyPolicyListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
        }
        Loader = false;
        StateHasChanged();
    }

}
