@page "/reset-password/{EmailId}"
@using System.Timers
@using azara.client.Helpers.Generic
@layout LoginLayout

<PageTitle>@ClientTitleModel.ResetPasswordTitle</PageTitle>

@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
  <!-- Preloader End -->
}
else
{
    <!--******************* Middle Section Start ******************-->
    <main>
        <section class="position-relative overflow-x-hidden">
            <div class="container">
                <div class="login-details vh-100">
                    <div class="row">
                        <div class="col-md-7 col-lg-6 col-xl-5 col-xxl-4 mx-auto">
                            <EditForm Model="resetPasswordRequest" OnValidSubmit="ResetUserPassword">
                                <DataAnnotationsValidator />
                                @*<!-- otp start-->
                            <div class="d-block">
                            <h1>OTP Verification</h1>
                            <p>
                            Enter 6 Digit verification code send to <span class="verification-email">@EmailId</span>
                            </p>
                            <div class="row SetOtp">
                            <div class="form-group otp-form-group col-12 d-flex align-items-center justify-content-between">
                            <InputText @bind-Value="otp0" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            <InputText @bind-Value="otp1" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            <InputText @bind-Value="otp2" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            <InputText @bind-Value="otp3" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            <InputText @bind-Value="otp4" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            <InputText @bind-Value="otp5" class="form-control mobile-verify pass" placeholder="0" onKeyPress="if(this.value.length==1) return false;" />
                            </div>
                            </div>
                            <div class="text-center">
                            <a class="@(counter == 0 ? "resend-btn" : "disabled-link")" @onclick="ResendPasswordCode">Resend</a>
                            <p class="resend-code-text">Resend code in 00:@counter.ToString("d2")</p>
                            </div>
                            <!-- Resend -->
                            </div>
                            <!-- otp end -->*@
                                <!-- Reset Password start -->
                                <div class="d-block">
                                    <h1>Reset Password</h1>
                                    <p>
                                        Please enter new password for your account.
                                    </p>
                                    <div class="row">
                                        <div class="form-group col-12">
                                            <label for="text" class="form-label">New Password</label>
                                            <div class="input-group eye-icons">
                                                <span class="input-group-text">
                                                    <img src="images/password-form-icon.svg"
                                                         class="img-fluid" alt="Password">
                                                </span>
                                                <input type="@TextType" @bind-value="resetPasswordRequest.Password" class="form-control" placeholder="Enter New Password"
                                                       aria-describedby="newpwdlabel">
                                                <button class="@Class" @onclick="ShowPassword"><img src="@EyeIcon" class="img-fluid" alt="User"></button>
                                            </div>
                                            <ValidationMessage For="@(() => resetPasswordRequest.Password)" />
                                        </div>
                                        <!-- col -->
                                        <div class="form-group col-12">
                                            <label for="text" class="form-label">Confirm Password</label>
                                            <div class="input-group eye-icons">
                                                <span class="input-group-text">
                                                    <img src="images/password-form-icon.svg"
                                                         class="img-fluid" alt="Password">
                                                </span>
                                                <input type="@TextConfirmType" @bind-value="resetPasswordRequest.ConfirmPassword" class="form-control" placeholder="Enter Confirm Password"
                                                       aria-describedby="newpwdlabel">
                                                <button class="@ConfirmClass" @onclick="ShowPasswordConfirm"><img src="@EyeIconConfirm" class="img-fluid" alt="User"></button>
                                            </div>
                                            <ValidationMessage For="@(() => resetPasswordRequest.ConfirmPassword)" />
                                        </div>
                                        <!-- col -->
                                    </div>
                                    <div class="form-footer-text">
                                        <p><a href="/sign-in">Back to Sign In</a></p>
                                    </div>
                                </div>
                                <!-- Reset Password end -->

                                <div class="sm-margin">
                                    <button type="submit" class="btn btn-common">Verify<span></span></button>
                                </div>
                                <!-- Verify -->

                            </EditForm>
                            <!-- row -->
                        </div>
                        <!-- col -->
                    </div>
                    <!-- row -->
                </div>
            </div>
            <!-- background Circle Shape start -->
            <img src="images/bg-top-circle.svg" class="img-fluid bg-top-circle position-absolute top-0 end-0" alt="Circle">
            <img src="images/bg-half-circle.svg" class="img-fluid bg-left-circle position-absolute bottom-0 start-0" alt="Circle">
            <img src="images/bg-half-circle.svg" class="img-fluid bg-right-circle position-absolute bottom-0 end-0" alt="Circle">
            <!-- background Circle Shape end -->
            <!-- bg Circle Wave Animation start -->
            <div class="login-waves position-fixed bottom-0 start-0 end-0">
                <div class="bg-circle-wave">
                    <span class="wave s1"></span>
                    <span class="wave s2"></span>
                    <span class="wave s3"></span>
                    <span class="wave s4"></span>
                </div>
            </div>
            <!-- bg Circle Wave Animation end -->
        </section>
    </main>
    <!--******************* Middle Section End ******************-->
}
@code {

    [Parameter]
    public string EmailId { get; set; }
    private bool Loader { get; set; } = false;
    ResetPasswordRequest resetPasswordRequest { get; set; } = new ResetPasswordRequest();
    private string otp0 { get; set; }
    private string otp1 { get; set; }
    private string otp2 { get; set; }
    private string otp3 { get; set; }
    private string otp4 { get; set; }
    private string otp5 { get; set; }

    public string EyeIcon = "images/Eye-Off.svg";
    public string EyeIconConfirm = "images/Eye-Off.svg";
    protected string TextType = "password";
    protected string TextConfirmType = "password";
    public string Class = "btn-pwd hide-icon";
    public string ConfirmClass = "btn-pwd hide-icon";

    protected override async Task OnInitializedAsync()
    {
        Loader = true;
        StartTimer();
        EmailId = GenericHelper.Decipher(EmailId, 3).Replace('-', '.');
        resetPasswordRequest.EmailId = EmailId;
        Loader = false;
    }

    private static System.Timers.Timer aTimer;
    private int counter = 59;
    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    public void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task ResendPasswordCode()
    {
        Loader = true;
        var result = await AccountHelpers.ForgotPasswordApi(new ForgotPasswordRequest { EmailId = EmailId });
        if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{Loc["response_forgot_password"]} {EmailId}");

            counter = 59;
            StartTimer();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{Loc["error_something_went_wrong"]}");
        }
        Loader = false;
    }

    internal async Task ResetUserPassword()
    {
        Loader = true;

        //string otpStr = otp0 + otp1 + otp2 + otp3 + otp4 + otp5;

        //if (string.IsNullOrWhiteSpace(otpStr) || otpStr.Length != 6)
        //{
        //    Loader = false;
        //    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{Loc["error_otp_not_found"]}");

        //    return;
        //}

        //if (!otpStr.All(a => Char.IsDigit(a)))
        //{
        //    Loader = false;
        //    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{Loc["error_invalid_otp"]}");

        //    return;
        //}

        //resetPasswordRequest.Otp = otpStr;
        var result = await AccountHelpers.ResetPasswordApi(resetPasswordRequest);

        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{result.meta.message[0]}");

            NavManager.NavigateTo("/sign-in");
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            Loader = false;
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }

        Loader = false;
    }


    protected void ShowPassword()
    {
        if (this.TextType.Equals("password"))
        {
            Class = "btn-pwd";
            TextType = "text";
            EyeIcon = "images/Eye-On.svg";
        }
        else
        {
            EyeIcon = "images/Eye-Off.svg";
            TextType = "password";
            Class = "btn-pwd hide-icon";
        }
    }

    protected void ShowPasswordConfirm()
    {
        if (this.TextConfirmType.Equals("password"))
        {
            TextConfirmType = "text";
            EyeIconConfirm = "images/Eye-On.svg";
            ConfirmClass = "btn-pwd";
        }
        else
        {
            EyeIconConfirm = "images/Eye-Off.svg";
            TextConfirmType = "password";
            ConfirmClass = "btn-pwd hide-icon";
        }
    }
}
