@page "/index"
@using azara.client.Models.Banner;
@using azara.client.Models.Coupons
@using azara.client.Models.Coupons.Response
@using azara.client.Models.Points.Response;
@using azara.client.Models.Rewards
@using Syncfusion.Blazor;

@inject IJSRuntime JSRuntime;


<PageTitle>@ClientTitleModel.IndexTitle</PageTitle>

<Header></Header>

@if (Loader == true)
{
    <!-- Preloader Start -->
    <div id="preloader">
        <div class="main-container">
            <!-- Circle animation img start -->
            <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
            <!-- Circle animation img end -->
            <!-- Azara logo start -->
            <div class="center-logo">
                <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
            </div>
            <!-- Azara logo end -->
        </div>
    </div>
    <!-- Preloader End -->
}
else
{
    <main class="custom-main-section">
        <!-- Points Start -->
        <section class="sm-margin pb-lg-2">
            <div class="container">
                <div class="mainpoints-card">
                    <h4>Available Points</h4>
                    <h3>@pointsGetByIdResponse.AvailablePointCount</h3>
                </div>
            </div>
        </section>
        <!-- Points End -->
        <!--******************* Banner Section Start *********************-->
        <section class="common-banner-card lg-margin">
            <div class="container">
                <div class="row row-cols-1 row-cols-md-3 gx-12 gx-md-3 gx-lg-4">
                    <div class="col">
                        <img src='@(!string.IsNullOrWhiteSpace(@BannerImage1) ? @BannerImage1 : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Card">
                    </div>
                    <!-- col -->
                    <div class="col">
                        <img src='@(!string.IsNullOrWhiteSpace(@BannerImage2) ? @BannerImage2 : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Card">
                    </div>
                    <!-- col -->
                    <div class="col">
                        <img src='@(!string.IsNullOrWhiteSpace(@BannerImage3) ? @BannerImage3 : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Card">
                    </div>
                    <!-- col -->
                </div>
                <!-- row -->
            </div>
        </section>
        <!-- Common card banner end -->
        <!--******************* Banner Section End *********************-->
        <!-- Tabs start -->
        <section class="position-relative xl-margin">
            <div class="container">
                <ul class="nav nav-pills rewards-custom-pills" id="pills-tab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="pills-rewards-tab" data-bs-toggle="pill" data-bs-target="#pills-rewards"
                                type="button" role="tab" aria-controls="pills-rewards" aria-selected="true">
                            rewards
                        </button>
                    </li>
                    @*<li class="nav-item" role="presentation">
                <button class="nav-link active" id="pills-rewards-tab" data-bs-toggle="pill" data-bs-target="#pills-posrewards"
                type="button" role="tab" aria-controls="pills-posrewards" aria-selected="true">
                POS rewards
                </button>
                </li>*@
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="pills-my-reward-tab" data-bs-toggle="pill" data-bs-target="#pills-my-reward"
                                type="button" role="tab" aria-controls="pills-my-reward" aria-selected="false">
                            my reward
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="pills-coupons-tab" data-bs-toggle="pill" data-bs-target="#pills-coupons"
                                type="button" role="tab" aria-controls="pills-coupons" aria-selected="false">
                            coupons
                        </button>
                    </li>
                    @*<li class="nav-item" role="presentation">
                <button class="nav-link" id="pills-punch-cards-tab" data-bs-toggle="pill"
                data-bs-target="#pills-punch-cards" type="button" role="tab" aria-controls="pills-punch-cards"
                aria-selected="false">
                punch-cards
                </button>
                </li>*@
                </ul>
                <div class="tab-content" id="pills-tabContent">
                    @*Reward Section Start*@
                    <div class="tab-pane fade show active" id="pills-rewards" role="tabpanel" aria-labelledby="pills-rewards-tab">
                        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 rewards-row gx-md-3 gx-4">
                            @if (rewardListResponse.Details != null)
                            {
                                @if (rewardListResponse.Details.Count != 0)
                                {
                                    @foreach (var reward in rewardListResponse.Details)
                                    {
                                        @if (reward.IsUsed == false)
                                        {

                                            <div class="col">
                                                @*<div class="card rewards-card expired">
                            <a class="card-img">
                            <img src="@(!string.IsNullOrWhiteSpace(reward.Image) ? reward.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                            </a>
                            <div class="card-text d-flex align-items-center justify-content-between">
                            <b><h6>@reward.Name</h6></b>
                            <h6>
                            R.P : @(!string.IsNullOrWhiteSpace(reward.rewardsPoint.ToString()) ? reward.rewardsPoint : "0")
                            </h6>
                            <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                            </div>
                            </div>*@
                                                <div class="card featured-product-card position-relative cursor-pointer" @onclick="e => RewardGetByID(reward.Id)">
                                                    <div class="d-flex align-items-lg-start">
                                                        @* <a class="card-img">
                                    <img src="@(!string.IsNullOrWhiteSpace(reward.Image) ? reward.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                                    </a>*@
                                                        <div class="card-img">
                                                            <img src="@(!string.IsNullOrWhiteSpace(reward.Image) ? reward.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                                                        </div>

                                                        <h4 class="fw-500 m-0">
                                                            @reward.Name
                                                            <h5 class="fw-500 m-0 mt-2">@reward.Description</h5>
                                                        </h4>
                                                    </div>
                                                    <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                                        <div class="card-text d-flex align-items-center justify-content-between">
                                                            <h5 class="mb-0">
                                                                <a href="javascript:void(0)">R.P : @(!string.IsNullOrWhiteSpace(reward.rewardsPoint.ToString()) ? reward.rewardsPoint : "0")</a>
                                                            </h5>
                                                            <a @onclick="e => AddReward(reward.Id)" class="btn btn-common">Add Reward<span></span></a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                    }
                                }
                                else
                                {
                                    <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                                        <div class="no-data-found text-center">
                                            <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                                            <h2>Oppps...</h2>
                                            <h4>No product available for this store</h4>
                                        </div>
                                    </div>
                                }
                            }

                            @*POSCustomerReward start *@

                            @*@if (posRewardList.details != null)
                        {
                        @if (posRewardList.details.Count != 0)
                        {
                        @foreach (var posreward in posRewardList.details)
                        {

                        <div class="col">
                        <div class="card rewards-card">
                        <a class="card-img">
                        <img src="https://azaradocument.blob.core.windows.net/user/DefaultIMG.png" class="img-fluid" alt="Reward">
                        </a>
                        <div class="card-text d-flex align-items-center justify-content-between">
                        <h6>@posreward.rewardExpirationDate.ToString("dd MMM, yyyy")</h6>
                        <h6>@posreward.fullName</h6>
                        <a class="btn btn-common">Add Reward<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                        </div>
                        </div>
                        </div>

                        }
                        }
                        else
                        {
                        <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                        <div class="no-data-found text-center">
                        <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                        <h2>Oppps...</h2>
                        <h4>No product available for this store</h4>
                        </div>
                        </div>
                        }
                        }*@
                            @*POSCustomerReward End*@

                        </div>
                        <!-- row -->
                    </div>
                    @*POSReward Section Start*@
                    @*<div class="tab-pane fade show active" id="pills-posrewards" role="tabpanel" aria-labelledby="pills-rewards-tab">
                <div class="row row-cols-1 row-cols-sm-3 rewards-row gx-md-3 gx-4">
                @if (posRewardList.details != null)
                {
                @if (posRewardList.details.Count != 0)
                {
                @foreach (var posreward in posRewardList.details)
                {

                <div class="col">
                <div class="card rewards-card">
                <a class="card-img">
                <img src="https://azaradocument.blob.core.windows.net/user/placeholder-store.jpg" class="img-fluid" alt="Reward">
                </a>
                <div class="card-text d-flex align-items-center justify-content-between">
                <h6>@posreward.rewardExpirationDate.ToString("dd MMM, yyyy")</h6>
                <h6>@posreward.fullName</h6>
                <a class="btn btn-common">Add Reward<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                </div>
                </div>
                </div>

                }
                }
                else
                {
                <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                <div class="no-data-found text-center">
                <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                <h2>Oppps...</h2>
                <h4>No product available for this store</h4>
                </div>
                </div>
                }
                }

                </div>
                <!-- row -->
                </div>
                @*MYReward Section Start*@
                    <div class="tab-pane fade" id="pills-my-reward" role="tabpanel" aria-labelledby="pills-my-reward-tab">
                        <div class="row row-cols-1 row-cols-sm-3 rewards-row gx-md-3 gx-4">

                            @if (myReward.Details != null)
                            {
                                @if (myReward.Details.Count != 0)
                                {
                                    @foreach (var Myreward in myReward.Details)
                                    {
                                        @if (Myreward.IsUsed == false)
                                        {
                                            <div class="col">
                                                <div class="card featured-product-card position-relative">
                                                    @*<div class="d-flex align-items-lg-start">
                                <a href="javascript:void(0)" class="card-img">
                                <img src="@(!string.IsNullOrWhiteSpace(Myreward.Image) ? Myreward.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                                </a>
                                <h4 class="fw-500 m-0">
                                @if (Myreward.Name != null)
                                {
                                @Myreward.Name
                                }
                                </h4>
                                </div>*@
                                                    <a @onclick="e => MyrewardGetByID(Myreward.Id)" href="javascript:void(0)" class="d-flex align-items-lg-start">
                                                        <div href="javascript:void(0)" class="card-img">
                                                            <img src='@(!string.IsNullOrWhiteSpace(Myreward.Image) ? Myreward.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Reward">
                                                        </div>
                                                        <h4 class="fw-500 m-0">
                                                            @if (Myreward.Name != null)
                                                            {
                                                                @Myreward.Name
                                                            }
                                                        </h4>
                                                    </a>
                                                    <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                                        <div class="card-text d-flex align-items-center justify-content-between">
                                                            <h5>
                                                                Valid till @Myreward.CouponExpiryDate
                                                                @if (Myreward.CouponsId == null)
                                                                {
                                                                    statusId = Myreward.RewardId.ToString();
                                                                }
                                                                else
                                                                {
                                                                    statusId = Myreward.CouponsId;
                                                                }
                                                            </h5>

                                                            <a @onclick="e => OpenModel(Myreward.Description, Myreward.Barcode, Myreward.StatusId,Myreward.IsReward)" data-bs-toggle="modal" data-bs-target="#barcodeModal"
                                                               class="btn btn-common btn-barcode">Use Barcode</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                                        <div class="no-data-found text-center">
                                            <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                                            <h2>Oppps...</h2>
                                            <h4>Currently There Is No Reward!</h4>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <!-- row -->
                    </div>
                    @*MYReward Section Start*@

                    @*Coupons Section Start*@
                    <div class="tab-pane fade" id="pills-coupons" role="tabpanel" aria-labelledby="pills-coupons-tab">
                        <div class="row row-cols-1 row-cols-sm-3 rewards-row gx-md-3 gx-4">
                            @if (couponsListResponse.Details != null)
                            {
                                @if (couponsListResponse.Details.Count != 0)
                                {
                                    @foreach (var coupons in couponsListResponse.Details)
                                    {
                                        @if (coupons.IsUsed == false)
                                        {

                                            <div class="col">

                                                @*<div class="card rewards-card">
                            <a @onclick="e => GetByID(coupons.Id)" class="card-img">
                            <img src="@(!string.IsNullOrEmpty(coupons.CouponImage) ? coupons.CouponImage : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                            </a>
                            <div class="card-text d-flex align-items-center justify-content-between">
                            <b><h6>@coupons.CouponTitle</h6></b>
                            <h6>Valid till @coupons.ExpiryDate.ToString("dd MMM, yyyy")</h6>
                            <a @onclick="e => AddCoupon(coupons.Id)" class="btn btn-common">Add Coupon<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                            </div>
                            </div>*@

                                                <div class="card featured-product-card position-relative">
                                                    @*<div class="d-flex align-items-lg-start">
                                <a @onclick="e => GetByID(coupons.Id)" class="card-img">
                                <img src="@(!string.IsNullOrEmpty(coupons.CouponImage) ? coupons.CouponImage : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")" class="img-fluid" alt="Reward">
                                </a>
                                <h4 class="fw-500 m-0">
                                @coupons.CouponTitle
                                </h4>
                                </div>*@
                                                    <a @onclick="e => GetByID(coupons.Id)" class="d-flex align-items-lg-start cursor-pointer">
                                                        <div class="card-img">
                                                            <img src='@(!string.IsNullOrWhiteSpace(coupons.CouponImage) ? coupons.CouponImage : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Coupon">
                                                        </div>
                                                        <h4 class="fw-500 m-0">
                                                            @coupons.CouponTitle
                                                            <h5 class="fw-500 m-0 mt-2">@coupons.Description</h5>
                                                        </h4>
                                                    </a>
                                                    <div class="p-2 px-0 pt-3 pb-0 mt-3">
                                                        <div class="card-text d-flex align-items-center justify-content-between">
                                                            <h5 class="mb-0">
                                                                <a href="javascript:void(0)">
                                                                    Valid till @coupons.ExpiryDate.ToString("dd MMM, yyyy")
                                                                </a>
                                                            </h5>
                                                            <a @onclick="e => AddCoupon(coupons.Id)" class="btn btn-common">Add Coupon<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                                        <div class="no-data-found text-center">
                                            <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                                            <h2>Oppps...</h2>
                                            <h4>No product available for this store</h4>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="row featured-product-row row-cols-1 row-cols-md-3 row-cols-lg-4 gx-3 gx-lg-4 justify-content-md-center">
                                    <div class="row featured-product-row row-cols-1 row-cols-md-3 row-cols-lg-4 gx-3 gx-lg-4 justify-content-md-center">
                                        <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                                            <div class="no-data-found text-center">
                                                <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                                                <h2>Oppps...</h2>
                                                <h4>Coupons Not Found please try again</h4>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <!-- row -->
                    </div>
                    @*Coupons Section End*@

                    @*Punch card Section Start*@
                    @*<div class="tab-pane fade" id="pills-punch-cards" role="tabpanel" aria-labelledby="pills-punch-cards-tab">
                <div class="row row-cols-1 row-cols-sm-3 rewards-row gx-md-3 gx-4">
                @if (punchcardlistresponse.Details != null)
                {
                @if (punchcardlistresponse.Details.Count != 0)
                {
                @foreach (var punchcard in punchcardlistresponse.Details)
                {
                <div class="col">
                @if (punchcard.IsUsed == true)
                {
                if (IsUsed)
                {
                <div class="card rewards-card expired">
                <a class="card-img">
                <img src="@punchcard.Image" class="img-fluid" alt="Reward">
                </a>
                <div class="card-text d-flex align-items-center justify-content-between">
                <h6>Valid till @punchcard.ExpiryDate.ToString("dd MMM, yyyy")</h6>
                <a @onclick="e => AddCoupon(punchcard.Id)" class="btn btn-common">Add Punchcard<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                </div>
                </div>
                }
                }
                else
                {
                <div class="card rewards-card">
                <a @onclick="e => GetByID(punchcard.Id)" class="card-img">
                <img src="@punchcard.Image" class="img-fluid" alt="Reward">
                </a>
                <div class="card-text d-flex align-items-center justify-content-between">
                <h6>Valid till @punchcard.ExpiryDate.ToString("dd MMM, yyyy")</h6>
                <a @onclick="e => AddCoupon(punchcard.Id)" class="btn btn-common">Add Punchcard<span style="top: 36.3438px; left: 33.5781px;"></span></a>
                </div>
                </div>
                }
                </div>
                }
                }
                }
                else
                {
                <div class="row featured-product-row row-cols-1 row-cols-md-3 row-cols-lg-4 gx-3 gx-lg-4 justify-content-md-center">

                <div class="row featured-product-row row-cols-1 row-cols-md-3 row-cols-lg-4 gx-3 gx-lg-4 justify-content-md-center">

                <div class="position-relative d-flex align-items-center justify-content-center py-5 w-100">
                <div class="no-data-found text-center">
                <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                <h2>Oppps...</h2>
                <h4>No product available for this store</h4>
                </div>
                </div>
                </div>
                </div>

                }
                </div>
                <!-- row -->
                </div>*@
                    @*Punch card Section Start*@

                </div>
            </div>
        </section>
        <!-- Tabs end -->
    </main>
    <!-- Modal start -->
    <div class="modal fade custom-app-modal" id="customPopupModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body">
                    <p>Please Vists The Azara Application <br /> Thank You!</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <button type="button" class="btn btn-common btn-barcode me-3 me-xl-4" data-bs-dismiss="modal" @onclick="UpdateAdminProfile">Ok</button>
                        @*<button type="button" class="btn btn-common" @onclick="GoTo" target="_blank" data-bs-dismiss="modal">Apply</button>*@
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal End -->
    <!-- Barcode Modal start -->
    <div class="modal fade barcode-Modal" id="barcodeModal" tabindex="-1" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body">
                    @if (BarCode != null)
                    {
                        <SfBarcodeGenerator @ref="BarcodeInst" Value="@BarCode"
                                    Type="BarcodeType.Code128"
                                    Height="100px"
                                    Width="200px"
                                    ForeColor="Black">
                            <BarcodeGeneratorDisplayText Text="@BarCode"></BarcodeGeneratorDisplayText>
                        </SfBarcodeGenerator>

                    }
                    else
                    {
                        <p>No Barcode Here</p>
                    }
                    <p>@BarcodeDis</p>
                    <p>
                        <b>

                            To use reward, please show this screen to employee. They will need to scan and touch your screen to process your reward
                        </b>
                    </p>
                    <div class="container">
                        <div class="input-group">
                            <input type="number" class="form-control" placeholder="Enter Code" @bind-value=@useMyRewardRequest.StatusCode aria-label="Search" aria-describedby="search-input">
                        </div>
                    </div>

                    @if (BarCode != null)
                    {

                        <a data-bs-toggle="modal" data-bs-target="#barcodeModal" @onclick="UseMyReward" class="btn btn-common btn-barcode mt-3">Verify @Flag</a>
                    }

                </div>
            </div>
        </div>
    </div>
    <!-- Barcode Modal End -->
}
@code
{
    SfBarcodeGenerator BarcodeInst;
    ListRequest listRequest = new ListRequest();
    ListIdRequest listIdRequest = new ListIdRequest();
    PaginationRequest paginationRequest = new PaginationRequest();
    CouponsListResponse couponsListResponse = new CouponsListResponse();
    RewardListResponse rewardListResponse = new RewardListResponse();
    PunchcardListResponse punchcardlistresponse = new PunchcardListResponse();
    MyRewardInsertRequest insertMyReward = new MyRewardInsertRequest();
    PosRewardList posRewardList = new PosRewardList();
    MyRewardResponse myReward = new MyRewardResponse();
    PointsGetByIdResponse pointsGetByIdResponse = new PointsGetByIdResponse();
    BaseIdRequest request = new BaseIdRequest();
    BannerImageListResponse bannerImageListResponse = new();
    UseMyRewardRequest useMyRewardRequest = new UseMyRewardRequest();
    LoginResponse loginResponse = new LoginResponse();
    SignUpRequest profileUpdateRequestResponse = new SignUpRequest();

    string? MyRewardId, userId, BarCode = " ", BarcodeDis, Flag, SID, statusId;
    bool Loader = true, IsUsed = false;
    int PageSize = 10, lenth;
    string token, BannerImage1, BannerImage2, BannerImage3;
    Guid Id;
    /// <summary>
    ///SignalRCommon signalRCommon = new SignalRCommon();
    /// </summary>
    /// <returns></returns>

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await signalRCommon.StartHubConnection();
            var token = await localStorage.GetItemAsync<string>("token");
            userId = await localStorage.GetItemAsync<string>("userId");
            TokenResponse.Token = token;
            string[] url = NavManager.Uri.Split('/');
            if (token != null && token != "" && token == TokenResponse.Token)
            {
                Loader = true;
                listRequest.UserId = userId;
                //await GetProfile();
                await LoadBanner();
                await LoadPointData();
                await LoadRewardData();
                await LoadCouponData();
                await LoadMyRewardData();
                //await POSLoadRewardData();
                //await LoadPunchcard();
                if (url.Last() == "index")
                {
                    //await StartHubConnection();
                }
                await GetCouponsList();
                await DeleteCouponsList();
                await UpdateCouponsList();
                await UpdateCSVRewardsList();
                await UpdateCSVCouponsList();
                //await GetPunchCradList();
                //await UpdatePunchCradList();
                //await DeletePunchCradList();
                await GetRewardList();
                await UpdateRewardList();
                await DeleteRewardList();
                await StatusUpdateCouponsList();
                await StatusUpdatePunchCardsList();
                await StatusUpdateRewardList();
                //await Debounce(StartHubConnection, 5000);

                Loader = false;
                StateHasChanged();
            }
            else
            {
                NavManager.NavigateTo("/homelanding");
            }
        }
    }

    private static CancellationTokenSource debounceCTS = new CancellationTokenSource();

    private static async Task Debounce(Func<Task> func, int millisecondsDelay)
    {
        try
        {
            debounceCTS.Cancel();
        }
        catch { }
        finally
        {
            debounceCTS = new CancellationTokenSource();
        }

        await Task.Delay(millisecondsDelay, debounceCTS.Token);

        if (!debounceCTS.IsCancellationRequested)
        {
            await func();
        }
    }


    private async Task GoTo()
    {
        await JsRuntime.InvokeAsync<object>("open", "https://client.azara-app.com/", "_blank");
    }

    #region Get Profile
    internal async Task GetProfile()
    {
        var result = await AccountHelpers.GetProfilApi();
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                loginResponse = JsonConvert.DeserializeObject<LoginResponse>(result.data);
            }
            else
            {
                await localStorage.ClearAsync();
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
        }
        if (loginResponse.IsFirstLogin == false)
        {
            await JsRuntime.InvokeVoidAsync("PopUp", "#customPopupModal");
        }
        StateHasChanged();
    }
    #endregion

    internal async Task UpdateAdminProfile()
    {
        Loader = true;
        profileUpdateRequestResponse.Id = loginResponse.Id;
        profileUpdateRequestResponse.IsFirstLogin = true;
        profileUpdateRequestResponse.FirstName = loginResponse.FirstName;
        profileUpdateRequestResponse.LastName = loginResponse.LastName;
        profileUpdateRequestResponse.EmailId = loginResponse.EmailId;
        profileUpdateRequestResponse.State = loginResponse.State;
        profileUpdateRequestResponse.City = loginResponse.City;
        profileUpdateRequestResponse.Address = loginResponse.Address;
        profileUpdateRequestResponse.ZipCode = loginResponse.ZipCode;

        var result = await AccountHelpers.Profileupdate(profileUpdateRequestResponse);

        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            //await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully Profile Updated!");
            //NavManager.NavigateTo("/profile-details");
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            //Loader = false;
            if (result.meta.message[0].Contains("error_account_not_found"))
            {
                //await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Bad request, try again!");
                //NavManager.NavigateTo("/profile-details");
            }
            else if (result.meta.message[0].Contains("error_otp_expired"))
            {
                //await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Token is expired");
                //NavManager.NavigateTo("/profile-details");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
        else
        {
            //Loader = false;
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
            return;
        }
        Loader = false;
    }

    #region coupons List
    private async Task LoadCouponData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;

        var result = await CouponsHelpers.CouponsListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                couponsListResponse = JsonConvert.DeserializeObject<CouponsListResponse>(result.data);
                StateHasChanged();
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;

        StateHasChanged();
    }
    #endregion coupons List

    private void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/coupons-details/{cipheredId}");
        StateHasChanged();
    }

    private void MyrewardGetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/myreward-details/{cipheredId}");
        StateHasChanged();
    }

    protected async Task LoadBanner()
    {
        Loader = true;
        var result = await CommonHelpers.BannerList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            bannerImageListResponse = JsonConvert.DeserializeObject<BannerImageListResponse>(result.data);
            foreach (var img in bannerImageListResponse.details)
            {
                BannerImage1 = img.bannerImage1;
                BannerImage2 = img.bannerImage2;
                BannerImage3 = img.bannerImage3;
            }

        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                bannerImageListResponse = JsonConvert.DeserializeObject<BannerImageListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }

    private void OpenModel(string BarDis, string Barcode, string Status, string IsRewrad)
    {
        BarcodeDis = BarDis;
        BarCode = Barcode;
        SID = Status;
        if (IsRewrad == "true")
        {
            Flag = "Rewards";
        }
        else
        {
            Flag = "Coupons";
        }
    }

    private async Task LoadRewardData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;
        var result = await RewardHelper.RewardListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                rewardListResponse = JsonConvert.DeserializeObject<RewardListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                NavManager.NavigateTo("/index");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            NavManager.NavigateTo("/index");
        }
        Loader = false;
        StateHasChanged();
    }

    private async Task POSLoadRewardData(int pageNumber = 0)
    {
        Loader = true;
        paginationRequest.PageNo = pageNumber;
        paginationRequest.PageSize = PageSize;
        var result = await RewardHelper.POSRewardListApi(paginationRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                posRewardList = JsonConvert.DeserializeObject<PosRewardList>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                NavManager.NavigateTo("/index");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            NavManager.NavigateTo("/index");
        }
        Loader = false;
        StateHasChanged();
    }

    private async Task LoadMyRewardData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;
        var result = await CommonHelpers.MyRewardListApi();
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                myReward = JsonConvert.DeserializeObject<MyRewardResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                NavManager.NavigateTo("/index");
            }

        }
        Loader = false;
        StateHasChanged();
    }

    //protected async Task LoadMyCouponsData(int pageNumber = 0)
    //{
    //    Loader = true;
    //    listRequest.PageNo = pageNumber;
    //    listRequest.PageSize = PageSize;
    //    var result = await CommonHelpers.MyCouponsAdd();
    //    if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
    //    {
    //        await localStorage.SetItemAsync("token", string.Empty);
    //        NavManager.NavigateTo("/");
    //    }
    //    else
    //    {
    //        if (result.meta.statusCode == StatusCodeConsts.Success)
    //        {
    //            myReward = JsonConvert.DeserializeObject<MyRewardResponse>(result.data);

    //        }
    //        else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
    //        {
    //            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
    //            NavManager.NavigateTo("/index");
    //        }

    //    }
    //    Loader = false;
    //    StateHasChanged();
    //}
    private async Task AddReward(string id)
    {
        Loader = true;
        insertMyReward.UserId = userId;
        insertMyReward.RewardId = id;
        var result = await CommonHelpers.MyRewardAddApi(insertMyReward);
        insertMyReward = new MyRewardInsertRequest();
        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(insertMyReward.UserId))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Updated Successfully!");
                    NavManager.NavigateTo("/", true);
                    StateHasChanged();

                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Added Successfully!");
                    NavManager.NavigateTo("/", true);
                    StateHasChanged();

                }
                await LoadMyRewardData();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }

            return;
        }
        Loader = false;

        StateHasChanged();

    }

    private async Task AddCoupon(string id)
    {
        Loader = true;
        insertMyReward.UserId = userId;
        insertMyReward.CouponsId = id;
        var result = await CommonHelpers.MyRewardAddApi(insertMyReward);
        insertMyReward = new MyRewardInsertRequest();

        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(insertMyReward.UserId))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Coupon Updated Successfully!");
                    NavManager.NavigateTo("/", true);
                    StateHasChanged();

                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Coupon Added Successfully!");
                    NavManager.NavigateTo("/");
                    StateHasChanged();

                }
                await LoadMyRewardData();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }

            return;
        }
        Loader = false;

        StateHasChanged();

    }

    private async Task UseMyReward()
    {
        Loader = true;
        useMyRewardRequest.UserId = userId;
        useMyRewardRequest.Status = Flag;
        useMyRewardRequest.StatusId = Guid.Parse(SID);
        useMyRewardRequest.Points = 0;
        var result = await CommonHelpers.UseMyReward(useMyRewardRequest);
        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            //Loader = false;
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(insertMyReward.UserId))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward is verified By ADMIN");
                    NavManager.NavigateTo("/");

                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward is verified By ADMIN");
                    NavManager.NavigateTo("/");

                }
                //await LoadMyRewardData();
                StateHasChanged();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }

            return;
        }
        Loader = false;
        StateHasChanged();

    }

    private void RewardGetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/reward-detail/{cipheredId}");
        StateHasChanged();
    }

    private async Task LoadPunchcard(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;
        var result = await CouponsHelpers.PunchcardListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                punchcardlistresponse = JsonConvert.DeserializeObject<PunchcardListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }

    #region SignalR Connection


    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute), option =>
        {
            option.SkipNegotiation = true;
        })
    .WithAutomaticReconnect()
        .Build();

        try
        {
            //await hubConnection.InvokeAsync("SomeMethod");

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }

        if (hubConnection.ConnectionId != null)
            await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    private async Task GetCouponsList()
    {
        try
        {
            hubConnection.On<dynamic>("coupons_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdateCouponsList()
    {
        try
        {
            hubConnection.On<dynamic>("coupons_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdateCSVCouponsList()
    {
        try
        {
            hubConnection.On<dynamic>("insert_coupons_csv", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdateCSVRewardsList()
    {
        try
        {
            hubConnection.On<dynamic>("insert_rewards_csv", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task DeleteCouponsList()
    {
        try
        {
            hubConnection.On<dynamic>("coupons_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task GetPunchCradList()
    {
        try
        {
            hubConnection.On<dynamic>("punchcard_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPunchcard();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdatePunchCradList()
    {
        try
        {
            hubConnection.On<dynamic>("punchcard_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPunchcard();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task DeletePunchCradList()
    {
        try
        {
            hubConnection.On<dynamic>("punchcard_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPunchcard();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task GetRewardList()
    {
        try
        {
            hubConnection.On<dynamic>("rewards_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadRewardData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdateRewardList()
    {
        try
        {
            hubConnection.On<dynamic>("rewards_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadRewardData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task DeleteRewardList()
    {
        try
        {
            hubConnection.On<dynamic>("rewards_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadRewardData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task StatusUpdateRewardList()
    {
        try
        {
            hubConnection.On<dynamic>("rewards_status_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadRewardData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task StatusUpdateCouponsList()
    {
        try
        {
            hubConnection.On<dynamic>("coupons_status_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadCouponData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task StatusUpdatePunchCardsList()
    {
        try
        {
            hubConnection.On<dynamic>("punchcard_status_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPunchcard();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task LoadPointData()
    {
        Loader = true;
        request.Id = Guid.Parse(userId);
        var result = await PointsHelpers.PointsbyID(request);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                pointsGetByIdResponse = JsonConvert.DeserializeObject<PointsGetByIdResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");

        }
        Loader = false;
        StateHasChanged();
    }




    private async Task GetList()
    {
        try
        {
            hubConnection.On<dynamic>("points_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPointData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task UpdateList()
    {
        try
        {
            hubConnection.On<dynamic>("points_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPointData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task DeleteList()
    {
        try
        {
            hubConnection.On<dynamic>("points_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadPointData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    protected async Task OnDisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    #endregion
}
