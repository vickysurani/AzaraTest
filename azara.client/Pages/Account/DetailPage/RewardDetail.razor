@page "/reward-detail/{Id}"
@using azara.client.Models.Rewards.Request
@using azara.client.Models.Rewards.Response

@layout LoginLayout

<PageTitle>@ClientTitleModel.Reward</PageTitle>


@if (Loader == true)
{
    <!-- Preloader Start -->
    <div id="preloader">
        <div class="main-container">
            <!-- Circle animation img start -->
            <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
            <!-- Circle animation img end -->
            <!-- Azara logo start -->
            <div class="center-logo">
                <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
            </div>
            <!-- Azara logo end -->
        </div>
    </div>
    <!-- Preloader End -->
}
else
{
    <!--******************* Middle Section Start ******************-->
    <main>
        <!-- Top Back Panel start -->
        <div class="position-fixed top-0 start-0 end-0 container">
            <div class="back-panel d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center justify-content-start">
                    <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
                    <h1>Reward Details</h1>
                </div>
                <a href="notification.html" class="account-label">
                    <img src="images/notification-icon.svg" class="img-fluid notification" alt="Notification">
                </a>
            </div>
        </div>
        <!-- Top Back Panel end -->
        <!-- Coupon Details start -->
        <section class="common-padding position-relative coupon-reward-details min-vh-100 md-padding">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-12 col-lg-6 mb-4 mb-lg-0">
                                <!-- Coupon Reward Image Start -->
                                <div class="coupon-reward-img sm-margin">
                                    <img src="@rewardDetails.Image" class="img-fluid" alt="Coupon Reward">
                                </div>
                                <!-- Coupon Reward Image end -->
                            </div>
                            <div class="col-12 col-lg-6">
                                <!-- Expiry date start -->
                                @*<div class="coupon-expiry-date">
                            <h5>Expiry date:</h5>
                            <h4>@rewardDetails.RewardsExpiryDate</h4>
                            </div>*@
                                <!-- Expiry date end -->
                                <div class="coupon-expiry-date">
                                    <h5>Required Points:</h5>
                                    @*<h4>@(!string.IsNullOrWhiteSpace(rewardDetails.RequiredPoints ? ) </h4>*@
                                    <h4>@(!string.IsNullOrWhiteSpace(rewardDetails.rewardsPoint.ToString()) ? rewardDetails.rewardsPoint : "0")</h4>
                                </div>
                                <!-- Description start -->
                                <div class="coupon-description">
                                    <h2>Description</h2>
                                    <p>
                                        @rewardDetails.Description
                                    </p>
                                </div>
                                <!-- Description end -->
                            </div>
                        </div>
                    </div>
                    <!-- col -->
                </div>
                <!-- row -->
            </div>
            <div class="coupon-reward-btn-section">
                <a @onclick="e => AddCouponReward()" class="btn btn-common">
                    Add Reward
                </a>
            </div>
        </section>
        <!-- Coupon Details end -->
    </main>
    <!--******************* Middle Section End ******************-->
}

@code {
    [Parameter]
    public string? Id { get; set; }
    bool Loader = true;
    string? MyRewardId, userId;

    List<string> ImageList = new();
    RewardData rewardDetails = new RewardData();
    RewardDetailsGetById rewardDetailsGetById = new RewardDetailsGetById();
    MyRewardInsertRequest insertMyReward = new MyRewardInsertRequest();

    private string locationDetails { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Loader = true;
        userId = await localStorage.GetItemAsync<string>("userId");
        var token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        Id = GenericHelper.Decipher(Id, 3);
        await RewardGetById();
        Loader = false;
    }

    protected async Task RewardGetById()
    {
        Loader = true;
        rewardDetailsGetById.Id = new(Id);
        var result = await CommonHelpers.MyRewardDetailsApi(rewardDetailsGetById);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                rewardDetails = JsonConvert.DeserializeObject<RewardData>(result.data);
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task AddCouponReward()
    {
        Loader = true;
        insertMyReward.UserId = userId;
        insertMyReward.RewardId = Id;
        var result = await CommonHelpers.MyRewardAddApi(insertMyReward);

        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(insertMyReward.UserId))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Updated Successfully!");
                    NavManager.NavigateTo("/");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Reward Insert Successfully!");
                    NavManager.NavigateTo("/");
                }
            }
            else if (result.meta.statusCode == 500)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
            return;
        }
        Loader = false;
        StateHasChanged();

    }
}
