@page "/points"
@using azara.client.Models.Points.Response

<!-- Top Back Panel start -->
<div class="position-fixed top-0 start-0 end-0 container">
    <div class="back-panel d-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center justify-content-start">
            <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
            <h1>My Points</h1>
        </div>
    </div>
</div>
<!-- Top Back Panel end -->
<!-- My Points start -->
<section class="common-padding position-relative xs-padding">
    <div class="container">
        <div class="row">
            <div class="col-12 col-md-10 mx-auto">
                <div class="my-points-title md-margin position-relative">
                    <h2>@pointsGetByIdResponse.AvailablePointCount</h2>
                    <h5>Available Points</h5>
                    <img src="images/point-circle.svg" class="img-fluid position-absolute top-0 bottom-0 end-0" alt="Shape">
                </div>

                <h2 class="mb-4 mb-lg-3">Points History</h2>
                @if (pointsGetByIdResponse.PointHistory != null && pointsGetByIdResponse.PointHistory.Count > 0)
                {

                    @foreach (var points in pointsGetByIdResponse.PointHistory)
                    {
                        <div class="card points-card d-flex align-items-center justify-content-between">
                            <div>
                                <h5>@points.PointName</h5>
                                <h6>@points.PointRedeeemDate.ToString("dd MMMM, yyyy")</h6>
                            </div>
                            @if (@points.IsSubTract != true)
                            {
                                <h4 class="plus">+ @points.Point</h4>
                            }
                            else
                            {
                                <h4 class="minus">- @points.Point</h4>
                            }
                        </div>
                    }
                }
                else
                {
                    <section class=" py-5 position-relative d-flex align-items-center justify-content-center">
                        <div class="no-data-found text-center">
                            <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                            <h2>Oppps...</h2>
                            <h4>There is no point history right now.</h4>
                        </div>
                    </section>
                }
            </div>
            <!-- col -->
        </div>
        <!-- row -->
    </div>
</section>

@code {
    PointsGetByIdResponse pointsGetByIdResponse = new PointsGetByIdResponse();
    BaseIdRequest request = new BaseIdRequest();
    int PageSize = 1000;
    bool Loader = true;
    string token;
    Guid Id;


    protected async override Task OnInitializedAsync()
    {
        Loader = true;
        var token = await localStorage.GetItemAsync<string>("token");
        Id = await localStorage.GetItemAsync<Guid>("userId");

        TokenResponse.Token = token;
        if (token != null && token != "" && token == TokenResponse.Token)
        {
            await LoadData();
            string[] url = NavManager.Uri.Split('/');
            if (url.Last() == "points")
            {
                await StartHubConnection();
            }
            //await StartHubConnection();
            await GetList();
            await DeleteList();
            await UpdateList();
            Loader = false;
        }
        else
            NavManager.NavigateTo("/");
        StateHasChanged();
        Loader = false;
    }

    internal async Task LoadData()
    {
        Loader = true;
        request.Id = Id;
        var result = await PointsHelpers.PointsbyID(request);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                pointsGetByIdResponse = JsonConvert.DeserializeObject<PointsGetByIdResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");

        }
        StateHasChanged();
        Loader = false;
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        if (hubConnection.ConnectionId != null)
            await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    internal async Task GetList()
    {
        try
        {
            hubConnection.On<dynamic>("points_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task UpdateList()
    {
        try
        {
            hubConnection.On<dynamic>("points_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task DeleteList()
    {
        try
        {
            hubConnection.On<dynamic>("points_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }
}
