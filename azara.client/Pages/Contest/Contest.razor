@page "/contest"
@using System.Text.Json.Nodes
@layout LoginLayout
<PageTitle>@ClientTitleModel.ContestTitle</PageTitle>


@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
    <!-- Preloader End -->
}
else
{
    <!-- Top Back Panel start -->
    <div class="position-fixed top-0 start-0 end-0 container">
        <div class="back-panel d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center justify-content-start">
                <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
                <h1>Contests</h1>
            </div>
        </div>
    </div>
    <!-- Top Back Panel end -->
    <!-- Events start -->
    <section class="common-padding position-relative xs-padding">
        <div class="container">
            <!-- col -->
            @if (contestListResponse.Details != null && contestListResponse.Details.Count > 0 & contestListResponse.Details.Any(w => w.IsLocationFound))
            {
                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 contests-row gx-4">
                    @foreach (var contest in contestListResponse.Details.Where(w => w.IsLocationFound))
                    {
                        <div class="col">
                            <a @onclick="e => GetByID(contest.Id)" class="card contests-card">
                                <div class="card-img">
                                    <img src="@contest.Image" class="img-fluid" alt="contest">
                                </div>
                                <div class="card-text">
                                    <h5>@contest.ContestName</h5>
                                    @if (contest.Description.Length > 20)
                                    {
                                        <h6>@contest.Description.Substring(0,30)...</h6>
                                    }
                                </div>
                            </a>
                            <!-- card -->
                        </div>
                        <!-- col -->
                    }
                    @if (contestListResponse.Details != null && contestListResponse.Details.Count > 0)
                    {
                        @foreach (var data in contestListResponse.Details.Where(w => !w.IsLocationFound))
                        {
                            <div class="col">
                                <a @onclick="e => GetByID(data.Id)" class="card contests-card">
                                    <div class="card-img">
                                        <img src="@data.Image" class="img-fluid" alt="contest">
                                    </div>
                                    <div class="card-text">
                                        <h5>@data.ContestName</h5>
                                        @if (data.Description.Length > 20)
                                        {
                                            <h6>@data.Description.Substring(0,30)...</h6>
                                        }
                                    </div>
                                </a>
                            </div>
                        }
                    }
                </div>
            }
            else
            {
                <section class=" py-5 position-relative d-flex align-items-center justify-content-center">
                    <div class="no-data-found text-center">
                        <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                        <h2>Oppps...</h2>
                        <h4>No product available for this store</h4>
                    </div>
                </section>
            }
            <!-- row -->
        </div>
    </section>
    <!-- Events end -->
    <!-- Events start -->
    @*<section class="common-padding position-relative xs-padding ">
    <div class="container">
        <h2>All Contest</h2>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 contests-row gx-md-3 gx-4">
            @if (contestListResponse.Details != null && contestListResponse.Details.Count > 0)
            {
                @foreach (var data in contestListResponse.Details.Where(w => !w.IsLocationFound))
                {
                    <div class="col">
                        <a @onclick="e => GetByID(data.Id)" class="card contests-card">
                            <div class="card-img">
                                <img src="@data.Image" class="img-fluid" alt="Event">
                            </div>
                            <div class="card-text">
                                <h3>@data.ContestName</h3>
                                <h5>@data.Description</h5>
                            </div>
                        </a>
                    </div>
                }
            }
            else
            {
                <h5 class="m-0">
                    <a>
                        <img src="images/shop-icon.svg" class="img-fluid" alt="Contest"> OOPS!! NO Contest Found Like This
                    </a>
                </h5>
            }
        </div>
        <!-- row -->
    </div>
</section>*@
    <!-- Events end -->
}

@code {
    ContestResponse contestListResponse = new ContestResponse();
    ListRequest listRequest = new ListRequest();
    int PageSize = 1000;
    bool Loader = true;
    string token;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loader = true;
            var token = await localStorage.GetItemAsync<string>("token");
            TokenResponse.Token = token;
            //if (token != null && token != "" && token == TokenResponse.Token)
            //{
                var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
                if (location != null)
                {
                    await localStorage.SetItemAsync("locationDetail", location.ToString());
                    listRequest.LocationDetail = location.ToString();
                }
                await LoadData();
                //await StartHubConnection();
                //await GetList();
                //await DeleteList();
                //await UpdateList();
                //await StatusUpdateList();
                Loader = false;
            //}
            //else
            //    NavManager.NavigateTo("/");
            StateHasChanged();
            Loader = false;
        }
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = PageSize;
        var result = await ContestHelpers.ContestListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                contestListResponse = JsonConvert.DeserializeObject<ContestResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["user_login_first"]}");

        }
        Loader = false;
        StateHasChanged();
    }

    internal void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/contest-details/{cipheredId}");
        StateHasChanged();
    }

    //private HubConnection hubConnection;


    //private async Task StartHubConnection()
    //{
    //    hubConnection = new HubConnectionBuilder()
    //        .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
    //        .WithAutomaticReconnect()
    //        .Build();

    //    await hubConnection.StartAsync();

    //    if (hubConnection.ConnectionId != null)
    //        await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
    //    StateHasChanged();
    //}

    //internal async Task GetList()
    //{
    //    try
    //    {
    //        hubConnection.On<dynamic>("contest_insert", async (data) =>
    //        {
    //            string encodedMsg = $"{data}";
    //            if (!string.IsNullOrWhiteSpace(encodedMsg))
    //            {
    //                await LoadData();
    //            }
    //        });
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
    //    }
    //}

    //internal async Task UpdateList()
    //{
    //    try
    //    {
    //        hubConnection.On<dynamic>("contest_update", async (data) =>
    //        {
    //            string encodedMsg = $"{data}";
    //            if (!string.IsNullOrWhiteSpace(encodedMsg))
    //            {
    //                await LoadData();
    //            }
    //        });
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
    //    }
    //}
    
    //internal async Task StatusUpdateList()
    //{
    //    try
    //    {
    //        hubConnection.On<dynamic>("contest_status_update", async (data) =>
    //        {
    //            string encodedMsg = $"{data}";
    //            if (!string.IsNullOrWhiteSpace(encodedMsg))
    //            {
    //                await LoadData();
    //            }
    //        });
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
    //    }
    //}

    //internal async Task DeleteList()
    //{
    //    try
    //    {
    //        hubConnection.On<dynamic>("contest_delete", async (data) =>
    //        {
    //            string encodedMsg = $"{data}";
    //            if (!string.IsNullOrWhiteSpace(encodedMsg))
    //            {
    //                await LoadData();
    //            }
    //        });
    //    }
    //    catch (Exception ex)
    //    {
    //        await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
    //    }
    //}
}
