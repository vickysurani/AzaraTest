@page "/contest-details/{Id}"

@layout LoginLayout

<PageTitle>@ClientTitleModel.ContestTitle</PageTitle>


@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
    <!-- Preloader End -->
}
else
{
    <!-- Top Back Panel start -->
    <div class="position-fixed top-0 start-0 end-0 container">
        <div class="back-panel d-flex align-items-center justify-content-start">
            <a onclick="backButton()" class="back"><img src="images/back-arrow.svg" class="img-fluid" alt="Back"></a>
            <h1>Contests Details</h1>
        </div>
    </div>
    <!-- Top Back Panel end -->
    <!-- Contests Details start -->
    <section class="contests-detail common-padding position-relative coupon-reward-details min-vh-100 xs-padding">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="row">
                        <div class="col-lg-6 mb-4 mb-lg-0">
                            <!-- Coupon Reward Image Start -->
                            <div class="coupon-reward-img sm-margin">
                                <img src="@contestData.Image" class="img-fluid" alt="Contests">
                            </div>
                            <!-- Coupon Reward Image end -->
                        </div>
                        <!-- col end -->
                        <div class="col-lg-6">
                            <h2 class="mb-3 mb-md-4">@contestData.ContestName</h2>

                            <div class="coupon-expiry-date pb-0">
                                <h5 class="pb-md-2">Location & Address:</h5>
                                <h4 class="mb-3 d-flex align-items-center">
                                    <img src="images/location-icon.svg" class="img-fluid me-2" alt="Location">
                                    <a href="https://maps.google.com/?q=@contestData.Latitude,@contestData.Longitude"><p>@contestData.Location</p></a>
                                </h4>

                                <h5 class="pb-md-2">Contest Type</h5>
                                <h4>@contestData.ContestType</h4>
                            </div>
                        </div>
                        <!-- col end -->
                    </div>
                    <!-- row end -->
                    <!-- Description start -->
                    <div class="coupon-description review-top-border pt-4">
                        <h2 class="mt-md-3">Description</h2>
                        <ul>
                            <li>@contestData.Description</li>

                        </ul>

                    </div>
                    <!-- Description end -->
                    <div class="coupon-reward-btn-section" @onclick="AddContest">
                        <a class="btn btn-common">
                            Attend Contest
                        </a>
                    </div>
                </div>
                <!-- col -->
            </div>
            <!-- row -->
        </div>

    </section>
    <!-- Contests Details end -->
}

@code {
    [Parameter]
    public string Id { get; set; }
    bool Loader = false;
    string userID;


    ContestData contestData = new ContestData();
    ContestAddForUser contestForUser = new ContestAddForUser();

    protected override async Task OnInitializedAsync()
    {
        Loader = true;
        var token = await localStorage.GetItemAsync<string>("token");

        await localStorage.GetItemAsync<string>("token");
        userID = await localStorage.GetItemAsync<string>("userId");

        Id = GenericHelper.Decipher(Id, 3);
        await ContestGetById();
        Loader = false;
        StateHasChanged();
    }

    internal async Task ContestGetById()
    {
        Loader = true;
        var result = await ContestHelpers.ContestbyID(new BaseIdRequest { Id = new(Id) });
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                contestData = JsonConvert.DeserializeObject<ContestData>(result.data);
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{Loc["error_something_went_wrong"]}");
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task AddContest()
    {
        Loader = true;
        contestForUser.UserId = Guid.Parse(userID);
        contestForUser.ContestId = Guid.Parse(Id);

        var result = await ContestHelpers.ContestAddForUser(contestForUser);

        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Contest Added Successfully");
            NavManager.NavigateTo("/contest");
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            Loader = false;
            if (result.meta.message[0].Contains("error_account_not_found"))
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Bad request, try again!");
                NavManager.NavigateTo("/contest");
            }
            else if (result.meta.message[0].Contains("error_otp_expired"))
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Token is expired");
                NavManager.NavigateTo("/contest");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
        Loader = false;
    }
}
