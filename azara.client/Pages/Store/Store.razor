@page "/store"
@using System.Text.Json.Nodes

@layout MainLayout

<PageTitle>@ClientTitleModel.StoreTitle</PageTitle>

<!--******************* Header Section Start *********************-->
<header class="position-relative sm-margin">
    <div class="container">
        <div class="d-flex align-items-center justify-content-between">
            <div class="top-bar-header d-flex align-items-center justify-content-start">
                <a href="#" class="bars custom-toggle-bar" @onclick="CustomToggleBar" data-bs-toggle="modal" data-bs-target="#side-navigation-menu">
                    <span></span>
                    <span></span>
                    <span></span>
                </a>
                <h1>My Store</h1>
            </div>
            <a href="notification" class="account-label">
                <img src="images/notification-icon.svg" class="img-fluid notification" alt="Notification">
            </a>
        </div>
    </div>
</header>

<!--******************* Header Section End *********************-->
@if (Loader == true)
{
       <!-- Preloader Start -->
  <div id="preloader">
    <div class="main-container">
      <!-- Circle animation img start -->
      <img src="./images/Azara_Pattern_Animation.svg" class="loader-circle img-fluid">
      <!-- Circle animation img end -->
  
      <!-- Azara logo start -->
      <div class="center-logo">
        <img src="images/azara-logo.svg" class="img-fluid logo" alt="Azara Logo">
      </div>
      <!-- Azara logo end -->
    </div>
  </div>
  <!-- Preloader End -->
}
else
{
    <main class="custom-main-section">
        <!--******************* Banner Section Start *********************-->
        <!-- Search Panel start-->
        <section class="search-panel position-relative sm-margin">
            <div class="container">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search" aria-label="Search" value=@listRequest.Name @onchange="SearchData" aria-describedby="search-input">
                    <span class="input-group-text" id="search-input"><img src="images/search.svg" class="img-fluid" alt="Search"></span>
                </div>
            </div>
        </section>
        <!-- Search Panel end-->
        <!--******************* Banner Section End *********************-->
        <!--******************* Middle Section Start ******************-->
        <!-- Stores start -->
        <section class="position-relative xl-margin ">
            <div class="container">
                @if (storeGetResponse.Details != null && storeGetResponse.Details.Count != 0)
                {
                    @*<h2>Nearest Store</h2>*@
                    <div class="row store-row row-cols-1 row-cols-lg-2">
                        @foreach (var store in storeGetResponse.Details.Where(w => w.IsLocationFound))
                        {
                            <div class="col">
                                <a @onclick="e => GetByID(store.Id)" class="card store-card position-relative">
                                    <div class="card-img">
                                        <img src='@(!string.IsNullOrWhiteSpace(store.Image) ? store.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Store">
                                    </div>
                                    <div class="card-text">
                                        <h3>@store.Name</h3>
                                        <h5><img src="images/location-icon.svg" class="img-fluid" alt="Location">@store.Address</h5>
                                    </div>
                                </a>
                            </div>
                        }

                        @if (storeGetResponse.Details != null && storeGetResponse.Details.Count != 0)
                        {
                            @foreach (var store in storeGetResponse.Details.Where(w => !w.IsLocationFound))
                            {
                                <div class="col">
                                    <a @onclick="e => GetByID(store.Id)" class="card store-card position-relative">
                                        <div class="card-img">
                                            <img src='@(!string.IsNullOrWhiteSpace(store.Image) ? store.Image : "https://azaradocument.blob.core.windows.net/user/DefaultIMG.png")' class="img-fluid" alt="Store">
                                        </div>
                                        <div class="card-text">
                                            <h3>@store.Name</h3>
                                            <h5><img src="images/location-icon.svg" class="img-fluid" alt="Location">@store.Address</h5>
                                        </div>
                                    </a>
                                </div>
                            }
                        }

                    </div>
                }
                else
                {
                    <div class="row featured-product-row row-cols-1 row-cols-md-2 row-cols-lg-3 gx-md-3 gx-4 justify-content-md-center">
                        <section class=" py-5 position-relative d-flex align-items-center justify-content-center">
                            <div class="no-data-found text-center">
                                <img src="images/no-data-found.svg" class="img-fluid" alt="No Data Found">
                                <h2>Oppps...</h2>
                                <h4>Store Not Found please try again</h4>
                            </div>
                        </section>
                    </div>
                }

                <!-- row -->
            </div>
        </section>
        <!-- Stores end -->
        <!--******************* Banner Section End *********************-->
        <!--******************* Middle Section Start ******************-->
        <!-- Stores start -->

    </main>
}



@code {
    StoreListResponse storelistResponse = new StoreListResponse();
    StoreGetResponse storeGetResponse = new StoreGetResponse();
    ListRequest listRequest = new ListRequest();
    bool Loader = true;
    string token;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loader = true;
            var token = await localStorage.GetItemAsync<string>("token");
            TokenResponse.Token = token;
            string[] url = NavManager.Uri.Split('/');

            var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
            if (location != null)
            {
                await localStorage.SetItemAsync("locationDetail", location.ToString());
                listRequest.LocationDetail = location.ToString();
            }
            await LoadData();
            if (url.Last() == "store")
            {
                await StartHubConnection();
            }
            await GetStore();
            await DeleteStore();
            await UpdateStore();
            await StatusUpdateStore();
            Loader = false;
            StateHasChanged();
        }
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;

        var result = await StoreHelpers.StoreListWithoutTokenApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.SetItemAsync("token", string.Empty);
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                storeGetResponse = JsonConvert.DeserializeObject<StoreGetResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal void GetByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/store-details/{cipheredId}");
        StateHasChanged();
    }

    private async void SearchData(ChangeEventArgs e)
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            listRequest.Name = e.Value.ToString().Trim();
            await LoadData();
        }
        else
        {
            listRequest.Name = string.Empty;
            await LoadData();
        }
        Loader = false;
        StateHasChanged();
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        if (hubConnection.ConnectionId != null)
            await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    internal async Task GetStore()
    {
        try
        {
            hubConnection.On<dynamic>("store_insert", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task UpdateStore()
    {
        try
        {
            hubConnection.On<dynamic>("store_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task StatusUpdateStore()
    {
        try
        {
            hubConnection.On<dynamic>("store_status_update", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    internal async Task DeleteStore()
    {
        try
        {
            hubConnection.On<dynamic>("store_delete", async (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    await LoadData();
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private void CustomToggleBar()
    {
        JsRuntime.InvokeVoidAsync("CustomToggleBar");
    }
}

