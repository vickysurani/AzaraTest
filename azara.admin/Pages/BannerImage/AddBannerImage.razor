@page "/bannerimage/insert"
@page "/bannerimage/update/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Banner.Request;
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Event.Request
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.BannerImage</PageTitle>


@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Banner Image : " : "Add Banner Image")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="bannerImageRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/banner" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    @for (int i = 1; i <= 3; i++)
                    {
                        @if (ImageNum > 2)
                            ImageNum = 0;

                        int count = ++ImageNum;
                        <label>Banner Image @count</label>
                        <div id="file-upload-form" class="uploader">
                            <InputFile id="file-upload" type="file" class="@count" name="fileUpload" accept="image/*" OnChange="@((InputFileChangeEventArgs args) => HandleImageUpload(args, count))" />
                            <ValidationMessage For="@(() => bannerImageRequest.bannerImage1)" />
                            <label for="file-upload" id="file-drag">
                                @if (!string.IsNullOrEmpty(bannerImageRequest.bannerImage1))
                                {
                                    <button type="button" class="file-close-btn" @onclick="(() => DeleteImage(count))">
                                        <i class="fa fa-times" aria-hidden="true"></i>
                                    </button>
                                }
                                else if (!string.IsNullOrEmpty(bannerImageRequest.bannerImage2))
                                {
                                    <button type="button" class="file-close-btn" @onclick="(() => DeleteImage(count))">
                                        <i class="fa fa-times" aria-hidden="true"></i>
                                    </button>
                                }
                                else if (!string.IsNullOrEmpty(bannerImageRequest.bannerImage3))
                                {
                                    <button type="button" class="file-close-btn" @onclick="(() => DeleteImage(count))">
                                        <i class="fa fa-times" aria-hidden="true"></i>
                                    </button>
                                }

                                @if (count == 1)
                                {
                                    <img id="file-image" src="@bannerImageRequest.bannerImage1" alt="" class="@((string.IsNullOrEmpty(bannerImageRequest.bannerImage1)? "hidden" : ""))" @bind-Value="bannerImageRequest.bannerImage1" @bind-Value:event="OnInput">
                                }
                                else if (count == 2)
                                {
                                    <img id="file-image" src="@bannerImageRequest.bannerImage2" alt="" class="@((string.IsNullOrEmpty(bannerImageRequest.bannerImage2)? "hidden" : ""))" @bind-Value="bannerImageRequest.bannerImage2" @bind-Value:event="OnInput">
                                }
                                else
                                {
                                    <img id="file-image" src="@bannerImageRequest.bannerImage3" alt="" class="@((string.IsNullOrEmpty(bannerImageRequest.bannerImage3)? "hidden" : ""))" @bind-Value="bannerImageRequest.bannerImage3" @bind-Value:event="OnInput">
                                }
                                <div id="start">
                                    @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                    <i class="fa fa-upload" aria-hidden="true"></i>
                                    <div>Drag & Drop Here or </div>
                                    <div id="notimage" class="hidden">Please select an image</div>
                                    <a id="file-upload-btn" class="">CHoose a file</a>
                                    <p class="second-theme-color">max. 2GB</p>
                                </div>
                                <div id="response" class="hidden d-none">
                                    <div id="messages"></div>
                                    <progress class="progress" id="file-progress" value="0">
                                        <span>0</span>%
                                    </progress>
                                </div>
                            </label>
                        </div>
                    }
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }
    BannerImageRequest bannerImageRequest = new BannerImageRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    private DateTime MinDate { get; set; } = DateTime.UtcNow;

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    private int ImageNum { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            bannerImageRequest.Id = new(Id);
            Loader = false;
            var result = await EventHelpers.GetEventItem(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                bannerImageRequest = JsonConvert.DeserializeObject<EventInsertUpdateRequest>(result.data);
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New BAnnerImage";
            bannerImageRequest = new BannerImageRequest();
        }
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;


        bannerImageRequest.Id = !string.IsNullOrWhiteSpace(Id) ? new(Id) : null;
        var result = await BannerImageHelpers.BannerAddUpdateApi(bannerImageRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(bannerImageRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Added Successfully!");
                }
                NavManager.NavigateTo("/event");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("Event not found"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                    if (!string.IsNullOrWhiteSpace(bannerImageRequest.Id))
                        NavManager.NavigateTo("/event/insert");
                    else
                        NavManager.NavigateTo($"/event/update/{bannerImageRequest.Id}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e, int count)
    {
        try
        {
            //string count = await JsRuntime.InvokeAsync<string>("selectedInputFile");
            var images = bannerImageRequest.ImageList != null && bannerImageRequest.ImageList.Any() ? bannerImageRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Event, OldFileName = bannerImageRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    if (count.Equals(1))
                                        bannerImageRequest.bannerImage1 = response.Details[0].FilePath;
                                    else if (count.Equals(2))
                                        bannerImageRequest.bannerImage2 = response.Details[0].FilePath;
                                    else if (count.Equals(3))
                                        bannerImageRequest.bannerImage3 = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task HandleImage2Upload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = bannerImageRequest.ImageList != null && bannerImageRequest.ImageList.Any() ? bannerImageRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Event, OldFileName = bannerImageRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    bannerImageRequest.bannerImage2 = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task HandleImage3Upload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = bannerImageRequest.ImageList != null && bannerImageRequest.ImageList.Any() ? bannerImageRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Event, OldFileName = bannerImageRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    bannerImageRequest.bannerImage3 = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task DeleteImage(int imgNum)
    {
        if (imgNum == 1)
            bannerImageRequest.bannerImage1 = new CommonHelpers(FileUpload).DeleteImage(bannerImageRequest.bannerImage1);
        else if (imgNum == 2)
            bannerImageRequest.bannerImage2 = new CommonHelpers(FileUpload).DeleteImage(bannerImageRequest.bannerImage2);
        else
            bannerImageRequest.bannerImage3 = new CommonHelpers(FileUpload).DeleteImage(bannerImageRequest.bannerImage3);
    }

    private async Task DeleteImage2()
    {
        bannerImageRequest.bannerImage2 = new CommonHelpers(FileUpload).DeleteImage(bannerImageRequest.bannerImage2);
    }

    private async Task DeleteImage3()
    {
        bannerImageRequest.bannerImage3 = new CommonHelpers(FileUpload).DeleteImage(bannerImageRequest.bannerImage3);
    }
}
