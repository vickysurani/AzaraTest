@page "/PrivacyPolicy"

@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Blog.Response
@using azara.admin.Models.PrivacyPolicy.Request;
@using azara.admin.Models.PrivacyPolicy.Response;
@using azara.admin.Models.Shared
@using azara.admin.Helpers
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.BlogTitle</PageTitle>

<!--******************* Middle Section Start ******************-->
<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage PrivacyPolicy</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<h2 class="d-lg-none d-block mt-3">Manage Blog</h2>
<div class="data-table-area">
    <div class="filter-area align-item-center">

        <div class="justify-end flex-column flex-md-row ml-auto mr-0">

            <div class="add-btn">
                <a href="/privacypolicy/insert">Add PrivacyPolicy</a>
            </div>
        </div>
    </div>
    <div class="data-table">
        <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
            <thead>
                <tr>
                    <th scope="col">description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (listResponse.details != null)
                {
                    @if (listResponse.details.Count != 0)
                    {
                        int srNum = 1; 

                        @foreach (var data in listResponse.details)
                        {
                            <tr>
                                <td>@data.description</td>
                                <td>
                                    <div class="view-btn btn">
                                        <a @onclick='e => UpdateByID(data.id, "view")'><img src="images/eye-ic.png" alt="eye-ic" /></a>
                                    </div>
                                    <div class="view-btn edit-btn btn">
                                        <a @onclick='e => UpdateByID(data.id, "edit")'><img src="images/edit-ic.png" alt="edit-ic" /></a>
                                    </div>
                                    <div class="view-btn delete-btn btn">
                                        <a @onclick="(() => UpdateByID(data.id))" data-toggle="modal" data-target="#donate-modal">
                                            <img src="images/delete-ic.png" alt="delete-ic" />
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center text-danger" colspan=8><h4>No Data Found</h4></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
<!-- Modal Content-->
<div class="modal donate-modal" id="donate-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Blog</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="donate-blk del-img">
                    <img src="images/delete-ico.svg" alt="delete-ico" />
                    <h6>Are you sure you want to delete this @(DeletePrivacyPolicyItem) PrivacyPolicy?</h6>
                    <div class="d-flex justify-content-center">
                        <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                        <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Loader == true)
{
    <Loader></Loader>
}

@code {

    protected string DeletePrivacyPolicyId { get; set; }
    protected string DeletePrivacyPolicyItem { get; set; }
    PrivacyPolicyListResponse listResponse = new PrivacyPolicyListResponse();
    BlogListData blogListData = new BlogListData();
    PrivacyPolicyListRequest listRequest = new PrivacyPolicyListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();
    int PageSize = 10;
    bool Loader = true, IsDeleted = false, IsShowTable = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/blog/view/{cipheredId}");
            if (value.Equals("edit"))
                NavManager.NavigateTo($"/blog/update/{cipheredId}");
        }
        else
        {
            DeletePrivacyPolicyId = id;
        }

        StateHasChanged();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
       
        var result = await CommonHelpers.PrivacyPolicyList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            listResponse = JsonConvert.DeserializeObject<PrivacyPolicyListResponse>(result.data);
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                listResponse = JsonConvert.DeserializeObject<PrivacyPolicyListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }


    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeletePrivacyPolicyId) && value)
        {
            try
            {
                var result = await CommonHelpers.DeletePrivacyPolicy(new BaseIdRequest { Id = new(DeletePrivacyPolicyId) });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted Blog!");
                    NavManager.NavigateTo("/PrivacyPolicy", true);
                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    if (result.meta.message[0].Contains("Blog not found"))
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Blog not found");
                        NavManager.NavigateTo("/PrivacyPolicy");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                        return;
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

  

  

  
}
