@page "/privacypolicy/insert"
@page "/privacypolicy/update/{Id}"

@using System.Net.Http.Headers;
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Const
@using azara.admin.Models.Blog
@using azara.admin.Helpers
@using azara.admin.Models.Blog.Request
@using azara.admin.Models.PrivacyPolicy.Request;


<PageTitle>@AdminTitleModel.BlogTitle</PageTitle>


<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title justify-content-center align-item-center">
            <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Privacypolicy : " : "Add Privacypolicy")</h2>
            @if (!string.IsNullOrWhiteSpace(Id))
            {
                <h4 class="ms-1">@Title</h4>
            }
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<div class="data-table-area">
    <EditForm class="form-details m-t-15" Model="privacyPolicyInsertUpdateRequest" OnValidSubmit="AddUpdateData">
        <div class="filter-area justify-end align-item-center">
            <div class="add-btn">
                <a href="/blog" class="cancel-btn">Cancel</a>
                <input type="submit" value="Submit" />
            </div>
        </div>
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Description</label>
                    <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter event decription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            @privacyPolicyInsertUpdateRequest.Description
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; }
    public string Title { get; set; }
    PrivacyPolicyInsertUpdateRequest privacyPolicyInsertUpdateRequest = new PrivacyPolicyInsertUpdateRequest();
    BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    private DateTime MinDate { get; set; } = DateTime.UtcNow;
    [Inject]
    public HttpClient HttpClient { get; set; }
    public string ImgUrl { get; set; }

    public bool IsUpdate = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            TokenResponse.Token = token;
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                if (privacyPolicyInsertUpdateRequest != null)
                {
                    bool loading = true;
                    while (loading)
                    {
                        try
                        {
                            await this.QuillHtml.LoadHTMLContent(privacyPolicyInsertUpdateRequest.Description);
                            loading = false;
                        }
                        catch
                        {
                            await Task.Delay(10);
                            loading = true;
                        }
                    }
                }
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            privacyPolicyInsertUpdateRequest.Id = Id;
            Loader = false;
            var result = await BlogHelpers.BlogGetById(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                privacyPolicyInsertUpdateRequest = JsonConvert.DeserializeObject<PrivacyPolicyInsertUpdateRequest>(result.data);
                if (privacyPolicyInsertUpdateRequest != null)
                {
                    //Title = privacyPolicyInsertUpdateRequest.Title;
                    //MinDate = blogInsertUpdateRequest.PublishedDate >= DateTime.UtcNow ? DateTime.UtcNow : blogInsertUpdateRequest.PublishedDate;
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Blog not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New PrivacyPolicy";
            privacyPolicyInsertUpdateRequest = new PrivacyPolicyInsertUpdateRequest();
        }
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        privacyPolicyInsertUpdateRequest.Id = Id;
        privacyPolicyInsertUpdateRequest.Description = await QuillHtml.GetHTML();
        var result = await CommonHelpers.PrivacyPolicyAddUpdateApi(privacyPolicyInsertUpdateRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(privacyPolicyInsertUpdateRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "PrivacyPolicy Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "PrivacyPolicy Insert Successfully!");
                }
                NavManager.NavigateTo("/privacypolicy");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

}
