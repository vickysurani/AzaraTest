@page "/aboutus/insert"
@page "/aboutus/update/{Id}"
@using azara.admin.Models.AboutUs;
@using azara.admin.Helpers.Generic

<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title justify-content-center align-item-center">
            <h2 class="d-lg-block d-none"></h2>

            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<div class="data-table-area">
    <EditForm class="form-details m-t-15" Model="aboutUsGetByIDResponse" OnValidSubmit="AddUpdateData">
        <div class="filter-area justify-end align-item-center">
            <div class="add-btn">
                <a href="/aboutus" class="cancel-btn">Cancel</a>
                <input type="submit" value="Submit" />
            </div>
        </div>
        <DataAnnotationsValidator />
        <div class="row">

            <div class="col-md-6">

                <div class="form-group">
                    <label>Description</label>
                    <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter event decription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            @aboutUsGetByIDResponse.Description
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
              
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>About Us Main Image</label>

                    <div id="file-upload-form" class="uploader">

                        <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" @bind-Value="aboutUsGetByIDResponse.Image" @bind-Value:event="OnInput" OnChange="HandleImageUpload" />
                        <ValidationMessage For="@(() => aboutUsGetByIDResponse.Image)" />
                        <label for="file-upload" id="file-drag">
                            @if (!string.IsNullOrWhiteSpace(aboutUsGetByIDResponse.Image))
                            {
                                <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            }


                            <img id="file-image" src="@aboutUsGetByIDResponse.Image" alt="" class="@((string.IsNullOrEmpty(aboutUsGetByIDResponse.Image)? "hidden" : ""))" @bind-Value="aboutUsGetByIDResponse.Image" @bind-Value:event="OnInput">
                            <div id="start">
                                @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                <i class="fa fa-upload" aria-hidden="true"></i>
                                <div>Drag & Drop Here or </div>
                                <div id="notimage" class="hidden">Please select an image</div>
                                <a id="file-upload-btn" class="">CHoose a file</a>
                                <p class="second-theme-color">max. 2GB</p>
                            </div>
                            <div id="response" class="hidden d-none">
                                <div id="messages"></div>
                                <progress class="progress" id="file-progress" value="0">
                                    <span>0</span>%
                                </progress>
                            </div>

                        </label>

                    </div>
                </div>
            </div>

        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; }

    AboutUsData aboutusdata = new AboutUsData();
    AboutUsDataResponse response = new AboutUsDataResponse();
    AboutUsGetByIDResponse aboutUsGetByIDResponse = new AboutUsGetByIDResponse();
    AboutUsUpdateRequest AboutUsRequest = new AboutUsUpdateRequest();

    BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    AboutUsGetRequest request = new AboutUsGetRequest();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            TokenResponse.Token = token;
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                if (response != null)
                {
                    bool loading = true;
                    while (loading)
                    {
                        try
                        {
                            await this.QuillHtml.LoadHTMLContent(aboutUsGetByIDResponse.Description);
                            loading = false;
                        }
                        catch
                        {
                            await Task.Delay(10);
                            loading = true;
                        }
                    }
                }
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            var result = await AboutUsHelpers.AboutUsGetById(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                aboutUsGetByIDResponse = JsonConvert.DeserializeObject<AboutUsGetByIDResponse>(result.data);

                int i = 1;
            }
            else
            {
                if (result.meta.statusCode == StatusCodeConsts.Success)
                {
                    aboutUsGetByIDResponse = JsonConvert.DeserializeObject<AboutUsGetByIDResponse>(result.data);

                }
                else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                {

                }
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            }
        }
        Loader = false;
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        aboutUsGetByIDResponse.Id = Id;
        aboutUsGetByIDResponse.Description = await QuillHtml.GetHTML();
        var result = await AboutUsHelpers.AboutUsInsertUpdate(aboutUsGetByIDResponse);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result.meta.statusCode == 200)
            {
                if (aboutUsGetByIDResponse.Id != null)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "About Us Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "About Us Insert Successfully!");
                }
                NavManager.NavigateTo("/aboutus");
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

    int imageCount = 12;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = aboutUsGetByIDResponse.ImageList != null && aboutUsGetByIDResponse.ImageList.Any() ? aboutUsGetByIDResponse.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Aboutus, OldFileName = aboutUsGetByIDResponse.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    aboutUsGetByIDResponse.Image = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }


    private async Task DeleteImage()
    {
        aboutUsGetByIDResponse.Image = new CommonHelpers(FileUpload).DeleteImage(aboutUsGetByIDResponse.Image);
    }

}
