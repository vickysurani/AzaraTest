@page "/aboutus"
@using azara.admin.Models.AboutUs;
@using azara.admin.Helpers.Generic


<PageTitle>@AdminTitleModel.AboutUsTitle</PageTitle>

<!--******************* Middle Section Start ******************-->
<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage About Us</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<h2 class="d-lg-none d-block mt-3">Manage About Us</h2>
<div class="data-table-area">
    <div class="filter-area align-item-center">

        @*<div class="head-topbar-search">
        <i class="fa fa-search" aria-hidden="true"></i>
        <input type="text" class="form-custom" placeholder="Search" />
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

        <div class="add-btn">
        <a class="text-white cursor-pointer m-0">Search</a>
        </div>
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

        <div class="add-btn">
        <a class="text-white cursor-pointer m-0">Clear</a>
        </div>
        </div>*@
       
        <div class="justify-end flex-column flex-md-row ml-auto mr-0">
            <div class="add-btn">
                <a href="/aboutus/insert">Add About Us</a>
            </div>
        </div>

    </div>

    <div class="data-table">
        <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
            <thead>
                <tr>
                    <th scope="col">Sr No</th>
                    <th>Image</th>
                    <th>
                        Description
                        <i class="fa fa-sort"></i>
                    </th>

                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (response.Description != null)
                {
                            <tr>
                                <th scope="row">1</th>
                                <td>
                            @if (!string.IsNullOrWhiteSpace(response.Image))
                                    {
                                <img src="@response.Image" class="imageThumbnail" />
                                    }
                                    else
                                    {
                                        <p>No Image</p>
                                    }
                                </td>
                        <td>@response.Description.Substring(0,25)...</td>
                                <td>
                                    <div class="view-btn btn">
                                <a @onclick='e => UpdateByID(response.id.ToString(), "view")'><img src="images/eye-ic.png" alt="eye-ic" /></a>
                                    </div>
                                    <div class="view-btn edit-btn btn">
                                <a @onclick='e => UpdateByID(response.id.ToString(), "edit")'><img src="images/edit-ic.png" alt="edit-ic" /></a>
                                    </div>
                                    <div class="view-btn delete-btn btn">
                                <a @onclick="(() => UpdateByID(response.id.ToString()))" data-toggle="modal" data-target="#donate-modal">
                                            <img src="images/delete-ic.png" alt="delete-ic" />
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        
                    
                }
                @*  srNum++;

                }
                }
                else
                {
                <tr>
                <td class="text-center text-danger" colspan=8><h4>No Data Found</h4></td>
                </tr>
                }
                }*@
            </tbody>
        </table>
    </div>

</div>
<!-- Modal Content-->
<div class="modal donate-modal" id="donate-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Team</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="donate-blk del-img">
                    <img src="images/delete-ico.svg" alt="delete-ico" />
                    <h6>Are you sure you want to delete this </h6>
                    <div class="d-flex justify-content-center">
                        <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                        <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    AboutUsData aboutusdata = new AboutUsData();
    AboutUsDataResponse response = new AboutUsDataResponse();
    AboutUsGetRequest request = new AboutUsGetRequest();
    bool Loader = true, IsDeleted = false, IsShowTable = false;
    protected string DeleteAboutUsId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        var result = await AboutUsHelpers.AboutUsList(request);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            response = JsonConvert.DeserializeObject<AboutUsDataResponse>(result.data);

            int i = 1;
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                response = JsonConvert.DeserializeObject<AboutUsDataResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }

    internal void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/aboutus/view/{cipheredId}");
            if (value.Equals("edit"))
                NavManager.NavigateTo($"/aboutus/update/{cipheredId}");
        }
        else
        {
            DeleteAboutUsId = id;
        }

        StateHasChanged();
    }

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteAboutUsId) && value)
        {
            try
            {
                var result = await AboutUsHelpers.DeleteAboutUsApi(new BaseIdRequest { Id = new(DeleteAboutUsId) });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted About us!");
                    NavManager.NavigateTo("/aboutus", true);
                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    if (result.meta.message[0].Contains("About us not found"))
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "About us not found");
                        NavManager.NavigateTo("/aboutus");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                        return;
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

}
