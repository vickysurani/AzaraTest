@page "/pos-user/view/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Inventory.Response;
@using azara.admin.Models.Product.Request
@using azara.admin.Models.User.Response;
@using azara.models.Responses.ProductCategory
@using azara.models.Responses.Store
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ProductTitle</PageTitle>
@*
//@if (Loader)
{
    <Loader></Loader>
}
else
{*@
<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title justify-content-center align-item-center">
            <h2 class="d-lg-block d-none">View Users : </h2><h4 class="ms-1">@Title</h4>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<div class="data-table-area">
    <div class="gray-bg">
        <div class="filter-area justify-end align-item-center">
            <div class="add-btn">
                <a href="/user-pos-list">Cancel</a>
            </div>
        </div>
        <form class="form-details m-t-15">
            <div class="row form-details-box">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>First Name</label>
                        <p>@ViewData.FirstName</p>
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <p>@ViewData.LastName</p>
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <p>@ViewData.EMail</p>
                    </div>
                    <div class="form-group">
                        <label>Phone</label>
                        <p>@ViewData.Phone</p>
                    </div>
                    <div class="form-group">
                        <label>Account Balance</label>
                        <p>@ViewData.AccountBalance</p>
                    </div>
                    <div class="form-group">
                        <label>Amount Past Due</label>
                        <p>@ViewData.AmountPastDue</p>
                    </div>
                </div>

            </div>
        </form>
    </div>
</div>
@*}*@

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    UserRootData ViewData = new UserRootData();
    PosByIdRequest request = new PosByIdRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/product/update/{cipheredId}");
        StateHasChanged();
    }



    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            request.Id = Id;
            Loader = false;
            var result = await UserHelpers.PosUserGetById(request);
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                ViewData = JsonConvert.DeserializeObject<UserRootData>(result.data);
                Title = ViewData.FirstName;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Create New Product";
            NavManager.NavigateTo("/PosInventory-pos-list");

        }
    }

}
