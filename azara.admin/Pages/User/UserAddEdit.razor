@page "/user/insert"
@page "/user/update/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.User.Request
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.UserTitle</PageTitle>
@*
//@if (Loader)
{
    <Loader></Loader>
}
else
{*@
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update User : " : "Add User")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="userInsertUpdateRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="user-list" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>First Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter first name" @bind-Value=userInsertUpdateRequest.FirstName aria-describedby="firstnamelabel" aria-label="First Name" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.FirstName)" />
                    </div>
                    <div class="form-group">
                        <label>Last Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter last name" @bind-Value=userInsertUpdateRequest.LastName aria-describedby="lastnamelabel" aria-label="Last Name" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.LastName)" />
                    </div>
                    <div class="form-group">
                        <label>EmailId</label>
                        <InputText class="form-control without-ic" placeholder="Enter email Id" @bind-Value=userInsertUpdateRequest.EmailId aria-describedby="emailidlabel" aria-label="Email Id" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.EmailId)" />
                    </div>
                    <div class="form-group">
                        <label>Mobile Number</label>
                        <InputText class="form-control without-ic" placeholder="Enter mobile number"
                               rows="12" @bind-Value=userInsertUpdateRequest.MobileNumber aria-describedby="mobilenumberlabel" aria-label="Mobile Number" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="10" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.MobileNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Birth Date</label>
                        <input type="date" class="form-control without-ic" placeholder="Birth Date" @bind-value=userInsertUpdateRequest.BirthDate  aria-describedby="birthdatelabel" aria-label="birth date" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.BirthDate)" />
                    </div>
                    <div class="form-group">
                        <label>Address</label>
                        <InputTextArea class="form-control without-ic" placeholder="Enter Address" @bind-Value=userInsertUpdateRequest.Address aria-describedby="addresslabel" aria-label="Address" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.Address)" />
                    </div>
                    <div class="form-group">
                        <label>State</label>
                        <InputText class="form-control without-ic" placeholder="Enter State" @bind-Value=userInsertUpdateRequest.State aria-describedby="statelabel" aria-label="State" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.State)" />
                    </div>
                    <div class="form-group">
                        <label>City</label>
                        <InputText class="form-control without-ic" placeholder="Enter City" @bind-Value=userInsertUpdateRequest.City aria-describedby="citylabel" aria-label="City" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.City)" />
                    </div>
                    <div class="form-group">
                        <label>Zip Code</label>
                        <InputNumber class="form-control without-ic" placeholder="Enter Zip Code" @bind-Value=userInsertUpdateRequest.ZipCode aria-describedby="zipcodelabel" aria-label="Zipcode" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.ZipCode)" />
                    </div>
                    @if (!string.IsNullOrWhiteSpace(Id))
                    {
                        <label>Points</label>
                        <InputNumber class="form-control without-ic" placeholder="Enter points" @bind-Value=userInsertUpdateRequest.Points aria-describedby="pointslabel" aria-label="Points" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.Points)" />
                    }
                    @if (string.IsNullOrWhiteSpace(Id))
                    {
                        <div class="form-group">
                            <label>Password</label>
                            <InputText type="@TextType" @bind-Value=userInsertUpdateRequest.Password class="form-control without-ic" placeholder="Enter Password" aria-describedby="passwordlabel" aria-label="Password"/>
                            <span @onclick="ShowPassword"><i class="@EyeIcon" id="eyeIcon" aria-hidden="true"></i></span>
                            <ValidationMessage For="@(() => userInsertUpdateRequest.Password)" />
                        </div>
                        <div class="form-group">
                            <label>Confirm Password</label>
                            <InputText type="@TextType" class="form-control without-ic" @bind-Value=userInsertUpdateRequest.ConfirmPassword placeholder="Enter Confirm Password" aria-describedby="confirmpasswordlabel" aria-label="Confirm Password"/>
                            <span @onclick="ShowPassword"><i class="@EyeIcon" id="eyeIcon" aria-hidden="true"></i></span>
                            <ValidationMessage For="@(() => userInsertUpdateRequest.ConfirmPassword)" />
                        </div>
                    }
                    else
                    {
                        <InputText type="hidden" @bind-Value="userInsertUpdateRequest.Password" />
                        <InputText type="hidden" @bind-Value="userInsertUpdateRequest.ConfirmPassword" />
                    }
                </div>
                <div class="col-md-6">
                    <label>User Image</label>
                    <div id="file-upload-form" class="uploader">
                        <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.Image)" />
                        <label for="file-upload" id="file-drag">
                            @if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Image))
                            {

                                <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            }
                            <img id="file-image" src="@userInsertUpdateRequest.Image" alt="" class="@((string.IsNullOrEmpty(userInsertUpdateRequest.Image)? "hidden" : ""))" @bind-Value="userInsertUpdateRequest.Image" @bind-Value:event="OnInput">
                            <div id="start">
                                @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                <i class="fa fa-upload" aria-hidden="true"></i>
                                <div>Drag & Drop Here or </div>
                                <div id="notimage" class="hidden">Please select an image</div>
                                <a id="file-upload-btn" class="">CHoose a file</a>
                                <p class="second-theme-color">max. 2GB</p>
                            </div>
                            <div id="response" class="hidden d-none">
                                <div id="messages"></div>
                                <progress class="progress" id="file-progress" value="0">
                                    <span>0</span>%
                                </progress>
                            </div>
                        </label>
                    </div>
                    @*<div class="form-group">
                <label>Status</label>
                <label class="switch">
                <InputCheckbox class="form-control without-ic" placeholder="Enter Status"
                rows="12" @bind-Value=eventInsertUpdateRequest.Active aria-describedby="productsubcategorystatuslabel" checked="@eventInsertUpdateRequest.Active" aria-label="Status" />
                <span class="slider round"></span>
                </label>
                </div>*@
                </div>
            </div>
        </EditForm>
    </div>
@*}*@


@code {

    [Parameter]
    public string Id { get; set; }

    UserInsertUpdateRequest userInsertUpdateRequest = new UserInsertUpdateRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();

    private DateTime? MinDate { get; set; } = DateTime.UtcNow;
    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    public string EyeIcon = "fa fa-eye-slash";
    protected string TextType = "password";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            userInsertUpdateRequest.Id = Id;
            Loader = false;
            var result = await UserHelpers.UserGetById(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                userInsertUpdateRequest = JsonConvert.DeserializeObject<UserInsertUpdateRequest>(result.data);
                if (userInsertUpdateRequest != null)
                {
                    MinDate = userInsertUpdateRequest.BirthDate;
                    Title = userInsertUpdateRequest.FirstName + " " + userInsertUpdateRequest.LastName;
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New User";
            userInsertUpdateRequest = new UserInsertUpdateRequest();
        }
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        userInsertUpdateRequest.Id = Id;
        var result = await UserHelpers.UserAddUpdateApi(userInsertUpdateRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "User Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "User Added Successfully!");
                }
                NavManager.NavigateTo("/user-list");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("User is already exists"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User is already exists");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");

            return;
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            string image = string.Empty;
            FileInfo fileInfo = new FileInfo(e.File.Name);
            if (fileInfo.Extension == ".jpg" ||
                fileInfo.Extension == ".png" ||
                fileInfo.Extension == ".jpeg")
            {
                decimal size = (e.File.Size / 2147483648);
                if (size > 2000m)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Image size must be less than 2 GB");
                    return;
                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Image))
                        FileUpload.DeleteFile(userInsertUpdateRequest.Image);

                    baseImageUpload.File = e.File;
                    baseImageUpload.FileName = !string.IsNullOrWhiteSpace(userInsertUpdateRequest.Image) ? userInsertUpdateRequest.Image.Replace(" ", "_").ToLower() : Guid.NewGuid().ToString();
                    image = await FileUpload.UploadFile(e.File);
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                return;
            }
            if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Image) || !string.IsNullOrWhiteSpace(image))
            {
                if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Image))
                {
                    userInsertUpdateRequest.Image = image;
                }
                else
                {
                    userInsertUpdateRequest.Image = image;
                }
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Image uploading failed");
                return;
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    protected void ShowPassword()
    {
        if (this.TextType.Equals("password"))
        {
            EyeIcon = "fa fa-eye";
            TextType = "text";
        }
        else
        {
            EyeIcon = "fa fa-eye-slash";
            TextType = "password";
        }
    }

    private async Task DeleteImage()
    {
        userInsertUpdateRequest.Image = new CommonHelpers(FileUpload).DeleteImage(userInsertUpdateRequest.Image);
    }
}