@page "/sub-admin/view/{Id}"

@using System.Text.RegularExpressions;
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Event.Request
@using azara.admin.Models.Const
@using azara.admin.Models.Sub_admin.Response;
@using azara.admin.Models.TeamManagement.Request;
@using azara.admin.Models.TeamManagement.Response;

<PageTitle>@AdminTitleModel.SubAdmin</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">View SubAdmin : </h2><h4 class="ms-1">@Title</h4>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div style="margin-top: 2%;">
        <div class="filter-area justify-end align-item-center">
            <div class="add-btn">
                @*<input type="submit" value="Submit Image" />*@
                <a href="/subadmin-list">Cancel</a>
            </div>
        </div>
    </div>
    <div class="custom-check-list-section">
        <div class="bg-white-wrap common-bg-white pb-0">
            <div class="row">
                <form class="form-details m-t-15">
                    <div class="row form-details-box">
                        <div class="col-12 col-md-6 col-lg-4">
                            <label>Name <b>@ViewResponse.Name</b>  </label>
                        </div>
                        <div class="col-12 col-md-6 col-lg-4">
                            <label>UserName <b>@ViewResponse.UserName</b> </label>
                        </div>
                        <div class="col-12 col-md-6 col-lg-4">
                            <label>Mobile <b>@ViewResponse.Mobile</b> </label>
                        </div>
                        <div class="col-12 col-md-6 col-lg-4">
                            <label>Email <b>@ViewResponse.EmailId</b></label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="common-bg-white px-3">
            <h2>Applied Permissions <small>(Preview Only)</small></h2>
            <ul class="check-listing-wrap m-0 p-0">
                @if (ViewResponse.MenuList != null)
                {
                    @foreach (var teamPermission in ViewResponse.MenuList)
                    {
                        @if (teamPermission.permissionCsv != null)
                        {
                            string[] permission = teamPermission.permissionCsv.Split(',');
                            string[] defaultPermission = teamPermission.permissionCsv.Split(',');

                            @if (teamPermission.isSelected == true)
                            {
                                <li class="d-flex">
                                    <div class="custom-border d-flex align-items-center justify-content-center mr-3">
                                        <div class="form-check">
                                            <input class="form-check-input" checked disabled type="checkbox" value="" id="defaultCheck0">
                                        </div>
                                    </div>
                                    <div class="custom-border d-flex align-items-center w-100">
                                        <h5>@teamPermission.name</h5>
                                        @for (int i = 0; i < @defaultPermission.Length; i++)
                                        {
                                            bool check = false;
                                            var Value = defaultPermission[i];
                                            @if (Regex.IsMatch(teamPermission.permissionCsv, $@"\b{Value}\b", RegexOptions.IgnoreCase))
                                            {
                                                check = true;
                                            }
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" checked=@check value="" disabled id="defaultCheck1">
                                                <label class="form-check-label" for="defaultCheck1">
                                                    @Value
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </li>
                            }
                        }
                    }

                }
            </ul>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    SubAdminRetrieveById ViewResponse { get; set; } = new SubAdminRetrieveById();
    //TeamGetByIdResponse teamGetByIdResponse = new TeamGetByIdResponse();
    //TeamDetailsGetByIdRequest teamDetailsGetByIdRequest = new TeamDetailsGetByIdRequest();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            ViewResponse.Id = Id;
            Loader = false;
            var result = await SubadminHelper.GetSubadminByID(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                ViewResponse = JsonConvert.DeserializeObject<SubAdminRetrieveById>(result.data);
                Title = ViewResponse.Name;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "SubAdmin not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
    }

    internal void UpdateByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/sub-admin/update/{cipheredId}");
        StateHasChanged();
    }


}

