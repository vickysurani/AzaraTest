@page "/Add-sub-admin"
@page "/sub-admin/update/{Id}"
@using System.Text.RegularExpressions;
@using azara.admin.Helpers.Generic;
@using azara.admin.Models.Sub_admin.Request;
@using azara.admin.Models.Sub_admin.Response;
@using azara.admin.Models.TeamManagement.Response;

<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title justify-content-center align-item-center">
            <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Sub-Admin : " : "Add Sub-Admin")</h2>
            @if (!string.IsNullOrWhiteSpace(Id))
            {
                <h4 class="ms-1">@Title</h4>
            }
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<div class="custom-check-list-section">
    @*<div class="bg-white-wrap common-bg-white pb-0">
    <div class="row">
    <div class="col-12 col-md-6 col-lg-4">
    <h6>Team</h6>
    <h5>Sub Admin</h5>
    </div>
    <div class="col-12 col-md-6 col-lg-4">
    <h6>Modified By</h6>
    <h5>Amisha</h5>
    </div>
    </div>
    </div>*@
    <div style="margin-top: 2%;">
        <div class="filter-area justify-end align-item-center">
            <div class="add-btn">
                @*<input type="submit" value="Submit Image" />*@
                <a href="/subadmin-list">Cancel</a>
            </div>
        </div>
    </div>
    <EditForm Model="subAdminPersistRequest" OnValidSubmit="AddSubAdmin">
        <DataAnnotationsValidator />
        <div class="custom-check-list-section">
            <div class="bg-white-wrap common-bg-white pb-0">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Team</h6>
                        <h5>Sub Admin</h5>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Modified By</h6>
                        <h5>Amisha</h5>
                    </div>
                </div>
            </div>
            <div class="bg-white-wrap common-bg-white pb-0">
                <div class="row">
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Name</h6>
                        <input type="text" class="form-control" placeholder="Your Name" @bind-value=subAdminPersistRequest.Name>
                        <ValidationMessage For="@(() => subAdminPersistRequest.Name)" />

                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Email Address</h6>
                        <input type="email" class="form-control" placeholder="Your Email Address" @bind-value=subAdminPersistRequest.EmailId>
                        <ValidationMessage For="@(() => subAdminPersistRequest.EmailId)" />

                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Contact Number</h6>
                        <InputText type="text" class="form-control without-ic" placeholder="Enter contact number"
                                   rows="12" @bind-Value=subAdminPersistRequest.Mobile aria-describedby="contactnumberlabel" aria-label="Contact Number" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="10" />
                        <ValidationMessage For="@(() => subAdminPersistRequest.Mobile)" />

                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>User Name</h6>
                        <input type="text" autocomplete="off" class="form-control" placeholder="Your User Name" @bind-value=subAdminPersistRequest.UserName>
                        <ValidationMessage For="@(() => subAdminPersistRequest.UserName)" />

                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <h6>Password</h6>
                        <input type="password" class="form-control" autocomplete="off" readonly onclick="this.removeAttribute('readonly');" placeholder="Your Password" @bind-value=subAdminPersistRequest.Password>
                        <ValidationMessage For="@(() => subAdminPersistRequest.Password)" />

                    </div>
                    <div class="col-12 col-md-6 col-lg-4">
                        <button class="btn btn-submit">Submit</button>
                        @*<button class="btn btn-close" @onclick="close">cancel</button>*@
                        @*<a class="btn btn-submit" href="/subadmin-list">Cancel</a>*@
                    </div>
                </div>
            </div>
            <div class="common-bg-white px-3">
                <h2>Applied Permissions <small>(Preview Only)</small></h2>
                <ul class="check-listing-wrap m-0 p-0">
                    @if (subAdminPersistRequest.MenuList != null)
                    {
                        int menuid = 1;
                        @foreach (var mainmenu in subAdminRetrieve.MenuList)
                        {
                            if (mainmenu.defaultPermissionCsv != null)
                            {
                                string[] permission = mainmenu.permissionCsv.Split(',');
                                string[] defaultPermission = mainmenu.defaultPermissionCsv.Split(',');
                            }
                            <li class="d-flex">
                                @if (mainmenu.permissionCsv != null)
                                {
                                    bool flagMainMenu = false;
                                    if (mainmenu.isSelected)
                                    {
                                        flagMainMenu = true;
                                        mainmenu.isSelected = true;
                                    }
                                    <div class="custom-border d-flex align-items-center justify-content-center mr-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" checked=@flagMainMenu name="@mainmenu.name" id="@mainmenu.name" @onclick="((x) => MainMenuChange(mainmenu, !mainmenu.isSelected))">
                                        </div>
                                    </div>
                                    <div class="custom-border d-flex align-items-center w-100">
                                        <h5>@mainmenu.name</h5>
                                        @if (mainmenu.defaultPermissionCsv != null)
                                        {
                                            string[] temp = mainmenu.defaultPermissionCsv.Split(",");
                                            @for (int i = 0; i < temp.Length; i++)
                                            {
                                                var Value = temp[i];
                                                bool Checked = false;
                                                if (mainmenu.permissionCsv != null && mainmenu.isSelected)
                                                {
                                                    if (Regex.IsMatch(mainmenu.permissionCsv, $@"\b{Value}\b", RegexOptions.IgnoreCase))
                                                    {
                                                        Checked = true;
                                                    }
                                                }
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" checked=@Checked id=@mainmenu.name-@Value @onchange="eventArgs => { CheckboxClicked(mainmenu, Value, eventArgs.Value);}">
                                                    <label class="form-check-label" for=@mainmenu.name-@Value>
                                                        @Regex.Replace(Value, "([A-Z])", " $1").Trim()
                                                    </label>
                                                </div>

                                            }

                                        }

                                    </div>
                                }

                                else
                                {
                                    <div class="custom-border d-flex align-items-center justify-content-center mr-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="@mainmenu.name" id="@mainmenu.name" @onclick="((x) => MainMenuChange(mainmenu, !mainmenu.isSelected))">
                                        </div>
                                    </div>
                                    <div class="custom-border d-flex align-items-center w-100">
                                        <h5>@mainmenu.name</h5>
                                        @if (mainmenu.defaultPermissionCsv != null)
                                        {
                                            string[] temp = mainmenu.defaultPermissionCsv.Split(",");
                                            @for (int i = 0; i < temp.Length; i++)
                                            {
                                                var Value = temp[i];
                                                bool Checked = false;

                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id=@mainmenu.name-@Value @onchange="eventArgs => { CheckboxClicked(mainmenu, Value, eventArgs.Value);}">
                                                    <label class="form-check-label" for=@mainmenu.name-@Value>
                                                        @Regex.Replace(Value, "([A-Z])", " $1").Trim()
                                                    </label>
                                                </div>
                                            }

                                        }

                                    </div>
                                }
                            </li>

                        }
                    }
                </ul>
            </div>
        </div>
    </EditForm>

</div>


@code
{
    [Parameter]
    public string Id
    {
        get; set;
    }

    SubAdminPersistRequest subAdminPersistRequest = new SubAdminPersistRequest();
    //TeamDetailsGetByIdRequest teamDetailsGetByIdRequest = new TeamDetailsGetByIdRequest();
    //TeamDropdownResponse teamDropdownResponse = new TeamDropdownResponse();
    //TeamListResponse teamList = new TeamListResponse();
    //TeamGetByIdResponse teamGetByIdResponse = new TeamGetByIdResponse();
    SubAdminRetrieveById subAdminRetrieve = new SubAdminRetrieveById();
    DefaultPermissions defaultPermissions = new DefaultPermissions();
    BaseIdResponse baseIdResponse = new BaseIdResponse();

    public string Permission = string.Empty, SubAdminId = string.Empty, token;
    public string Title { get; set; }
    private bool IsDisable = false, SubmitButton = false;
    private bool Loader { get; set; } = true;
    private string TeamId { get; set; }
    bool IsUpdate = false, IsVisible = false;
    int key = 3;

    protected override async Task OnInitializedAsync()
    {
        Loader = false;
        var token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        //await GetTeams();
        if (Id != null)
        {
            await LoadData();
        }
        Loader = true;
    }

    private async Task close()
    {
        NavManager.NavigateTo("/subadmin-list");
        StateHasChanged();
    }

    private async Task LoadData()
    {
        Loader = true;  
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            subAdminRetrieve.Id = new(Id);
            Loader = false;
            var result = await SubadminHelper.GetSubadminByID(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                subAdminRetrieve = JsonConvert.DeserializeObject<SubAdminRetrieveById>(result.data);
                if (subAdminPersistRequest != null)
                {
                    Title = subAdminRetrieve.Name;
                }
                await DefaultPermission();

                subAdminPersistRequest.EmailId = subAdminRetrieve.EmailId;
                subAdminPersistRequest.Mobile = subAdminRetrieve.Mobile;
                subAdminPersistRequest.Name = subAdminRetrieve.Name;
                subAdminPersistRequest.UserName = subAdminRetrieve.UserName;
                subAdminPersistRequest.MenuList = subAdminRetrieve.MenuList;
                subAdminPersistRequest.Password = subAdminRetrieve.Password;

                StateHasChanged();
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Subadmin not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New Subadmin";
            subAdminPersistRequest = new SubAdminPersistRequest();
        }
        StateHasChanged();
    }


    private async Task AddSubAdmin()
    {
        Loader = false;
        IsDisable = true;
        List<Models.TeamManagement.Response.Detail>
           mainmenu = subAdminPersistRequest.MenuList.FindAll(mainmenu => mainmenu.isSelected == true).ToList();
        if (mainmenu != null)
        {
            foreach (var menu in mainmenu)
            {
                if (menu.isChild == true)
                {
                    menu.menuList = menu.menuList.FindAll(menu => menu.isSelected == true).ToList();

                    bool IsSubmenu = menu.menuList.Any(menu => menu.isSelected == true);

                    if (IsSubmenu)
                    {
                        foreach (var submenu in menu.menuList)
                        {
                            if (submenu.isChild)
                                submenu.menuList = submenu.menuList.FindAll(submenu => submenu.isSelected == true).ToList();
                        }
                    }
                }
            }
        }

        if (mainmenu.Count == 0)
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"smothing went wrong");


        else
        {
            subAdminPersistRequest.PermissionJson = JsonConvert.SerializeObject(mainmenu);
            subAdminPersistRequest.MenuList = mainmenu;
            dynamic result = null;
            subAdminPersistRequest.Id = Id;
            result = await SubadminHelper.SubAdminAddUpdate(subAdminPersistRequest, TokenResponse.Token);
            if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            else
            {
                if (result.meta.statusCode == StatusCodeConsts.Success)
                {
                    baseIdResponse = JsonConvert.DeserializeObject<BaseIdResponse>(result.data);
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{result.meta.message}");
                    NavManager.NavigateTo($"/subadmin-list");
                }
                else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");

                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{result.meta.message}");


            }

            Loader = true;
            IsDisable = false;
            NavManager.NavigateTo($"/subadmin-list");
            StateHasChanged();
        }
    }

    internal async Task DefaultPermission()
    {

        var result = await TeamHelper.GetTeamsDefaultPermission(TokenResponse.Token);
        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", "");
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == 200)
            {
                defaultPermissions = JsonConvert.DeserializeObject<DefaultPermissions>(result.data);
                subAdminPersistRequest.MenuList = defaultPermissions.details;
                var menu = defaultPermissions.details;
            }

        }

        SubmitButton = false;
        StateHasChanged();
    }

    public void MainMenuChange(azara.admin.Models.TeamManagement.Response.Detail MainMenu, bool isSelected = false)
    {
        if (isSelected)
        {

            MainMenu.isSelected = isSelected;
            MainMenu.permissionCsv = MainMenu.defaultPermissionCsv;
            StateHasChanged();
        }
        else
        {
            MainMenu.isSelected = isSelected;
            MainMenu.permissionCsv = " ";
            StateHasChanged();
        }
    }

    public void CheckboxClicked(azara.admin.Models.TeamManagement.Response.Detail menu, string name, object aChecked)
    {
        List<string> PermissionArray = new List<string>();
        if (menu.permissionCsv == menu.defaultPermissionCsv && (bool)aChecked)
            menu.permissionCsv = null;
        if (menu.permissionCsv != null)
        {
            string[] PermissionString = menu.permissionCsv.Split(",");
            foreach (var item in PermissionString)
            {
                PermissionArray.Add(item);
            }
        }
        if ((bool)aChecked)
        {
            PermissionArray.Add(name);
        }
        else
        {
            if (PermissionArray.Contains(name))
            {
                PermissionArray.Remove(name);
                if (!PermissionArray.Any() || PermissionArray.First() == "")
                    menu.isSelected = false;
                else
                    menu.isSelected = true;
            }
        }
        menu.permissionCsv = String.Join(",", PermissionArray.Select(x => x.ToString()).ToArray());
        if (menu.permissionCsv == menu.defaultPermissionCsv || !string.IsNullOrWhiteSpace(menu.permissionCsv))
            menu.isSelected = true;
        StateHasChanged();
    }


    private async Task HandleInvalidSubmit()
    {
        await JsRuntime.InvokeVoidAsync("scrollToFirstError");
    }

}
