@page "/coupon"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Const
@using azara.admin.Models.Coupons.Response
@using azara.admin.Models.Shared

<PageTitle>@AdminTitleModel.CoupenTitle</PageTitle>

<!--******************* Middle Section Start ******************-->
<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage Coupons</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<h2 class="d-lg-none d-block mt-3">Manage Coupons</h2>
<div class="data-table-area">
    <div class="filter-area align-item-center">

        <div class="head-topbar-search">
            <i class="fa fa-search" aria-hidden="true"></i>
            <input type="text" class="form-custom" placeholder="Search" @bind-value="@listRequest.CouponTitle" />
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @onclick="SearchData">Search</a>
            </div>
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @onclick="Clear">Clear</a>
            </div>
        </div>
            @*<div class="justify-end flex-column flex-md-row ml-1">

            
            </div>*@

        <div class="justify-end flex-column flex-md-row ml-auto mr-0">
            <div class="add-btn">
                <a href="/addcoupons" class="text-white cursor-pointer m-0">Add Data Using CSV</a>
            </div>
            <div class="add-btn">
                <a href="/coupon/insert">Add Coupons</a>
            </div>
        </div>
    </div>
    <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>
    <div class="data-table">
        <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
            <thead>
                <tr>
                    <th scope="col">Sr No</th>
                    <th @onclick="@(() => SortBy("title"))">
                        Coupon Title
                        <i class="fa fa-sort"></i>
                    </th>
                    <th>Image</th>
                    <th>Amount</th>
                    <th>Point</th>
                    <th>Coupon Code</th>
                    <th>Coupon BarCode</th>
                    @if (!IsDeleted)
                    {
                        <th scope="col">Status</th>
                    }
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (couponsListResponse.Details != null && couponsListResponse.Details.Any())
                {
                    @foreach (var coupon in couponsListResponse.Details)
                    {
                        @if (@coupon.couponCode != null)
                        {
                            <tr>
                                <th scope="row">@coupon.SrNo</th>
                                <td>@coupon.couponTitle</td>
                                <td>
                                    @if (!string.IsNullOrWhiteSpace(@coupon.couponImage))
                                    {
                                        <img src="@coupon.couponImage" class="imageThumbnail" />
                                    }
                                    else
                                    {
                                        <p>No Image</p>
                                    }
                                </td>
                                <td>@coupon.amount</td>
                                <td>@coupon.couponspoint</td>
                                <td>@coupon.couponCode</td>
                                @if (coupon.couponCode == null)
                                {
                                    <td>No barcode Here</td>

                                }
                                else
                                {
                                <td>
                                    <SfBarcodeGenerator @ref="BarcodeInst" Value="@coupon.couponCode"
                                            Type="BarcodeType.Code128"
                                            Height="100px"
                                            Width="200px"
                                            ForeColor="Black">
                                        <BarcodeGeneratorDisplayText Text="@coupon.couponCode"></BarcodeGeneratorDisplayText>
                                    </SfBarcodeGenerator>
                                </td>
                                }
                                @if (!IsDeleted)
                                {
                                    <td class="access-req">
                                        <div class="switch-icon">
                                            <label class="switch">
                                                <input type="checkbox" id="tableActiveInactiveId" checked="@coupon.active" @onchange="((e) => StatusUpdate(coupon,(bool) e.Value))">
                                                <span class="slider round"></span>
                                            </label>
                                        </div>
                                    </td>
                                }
                                <td>
                                    <div class="view-btn btn">
                                        <a @onclick='e => UpdateByID(coupon.id, "view")'><img src="images/eye-ic.png" alt="eye-ic" /></a>
                                    </div>
                                    <div class="view-btn edit-btn btn">
                                        <a @onclick='e => UpdateByID(coupon.id, "edit")'><img src="images/edit-ic.png" alt="edit-ic" /></a>
                                    </div>
                                    <div class="view-btn delete-btn btn">
                                        <a @onclick="(() => UpdateByID(coupon.id))" data-toggle="modal" data-target="#donate-modal">
                                            <img src="images/delete-ic.png" alt="delete-ic" />
                                        </a>
                                    </div>
                                    @*<SfButton @onclick="OnExport">Export</SfButton>*@
                                </td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr>
                        <td class="text-center text-danger" colspan=8><h4>No Data Found</h4></td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
    </div>
    <p>
        @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
    </p>
</div>
<!-- Modal Content-->
<div class="modal donate-modal" id="donate-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Coupon</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="donate-blk del-img">
                    <img src="images/delete-ico.svg" alt="delete-ico" />
                    <h6>Are you sure you want to delete this @(DeleteCouponItem) coupon?</h6>
                    <div class="d-flex justify-content-center">
                        <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                        <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Loader == true)
{
    <Loader></Loader>
}

@code {

    SfBarcodeGenerator BarcodeInst;
    protected string DeleteCouponId { get; set; }
    protected string DeleteCouponItem { get; set; }
    CouponsData couponsData = new CouponsData();
    CouponsListResponse couponsListResponse = new CouponsListResponse();
    BaseStatusUpdateRequest statusUpdateRequest = new BaseStatusUpdateRequest();
    ListRequest listRequest = new ListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();
    int PageSize = 10;
    bool Loader = true, IsDeleted = false, IsShowTable = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/coupon/view/{cipheredId}");
            if (value.Equals("edit"))
                NavManager.NavigateTo($"/coupon/update/{cipheredId}");
        }
        else
        {
            DeleteCouponId = id;
        }

        StateHasChanged();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;
        IsDeleted = listRequest.IsDeleted;

        var result = await CouponsHelpers.CouponsListApi(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            couponsListResponse = JsonConvert.DeserializeObject<CouponsListResponse>(result.data);

            int i = 1;
            couponsListResponse.Details.ForEach(x =>
            {
                x.SrNo = (PageSize * couponsListResponse.Offset + i);
                i++;
            });
            if (couponsListResponse.Details.Count != 0)
            {
                pagingParameter.TotalCount = couponsListResponse.Total;
                pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                pagingParameter.PageNumber = couponsListResponse.Offset + 1;
                pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                pagingParameter.ShowFooter = true;
                pagingParameter.ShowPageNumber = true;
            }
            else
            {
                pagingParameter.ShowFooter = false;
                pagingParameter.ShowPageNumber = false;
                pagingParameter.TotalCount = 0;
            }
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                couponsListResponse = JsonConvert.DeserializeObject<CouponsListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }
    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteCouponId) && value)
        {
            try
            {
                var result = await CouponsHelpers.DeleteCouponsApi(new BaseIdRequest { Id = new(DeleteCouponId) });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted coupon!");
                    NavManager.NavigateTo("/coupon", true);

                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    if (result.meta.message[0].Contains("Coupon not found"))
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Coupon not found");
                        NavManager.NavigateTo("/coupon");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                        return;
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

    private async void SearchData()
    {
        Loader = true;
        listRequest.CouponTitle = (listRequest.CouponTitle ?? string.Empty).Trim();

        await LoadData();

        Loader = false;
        StateHasChanged();
    }

    public async void Clear()
    {
        listRequest.CouponTitle = string.Empty;
        listRequest = new ListRequest();
        await LoadData();

    }

    internal async Task StatusUpdate(CouponsData couponData, bool isApproved)
    {
        statusUpdateRequest.Id = new(couponData.id);
        statusUpdateRequest.Active = isApproved;

        var result = await CouponsHelpers.CouponsStatusUpdate(statusUpdateRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (isApproved)
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{couponData.couponTitle} is now active.");
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{couponData.couponTitle} is now inactive.");
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("Warning");
                await JsRuntime.InvokeVoidAsync("BaseActiveInactive", "tableActiveInactiveId-", couponData.active);
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
    }


    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(listRequest.SortBy))
        {
            string[] search = listRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                listRequest.SortBy = listRequest.SortBy.Contains("desc") ? listRequest.SortBy.Replace("desc", "asc") : listRequest.SortBy.Replace("asc", "desc");
            else
                listRequest.SortBy = $"{sortBy}_asc";
        }
        else
            listRequest.SortBy = $"{sortBy}_asc";

        await LoadData();
    }

    private void OnExport()
    {
        BarcodeInst.Export("Syncfusion-image", BarcodeExportType.JPG);
    }
}
