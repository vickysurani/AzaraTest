@page "/product"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Product.Request
@using azara.admin.Models.Product.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ProductTitle</PageTitle>
@*
//@if (Loader)
{
    <Loader></Loader>
}
else
{*@
    <!--******************* Middle Section Start ******************-->
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title">
                <h2 class="d-lg-block d-none">Manage Product</h2>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <h2 class="d-lg-none d-block mt-3">Manage Product</h2>
    <div class="data-table-area">
        <div class="filter-area align-item-center">

            <div class="head-topbar-search">
                <i class="fa fa-search" aria-hidden="true"></i>
                <input type="text" class="form-custom" placeholder="Search" @bind-value="@listRequest.Name" />
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="SearchData">Search</a>
                </div>
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="Clear">Clear</a>
                </div>
            </div>

            <div class="justify-end flex-column flex-md-row ml-auto mr-0">

                <div class="add-btn">
                    <a href="/product/insert">Add Product</a>
                </div>
            </div>
        </div>
        <div class="data-table">
            <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>

            <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
                <thead>
                    <tr>
                        <th scope="col">Sr No</th>
                        <th>Image</th>
                        <th @onclick="@(() => SortBy("name"))">
                            Name
                            <i class="fa fa-sort"></i>
                        </th>
                        <th @onclick="@(() => SortBy("price"))">
                            Price
                            <i class="fa fa-sort"></i>
                        </th>
                        <th @onclick="@(() => SortBy("discount"))">
                            Discounted Price
                            <i class="fa fa-sort"></i>
                        </th>
                        <th>OfferLabel %</th>
                        <th class="action">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (productListResponse.Details != null)
                    {
                        @if (productListResponse.Details.Count != 0)
                        {
                            @foreach (var product in productListResponse.Details)
                            {
                                <tr>
                                    <td>@product.SrNo</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(@product.image))
                                        {
                                            <img src="@product.image" class="imageThumbnail" />
                                        }
                                        else
                                        {
                                            <p>No Image</p>
                                        }
                                    </td>
                                    <td>@product.name</td>
                                    <td>@product.originalPrice</td>
                                    <td>@product.discountedPrice</td>
                                    <td>@product.offerName</td>
                                    <td>
                                        <div class="view-btn btn">
                                            <NavLink @onclick='e => UpdateByID(product.id, "view")' class="btn btn-info"><img src="images/eye-ic.png" alt="eye-ic" /></NavLink>
                                        </div>
                                        <div class="view-btn edit-btn btn">
                                            <NavLink @onclick='e => UpdateByID(product.id, "edit")' class="btn btn-primary"><img src="images/edit-ic.png" alt="edit-ic" /></NavLink>
                                        </div>
                                        <div class="view-btn delete-btn btn">
                                            <NavLink class="btn btn-danger" data-toggle="modal" data-target="#donate-modal" @onclick="(() => UpdateByID(product.id))"><img src="images/delete-ic.png" alt="delete-ic" /></NavLink>
                                        </div>
                                    </td>
                                </tr>

                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-center text-danger" colspan=7><h4>No Data Found</h4></td>
                            </tr>
                        }
                    }
                    </tbody>

            </table>
            <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
        </div>
        <p>
            @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
        </p>
    </div>
    <!-- Modal Content-->
    <div class="modal donate-modal" id="donate-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Product</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="donate-blk del-img">
                        <img src="images/delete-ico.svg" alt="delete-ico" />
                    <h6>Are you sure you want to delete this @(DeleteProductItem) Product?</h6>
                        <div class="d-flex justify-content-center">
                            <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                            <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
@*}*@

@code {

    protected string DeleteProductId { get; set; }
    protected string DeleteProductItem { get; set; }
    ProductListResponse productListResponse = new ProductListResponse();
    ListRequest listRequest = new ListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();

    int PageSize = 10;
    bool Loader = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }



    protected void GetProductList(IEnumerable<ProductListData> productLists)
    {
        productListResponse.Details = productLists.ToList();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;

        var result = await ProductHelpers.ProductList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                productListResponse = JsonConvert.DeserializeObject<ProductListResponse>(result.data);
                int i = 1;
                productListResponse.Details.ForEach(x =>
                {
                    x.SrNo = (PageSize * productListResponse.Offset + i);
                    i++;
                });
                if (productListResponse.Details.Count != 0)
                {
                    pagingParameter.TotalCount = productListResponse.Total;
                    pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                    pagingParameter.PageNumber = productListResponse.Offset + 1;
                    pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                    pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                    pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                    pagingParameter.ShowFooter = true;
                    pagingParameter.ShowPageNumber = true;
                }
                else
                {
                    pagingParameter.ShowFooter = false;
                    pagingParameter.ShowPageNumber = false;
                    pagingParameter.TotalCount = 0;
                }

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }

    private void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/product/view/{cipheredId}");
            if (value.Equals("edit"))
                NavManager.NavigateTo($"/product/update/{cipheredId}");
        }
        else
        {
            DeleteProductId = id;
        }

        StateHasChanged();
    }

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteProductId) && value)
        {
            try
            {
                var result = await ProductHelpers.DeleteProduct(new BaseIdRequest { Id = new(DeleteProductId) });
                await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted product!");
                    NavManager.NavigateTo("/product", true);
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async void SearchData()
    {
        Loader = true;
        listRequest.Name = (listRequest.Name ?? string.Empty).Trim();

        await LoadData();

        Loader = false;
        StateHasChanged();
    }

    public async void Clear()
    {
        listRequest.Name = string.Empty;
        listRequest = new ListRequest();
        await LoadData();

    }

    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(listRequest.SortBy))
        {
            string[] search = listRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                listRequest.SortBy = listRequest.SortBy.Contains("desc") ? listRequest.SortBy.Replace("desc", "asc") : listRequest.SortBy.Replace("asc", "desc");
            else
                listRequest.SortBy = $"{sortBy}_asc";
        }
        else
            listRequest.SortBy = $"{sortBy}_asc";

        await LoadData();
    }


}
