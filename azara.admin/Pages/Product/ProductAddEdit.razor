@page "/product/insert"
@page "/product/update/{Id}"

@using System.Text.Json.Nodes
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Product.Request
@using azara.admin.Models.ProductCategory.Response
@using azara.admin.Models.Rewards.Response;
@using azara.admin.Models.Store.Response
@using azara.files.implementations
@using azara.models.Responses.Dropdown
@using azara.models.Responses.Product
@using azara.models.Responses.ProductCategory
@using azara.models.Responses.ProductSubCategory
@using azara.models.Responses.Store
@using azara.admin.Models.Const
@inject IWebHostEnvironment Environment

<PageTitle>@AdminTitleModel.ProductTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Product : " : "Add Product")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="insertUpdateRequest" OnValidSubmit="InsertUpdateProductItem">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/product" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <InputText type="hidden" @bind-Value="insertUpdateRequest.ProductId" />
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Product Name</label>
                        <InputText type="text" class="form-control without-ic" placeholder="Enter product name" @bind-Value=insertUpdateRequest.Name aria-describedby="productnamelabel" aria-label="Product Name" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea type="text" class="form-control without-ic" placeholder="Enter product description"
                                   rows="12" @bind-Value=insertUpdateRequest.Description aria-describedby="productdescriptionlabel" aria-label="Product Description" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Description)" />

                    </div>
                    <div class="form-group">
                        <label>Price</label>
                        <InputText class="form-control without-ic" placeholder="Enter product price" @bind-Value=insertUpdateRequest.OriginalPrice aria-describedby="productpricelabel" aria-label="Product Price" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="100000000" />
                        <ValidationMessage For="@(() => insertUpdateRequest.OriginalPrice)" />
                    </div>
                    @*<div class="form-group">
                <label>Discount %</label>
                <InputText class="form-control without-ic" placeholder="Enter discount" @bind-Value=insertUpdateRequest.OfferLabel aria-describedby="productdiscountlabel" aria-label="Product Discount" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="2" />
                <ValidationMessage For="@(() => insertUpdateRequest.OfferLabel)" />
                </div>*@
                    <div class="form-group">
                        <div class="form-group select-filter">
                            <label>Offer Label</label>
                            <InputSelect id="OfferLabel" @bind-Value="OfferLabel" @oninput='SetOfferLabelData' class="form-control without-ic" data-jcf='{"wrapNative": false, "wrapNativeOnMobile": false, "fakeDropInBody": false, "useCustomScroll": false}'>
                                <optgroup>
                                    <option value="Select" selected disabled="disabled">(Choose Offer Lable)</option>
                                    @if (OfferLabelList == null && !OfferLabelList.Any())
                                    {
                                        <option>No Data Found</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in OfferLabelList)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    }
                                </optgroup>
                            </InputSelect>
                            <ValidationMessage For="@(() => insertUpdateRequest.OfferId)" />

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-group select-filter">
                            <label>Reward</label>
                            <InputSelect id="Reward" @bind-Value="Reward" @oninput='SetRewardData' class="form-control without-ic" data-jcf='{"wrapNative": false, "wrapNativeOnMobile": false, "fakeDropInBody": false, "useCustomScroll": false}'>
                                <optgroup>
                                    <option value="Select" selected disabled="disabled">(Choose Reward)</option>
                                    @if (RewardList == null)
                                    {
                                        <option>No Data Found</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in RewardList.details)
                                        {
                                            <option value="@item.id">@item.name</option>
                                        }
                                    }
                                </optgroup>
                            </InputSelect>
                            <ValidationMessage For="@(() => insertUpdateRequest.RewardsId)" />

                        </div>
                    </div>
                    @*<div class="form-group">
                        <div class="form-group select-filter">
                            <label>store</label>
                            <InputSelect id="store" @bind-Value="StoreName" @oninput='SetStoreData' class="form-control without-ic" data-jcf='{"wrapnative": false, "wrapnativeonmobile": false, "fakedropinbody": false, "usecustomscroll": false}'>
                                @if (StoreList == null && !StoreList.Any())
                                {
                                    <option>no data</option>
                                }
                                else
                                {
                                    <optgroup>
                                        <option value="select" selected='@(string.IsNullOrWhiteSpace(StoreName))' disabled><b>(choose nearest store)</b></option>
                                        @foreach (var store in StoreList.Where(w => w.IsLocationFound))
                                        {
                                            <option value="@store.Id" selected='@(insertUpdateRequest.StoreId != null && store.Id.ToLower().Equals(insertUpdateRequest.StoreId.ToString().ToLower()))'>@store.Name</option>

                                        }
                                    </optgroup>
                                    <optgroup>
                                        <option value="select" selected='@(string.IsNullOrWhiteSpace(StoreName))' disabled><b>(choose other store)</b></option>
                                        @foreach (var store in StoreList.Where(w => !w.IsLocationFound))
                                        {
                                            <option value="@store.Id" selected='@(insertUpdateRequest.StoreId != null && store.Id.ToLower().Equals(insertUpdateRequest.StoreId.ToString().ToLower()))'>@store.Name</option>
                                        }
                                    </optgroup>
                                }
                            </InputSelect>
                        </div>
                    </div>*@
                    <div class="dropdown">
                        <label>Store</label>
                        <button class="btn btn-secondary dropdown-toggle" type="button"
                            id="sampleDropdownMenu" data-toggle="dropdown">
                            Select Store
                        </button>
                        <div class="form-group position-static m-0">
                            <ul class="dropdown-menu checkbox-menu allow-focus">
                                <li>
                                    <label>
                                        Choose Nearest Store
                                    </label>
                                </li>
                                @foreach (var store in StoreList.Where(w => w.IsLocationFound))
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" id="checkId" checked='@insertUpdateRequest.StoreDropdownId' @onchange="(() => SetStoreData(store.Id))" /> @store.Name
                                        </label>
                                    </li>
                                }
                                <li>
                                    <label>
                                        Choose Other Store
                                    </label>
                                </li>
                                @foreach (var store in StoreList.Where(w => !w.IsLocationFound))
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" id="checkId" checked='@insertUpdateRequest.StoreDropdownId' @onchange="(() => SetStoreData(store.Id))" /> @store.Name
                                        </label>
                                    </li>
                                }
                            </ul>
                            <ValidationMessage For="@(() => insertUpdateRequest.StoreDropdownId)" />
                        </div>
                    </div>
                    <div class="form-group store-form-group">
                        @foreach (var store in SelectedStoreIds)
                        {
                            <div class="col-md-3 my-2 position-relative">
                                <div class="border" id="checkId">
                                    <span>
                                        @(StoreList.FirstOrDefault(f => f.Id.Equals(store))?.Name)
                                    </span>
                                </div>
                                <button type="button" class="delete-Storea file-close-btn" @onclick="(() => DeleteStoreData(store))">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <div class="form-group select-filter">
                            <label>Product Category</label>
                            <InputSelect id="ProductCategory" @bind-Value="ProductCategoryName" @oninput='SetProductCategoryData' class="form-control without-ic" data-jcf='{"wrapNative": false, "wrapNativeOnMobile": false, "fakeDropInBody": false, "useCustomScroll": false}'>
                                <optgroup>
                                    <option value="Select" selected disabled="disabled">(Choose Product Category)</option>
                                    @if (ProductCategoryList == null && !ProductCategoryList.Any())
                                    {
                                        <option>No Data Found</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in ProductCategoryList)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    }
                                </optgroup>
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Product Image</label>
                    @* @if (count <= 11)
                {
                <div id="file-upload-form">
                <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" multiple />
                <label for="file-upload" id="file-drag">
                <div id="start">
                <a id="file-upload-btn" class="btn">CHoose a file</a> (Please select an image upto max. 2GB)
                </div>
                <div class="row gx-15">
                @if (insertUpdateRequest.ImageList != null && insertUpdateRequest.ImageList.Count > 0)
                {
                int serial = 1;
                foreach (var image in insertUpdateRequest.ImageList)
                {
                <div class="col-12 col-md-6 col-xl-4 my-2">
                <div class="room-image" style="background: url('@image') 50% 50%; ">
                <span class="room-image-title">@serial</span>
                </div>
                <button type="button" class="file-close-btn" @onclick="(() => DeleteImage(image))">
                <i class="fa fa-times" aria-hidden="true"></i>
                </button>
                </div>
                serial++;
                }
                }
                </div>
                </label>
                </div>
                }
                else
                {*@
                    <div id="file-upload-form">
                        <label for="file-upload" id="file-drag">
                            <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandlePhotoSelected" multiple />
                            <div id="start">
                                <a id="file-upload-btn" class="btn">CHoose a file</a> (Please select an image upto max. 2GB)
                            </div>
                            <div class="row gx-15">
                                @if (insertUpdateRequest.ImageList != null && insertUpdateRequest.ImageList.Count > 0)
                                {
                                    int serial = 1;
                                    foreach (var image in insertUpdateRequest.ImageList)
                                    {
                                        <div class="col-12 col-md-6 col-xl-4 my-2">
                                            <div class="room-image" style="background: url('@image') 50% 50%; ">
                                                <span class="room-image-title">@serial</span>
                                            </div>
                                            <button type="button" class="file-close-btn" @onclick="(() => DeleteImage(image))">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </button>
                                        </div>
                                        serial++;
                                    }
                                }
                            </div>
                        </label>
                    </div>


                    <div class="form-group" id="ProductSubCategory">
                        <label>Product Sub Category</label>
                        <InputSelect @bind-Value="ProductSubCategoryName" @oninput='SetProductSubCategoryData' class="form-control without-ic" data-jcf='{"wrapNative": false, "wrapNativeOnMobile": false, "fakeDropInBody": false, "useCustomScroll": false}'>
                            <option value="Select" selected disabled="disabled">(Choose Sub Product Category)</option>
                            @if (ProductSubCategoryList == null && !ProductSubCategoryList.Any())
                            {
                                <option>No Data Found</option>
                            }
                            else
                            {
                                @foreach (var item in ProductSubCategoryList)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
        </EditForm>





    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    private string StoreName { get; set; }
    private string ProductCategoryName { get; set; }
    private string ProductSubCategoryName { get; set; }
    private string OfferLabel { get; set; }
    private string Reward { get; set; }
    List<string> SelectedStoreIds { get; set; } = new();


    ProductInsertUpdateRequest insertUpdateRequest { get; set; } = new();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    List<StoreDropDownResponse> StoreList { get; set; } = new();
    List<ApiBaseDropdownResponse> ProductCategoryList { get; set; } = new();
    List<ApiBaseDropdownResponse> ProductSubCategoryList { get; set; } = new();
    List<ApiBaseDropdownResponse> OfferLabelList { get; set; } = new();
    //ApiBaseDropdownResponse RewardList { get; set; } = new();
    RewardDropdownResponse RewardList = new RewardDropdownResponse();
    ListRequest listRequest = new ListRequest();
    LocationDetailRequest LocationDetailRequest = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
                if (location != null)
                {
                    await localStorage.SetItemAsync("locationDetail", location.ToString());
                    listRequest.LocationDetail = location.ToString();
                }
                await LoadData();
                await LoadRewarddropdowndata();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
            if (string.IsNullOrWhiteSpace(ProductSubCategoryName))
                await JsRuntime.InvokeVoidAsync("SetProductSubCategoryElemement", false);
        }
    }

    private async Task LoadRewarddropdowndata()
    {
        var result = await ProductHelpers.GetRewardDropdown();
        RewardList = JsonConvert.DeserializeObject<RewardDropdownResponse>(result.data);

    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(listRequest.LocationDetail))
        {
            var dropDownList = await ProductHelpers.GetStoreProductCategory(new LocationDetailRequest { LocationDetail = listRequest.LocationDetail });

            if (dropDownList.meta.statusCode == StatusCodeConsts.Success)
            {
                var dropDownData = JsonConvert.DeserializeObject<StoreProductCategoryResponse>(dropDownList.data);
                StoreList = dropDownData.StoreList;
                ProductCategoryList = dropDownData.ProductCategoryList;
                OfferLabelList = dropDownData.OfferLabelList;
            }
        }

        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            insertUpdateRequest.ProductId = Id;
            Loader = false;
            var result = await ProductHelpers.GetProductItem(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                insertUpdateRequest = JsonConvert.DeserializeObject<ProductInsertUpdateRequest>(result.data);
                if (insertUpdateRequest != null)
                {
                    insertUpdateRequest.ImageList = JsonConvert.DeserializeObject<List<string>>(insertUpdateRequest.Image);
                    var storeData = await StoreHelpers.StoreGetById(new BaseIdRequest { Id = Guid.Parse(insertUpdateRequest.StoreId) });
                    if (storeData.meta.statusCode == StatusCodeConsts.Success)
                    {
                        var storeDetails = JsonConvert.DeserializeObject<StoreGetByIdResponse>(storeData.data);
                        StoreName = insertUpdateRequest.StoreId.ToString().ToUpper();
                    }
                    PosByIdRequest posByIdRequest = new PosByIdRequest();
                    var productCategoryData = await ProductCategoryHelpers.ProductCategoryGetById(posByIdRequest);
                    if (productCategoryData.meta.statusCode == StatusCodeConsts.Success)
                    {
                        var productCategoryDetails = JsonConvert.DeserializeObject<ProductCategoryGetByIdResponse>(productCategoryData.data);
                        ProductCategoryName = insertUpdateRequest.ProductCategoryId.ToString().ToUpper();
                        if (productCategoryDetails != null)
                        {
                            ProductCategoryName = insertUpdateRequest.ProductCategoryId.ToString().ToUpper();
                            await GetProductSubCategoryList(insertUpdateRequest.ProductCategoryId.Value);
                        }
                        OfferLabel = insertUpdateRequest.OfferId.ToString().ToUpper();
                    }
                }
                Title = insertUpdateRequest.Name;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Product not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Create New Product";
            insertUpdateRequest = new ProductInsertUpdateRequest();
        }
    }

    internal async Task InsertUpdateProductItem()
    {
        Loader = true;
        if (SelectedStoreIds != null && SelectedStoreIds.Count > 0)
        {
            insertUpdateRequest.StoreDropdownId = JsonConvert.SerializeObject(SelectedStoreIds);
        }
        else
        {
            Loader = false;
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the store!");
            return;
        }
        insertUpdateRequest.Id = Id;
        var result = await ProductHelpers.ProductInsertUpdateApi(insertUpdateRequest);

        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully added new product item!");
            NavManager.NavigateTo("/product");
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            Loader = false;
            if (result.meta.message[0].Contains("error_account_not_found"))
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Bad request, try again!");
                NavManager.NavigateTo("/product/insert");
            }
            else if (result.meta.message[0].Contains("error_otp_expired"))
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                NavManager.NavigateTo("/product/insert");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
        Loader = false;
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = insertUpdateRequest.ImageList != null && insertUpdateRequest.ImageList.Any() ? insertUpdateRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Product, OldFileName = insertUpdateRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                }
                            }
                            insertUpdateRequest.ImageList = imageList;
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private void SetStoreData(ChangeEventArgs e)
    {
        insertUpdateRequest.StoreDropdownId = new(e.Value.ToString());
        StoreName = StoreList.FirstOrDefault(f => f.Id.Equals(insertUpdateRequest.StoreDropdownId))?.Name;
    }


    private async Task SetProductCategoryData(ChangeEventArgs e)
    {
        insertUpdateRequest.ProductCategoryId = new(e.Value.ToString());
        ProductCategoryName = ProductCategoryList.FirstOrDefault(f => f.Id.Equals(insertUpdateRequest.ProductCategoryId))?.Name;
        await GetProductSubCategoryList(insertUpdateRequest.ProductCategoryId.Value);
    } 

    private async Task GetProductSubCategoryList(Guid productCategoryId)
    {
        var productSubCategoryData = await ProductSubCategoryHelpers.GetProductSubCategoryListByProductCategoryId(new BaseIdRequest { Id = productCategoryId });
        if (productSubCategoryData.meta.statusCode == StatusCodeConsts.Success)
        {
            var productSubCategoryDetails = JsonConvert.DeserializeObject<ApiBaseDropdownDetailResponse>(productSubCategoryData.data);
            if (productSubCategoryDetails != null && productSubCategoryDetails.details != null && productSubCategoryDetails.details.Count != 0)
            {
                await JsRuntime.InvokeVoidAsync("SetProductSubCategoryElemement", true);
                ProductSubCategoryList = productSubCategoryDetails.details;
                if (insertUpdateRequest.ProductSubCategoryId.HasValue && ProductSubCategoryList.Any(a => a.Id.ToUpper().Equals(insertUpdateRequest.ProductSubCategoryId.Value.ToString().ToUpper())))
                {
                    ProductSubCategoryName = insertUpdateRequest.ProductSubCategoryId.ToString().ToUpper();
                }
                else
                {
                    ProductSubCategoryName = ProductSubCategoryList.FirstOrDefault(f => f.Id.Equals(insertUpdateRequest.ProductSubCategoryId))?.Name;
                    if (ProductSubCategoryList != null && ProductSubCategoryList.Any())
                        insertUpdateRequest.ProductSubCategoryId = new(ProductSubCategoryList.FirstOrDefault()?.Id);
                }
            }
            else
            {
                insertUpdateRequest.ProductSubCategoryId = null;
                await JsRuntime.InvokeVoidAsync("SetProductSubCategoryElemement", false);
            }
        }
    }

    private void SetProductSubCategoryData(ChangeEventArgs e)
    {
        insertUpdateRequest.ProductSubCategoryId = new(e.Value.ToString());
        ProductSubCategoryName = ProductSubCategoryList.FirstOrDefault(f => f.Id.Equals(insertUpdateRequest.ProductSubCategoryId))?.Name;
    }

    private void SetOfferLabelData(ChangeEventArgs e)
    {
        insertUpdateRequest.OfferId = new(e.Value.ToString());
        OfferLabel = OfferLabelList.FirstOrDefault(f => f.Id.Equals(insertUpdateRequest.OfferId))?.Name;

    }

    private void SetRewardData(ChangeEventArgs e)
    {
        insertUpdateRequest.RewardsId = new(e.Value.ToString());
        Reward = RewardList.details.FirstOrDefault(f => f.id.Equals(insertUpdateRequest.RewardsId))?.name;

    }

    private async Task DeleteImage(string image)
    {
        string a = new CommonHelpers(FileUpload).DeleteImage(image);
        insertUpdateRequest.ImageList.Remove(image);
        //count = count - 1;
    }

    public class Files
    {
        public string Name
        {
            get; set;
        }
    }

    public List<Files> files = new List<Files>();
    private int maxAllowedFiles = 12;
    static string path;
    static string fileName;
    private long maxFileSize = 1024 * 15;


    private async Task HandlePhotoSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(imageCount).ToList();
        List<string> imageList = new List<string>();
        if (files != null && files.Count > 0)
        {
            foreach (var item in files)
            {
                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Product, OldFileName = insertUpdateRequest.ImageList };

                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                if (result != null)
                {
                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                    if (response != null && response.Details != null && response.Details.Count > 0)
                    {
                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                    }
                }
            }
            insertUpdateRequest.ImageList = imageList;
            StateHasChanged();
        }

    }
    private void SetStoreData(string storeId)
    {
        if (SelectedStoreIds.Contains(storeId))
            SelectedStoreIds.Remove(storeId);
        else
            SelectedStoreIds.Add(storeId);
    }

    private async void DeleteStoreData(string storeId)
    {
        SelectedStoreIds.Remove(storeId);
        await JsRuntime.InvokeVoidAsync("uncheck");
        StateHasChanged();

    }
}
