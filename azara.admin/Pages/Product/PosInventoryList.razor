@page "/PosInventory-pos-list"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Inventory.Response;
@using azara.admin.Models.Shared
@using azara.admin.Models.User.Request
@using azara.admin.Models.User.Response
@using azara.models.Responses.User
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.POSInventoryTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <!--******************* Middle Section Start ******************-->
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title">
                <h2 class="d-lg-block d-none">Manage Inventory</h2>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <h2 class="d-lg-none d-block mt-3">Manage Inventory</h2>
    <div class="data-table-area">
        <div class="filter-area align-item-center">

            <div class="head-topbar-search">
                <i class="fa fa-search" aria-hidden="true"></i>
                <input type="text" class="form-custom" placeholder="Search" @bind-value="@posInventoryGetListRequest.SearchParam" />
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="SearchData">Search</a>
                </div>
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="Clear">Clear</a>
                </div>
            </div>
        </div>
        <div class="filter-area align-item-center">
        </div>
        <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>

        <div class="data-table">
            <table id="table-1" class="table product-custom-table store-cate-table store-cate-table" style="width:100%">
                <thead>
                    <tr>
                        <th>Sr No.</th>
                        <th>Image</th>
                        <th>Item Name</th>
                        <th>Description</th>
                        <th>Item Price</th>
                        <th>Category</th>
                        <th>Sub Category</th>
                        <th>QuantityOnHand</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                @if (posInventoryResponse.details != null)
                {
                    @if (posInventoryResponse.details.Count != 0)
                    {
                        @foreach (var data in posInventoryResponse.details)
                        {
                            <tbody>
                                <tr>
                                    <td>@data.SrNo</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(data.image))
                                        {
                                            <img src="@data.image" class="imageThumbnail" />
                                        }
                                        else
                                        {
                                            <p>No Image</p>
                                        }
                                    </td>
                                    <td>@data.Attribute</td>
                                    <td>@data.Description</td>
                                    <td>@data.Price1</td>
                                    <td>@data.DepartmentCode</td>
                                    <td>@data.Desc1</td>
                                    <td>@data.QuantityOnHand</td>

                                    <td class="access-req">
                                        <div class="switch-icon">
                                            <label class="switch">
                                                <input type="checkbox" id="tableActiveInactiveId-@data.SrNo" checked="@data.IsActive" @onchange="((e) => StatusUpdate(data,(bool) e.Value, data.SrNo))">
                                                <span class="slider round"></span>
                                            </label>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="view-btn btn">
                                            <NavLink @onclick='e => UpdateByID(data.ListId, "view")' class="btn btn-info"><img src="images/eye-ic.png" alt="eye-ic" /></NavLink>
                                        </div>
                                        <div class="view-btn edit-btn btn">
                                            <NavLink @onclick='e => UpdateByID(data.ListId, "edit")' class="btn btn-primary"><img src="images/edit-ic.png" alt="edit-ic" /></NavLink>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center text-danger" colspan=7><h4>No Data Found</h4></td>
                        </tr>
                    }
                }
            </table>
            <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
        </div>
        <p>
            @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
        </p>
    </div>
    <!-- Modal Content-->
    <div class="modal donate-modal" id="donate-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Team</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="donate-blk del-img">
                        <img src="images/delete-ico.svg" alt="delete-ico" />
                        <h6>Are you sure you want to delete this @(DeleteUser) store?</h6>
                        <div class="d-flex justify-content-center">
                            <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                            <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    UserListResponse userListResponse = new UserListResponse();
    UserGetListRequest listRequest = new UserGetListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();
    BaseStatusUpdateRequest statusUpdateRequest = new BaseStatusUpdateRequest();
    BaseStringStatusUpdateRequest baseStringStatusUpdateRequest = new BaseStringStatusUpdateRequest();
    PaginationRequest paginationRequest = new PaginationRequest();
    PosInventoryResponse posInventoryResponse = new PosInventoryResponse();
    UserPosListResponse userPosListResponse = new UserPosListResponse();
    PosInventoryGetListRequest posInventoryGetListRequest = new PosInventoryGetListRequest();


    protected string DeleteUserId { get; set; }
    protected string DeleteUser { get; set; }
    bool IsDeleted = false, IsShowTable = false;
    int PageSize = 10;
    private bool Loader { get; set; } = true;
    private bool IsOpenDropDown { get; set; } = false;
    public List<UserResponse> Users { get; set; } = new List<UserResponse>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token == null)
                NavManager.NavigateTo("/user-list");
            else
            {
                TokenResponse.Token = token;
                await LoadData();
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/pos-inventory/view/{cipheredId}");
            if (value.Equals("edit"))
                NavManager.NavigateTo($"/pos-inventory/edit/{cipheredId}");
        }
        else
        {
            DeleteUserId = id;
        }

        StateHasChanged();
    }

    internal async Task StatusUpdate(POSItemInventoryResponse data, bool isApproved, int srNum)
    {
        baseStringStatusUpdateRequest.Id = data.ListId;
        baseStringStatusUpdateRequest.Active = isApproved;

        var result = await ProductHelpers.InventoryStatusUpdate(baseStringStatusUpdateRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (isApproved)
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{data.Attribute} is now active.");
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{data.Attribute} is now inactive.");
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("Warning");
                await JsRuntime.InvokeVoidAsync("BaseActiveInactive", "tableActiveInactiveId-" + srNum.ToString(), data.Description);
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
    }

    protected void GetUserList(IEnumerable<UserListData> userLists)
    {
        userListResponse.Details = userLists.ToList();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        posInventoryGetListRequest.PageNo = pageNumber;
        posInventoryGetListRequest.PageSize = pagingParameter.PageSize = PageSize;
        IsDeleted = listRequest.IsDeleted;        

        var result = await PosInventoryHelpers.PosInventoryList(posInventoryGetListRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            posInventoryResponse = JsonConvert.DeserializeObject<PosInventoryResponse>(result.data);
            int i = 1;
            posInventoryResponse.details.ForEach(x =>
            {
                x.SrNo = (PageSize * posInventoryResponse.Offset + i);
                i++;
            });
            if (posInventoryResponse.details.Count != 0)
            {
                pagingParameter.TotalCount = posInventoryResponse.Total;
                pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                pagingParameter.PageNumber = posInventoryResponse.Offset + 1;
                pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                pagingParameter.ShowFooter = true;
                pagingParameter.ShowPageNumber = true;
            }
            else
            {
                pagingParameter.ShowFooter = false;
                pagingParameter.ShowPageNumber = false;
                pagingParameter.TotalCount = 0;
            }

        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
        }
        Loader = false;
        StateHasChanged();
    }

    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async Task OpenProfileDropDown()
    {
        await JsRuntime.InvokeVoidAsync("openProfileDropDown");
    }

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteUserId) && value)
        {
            try
            {
                var result = await UserHelpers.DeleteUserApi(new BaseIdRequest { Id = new(DeleteUserId) });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{result.meta.message[0]}");
                    await LoadData();
                    NavManager.NavigateTo("/user-list");
                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    if (result.meta.message[0].Contains("User not found"))
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User not found");
                        NavManager.NavigateTo("/user-list");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                        return;
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "somthing went wrong");
                return;
            }
        }
    }
    private async void SearchData()
    {
        Loader = true;
        posInventoryGetListRequest.SearchParam = (posInventoryGetListRequest.SearchParam ?? string.Empty).Trim();

        await LoadData();

        Loader = false;
        StateHasChanged();
    }

    public async void Clear()
    {
        posInventoryGetListRequest.SearchParam = string.Empty;
        posInventoryGetListRequest = new PosInventoryGetListRequest();
        await LoadData();

    }

    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(listRequest.SortBy))
        {
            string[] search = listRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                listRequest.SortBy = listRequest.SortBy.Contains("desc") ? listRequest.SortBy.Replace("desc", "asc") : listRequest.SortBy.Replace("asc", "desc");
            else
                listRequest.SortBy = $"{sortBy}_asc";
        }
        else
            listRequest.SortBy = $"{sortBy}_asc";

        await LoadData();
    }
}
