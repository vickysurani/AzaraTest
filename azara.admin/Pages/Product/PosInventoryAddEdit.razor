@page "/pos-inventory/edit/{Id}"

@using SixLabors.ImageSharp;
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Inventory.Response;
@using azara.admin.Models.Product.Request
@using azara.models.Responses.ProductCategory
@using azara.models.Responses.Store
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ProductTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">Update Inventory : </h2><h4 class="ms-1">@Title</h4>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="imageRequest" OnValidSubmit="AddUpdateData">
            <div class="gray-bg">
                <div class="filter-area justify-end align-item-center">
                    <div class="add-btn">
                        <a href="/PosInventory-pos-list">Cancel</a>
                        <input type="submit" value="Submit Image" />
                    </div>
                </div>
                <form class="form-details m-t-15 edit-form-section">
                    <div class="row form-details-box">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>ALU</label>
                                <p>@ViewData.ALU</p>
                            </div>
                            <div class="form-group">
                                <label>Item Name</label>
                                <p>@ViewData.Attribute</p>
                            </div>
                            <div class="form-group">
                                <label>Sub Category</label>
                                <p>@ViewData.Desc1</p>
                            </div>
                            <div class="form-group">
                                <label>Price</label>
                                <p>@ViewData.Cost</p>
                            </div>
                            <div class="form-group">
                                <label>Category</label>
                                <p>@ViewData.DepartmentCode</p>
                            </div>
                            <div class="form-group">
                                <label>COGS Account</label>
                                <p>@ViewData.COGSAccount</p>
                            </div>
                            <div class="form-group">
                                <label>Income Account</label>
                                <p>@ViewData.IncomeAccount</p>
                            </div>
                            <div class="form-group edit-formcontrol">
                                <label>Description</label>
                                <input type="text" class="form-control" autofocus @bind-value="@ViewData.Description" />
                            </div>

                            <div class="form-group">
                                <label>Item Type</label>
                                <p>@ViewData.ItemType</p>
                            </div>
                            <div class="form-group">
                                <label>Item Number</label>
                                <p>@ViewData.ItemNumber</p>
                            </div>
                            <!-- row start -->
                            <div class="row row-cols-md-2 row-cols-lg-3 px-2 mt-4">
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store1</label>
                                        <p>@ViewData.OnHandStore01</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store2</label>
                                        <p>@ViewData.OnHandStore02</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store3</label>
                                        <p>@ViewData.OnHandStore03</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store4</label>
                                        <p>@ViewData.OnHandStore04</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store5</label>
                                        <p>@ViewData.OnHandStore05</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store6</label>
                                        <p>@ViewData.OnHandStore06</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store7</label>
                                        <p>@ViewData.OnHandStore07</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store8</label>
                                        <p>@ViewData.OnHandStore08</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store9</label>
                                        <p>@ViewData.OnHandStore09</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store10</label>
                                        <p>@ViewData.OnHandStore10</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store11</label>
                                        <p>@ViewData.OnHandStore11</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store12</label>
                                        <p>@ViewData.OnHandStore12</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store13</label>
                                        <p>@ViewData.OnHandStore13</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store14</label>
                                        <p>@ViewData.OnHandStore14</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store15</label>
                                        <p>@ViewData.OnHandStore15</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store16</label>
                                        <p>@ViewData.OnHandStore16</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store17</label>
                                        <p>@ViewData.OnHandStore17</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store18</label>
                                        <p>@ViewData.OnHandStore18</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store19</label>
                                        <p>@ViewData.OnHandStore19</p>
                                    </div>
                                </div>
                                <div class="col px-2">
                                    <div class="form-group">
                                        <label>OnHand Store20</label>
                                        <p>@ViewData.OnHandStore20</p>
                                    </div>
                                </div>
                            </div>
                            <!-- row end -->
                        </div>
                        <div class="col-md-6">
                            <label>Inventory product Image</label>
                            <div id="file-upload-form" class="uploader">
                                <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" />
                                <ValidationMessage For="@(() => ViewData.Image)" />
                                <label for="file-upload" id="file-drag">
                                    @if (!string.IsNullOrWhiteSpace(ViewData.Image))
                                    {

                                        <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                            <i class="fa fa-times" aria-hidden="true"></i>
                                        </button>
                                    }
                                    <img id="file-image" src="@ViewData.Image" alt="" class="@((string.IsNullOrEmpty(ViewData.Image)? "hidden" : ""))" @bind-Value="ViewData.Image" @bind-Value:event="OnInput">
                                    <div id="start">
                                        @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                        <i class="fa fa-upload" aria-hidden="true"></i>
                                        <div>Drag & Drop Here or </div>
                                        <div id="notimage" class="hidden">Please select an image</div>
                                        <a id="file-upload-btn" class="">CHoose a file</a>
                                        <p class="second-theme-color">max. 2MB</p>
                                    </div>
                                    <div id="response" class="hidden d-none">
                                        <div id="messages"></div>
                                        <progress class="progress" id="file-progress" value="0">
                                            <span>0</span>%
                                        </progress>
                                    </div>
                                </label>
                            </div>
                            @*<div class="form-group">
                        <label>Status</label>
                        <label class="switch">
                        <InputCheckbox class="form-control without-ic" placeholder="Enter Status"
                        rows="12" @bind-Value=eventInsertUpdateRequest.Active aria-describedby="productsubcategorystatuslabel" checked="@eventInsertUpdateRequest.Active" aria-label="Status" />
                        <span class="slider round"></span>
                        </label>
                        </div>*@

                            <div class="row row-cols-md-2 row-cols-lg-3 row-cols-xl-4 px-2 mt-4">
                                <div class="col">
                                    <div class="form-group">
                                        <label>Price 1</label>
                                        <p>@ViewData.Price1</p>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label>Price 2</label>
                                        <p>@ViewData.Price2</p>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label>Price 3</label>
                                        <p>@ViewData.Price3</p>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label>Price 4</label>
                                        <p>@ViewData.Price4</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </form>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    PosInventoryGetByIdResponse ViewData = new PosInventoryGetByIdResponse();
    PosInventoryImageUpdateRequest imageRequest = new PosInventoryImageUpdateRequest();
    PosByIdRequest request = new PosByIdRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/product/update/{cipheredId}");
        StateHasChanged();
    }



    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            request.Id = Id;
            Loader = false;
            var result = await ProductHelpers.GetPosInventoryItem(request);
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                ViewData = JsonConvert.DeserializeObject<PosInventoryGetByIdResponse>(result.data);
                Title = ViewData.Desc1;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{345345}");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Create New Product";
            NavManager.NavigateTo("/PosInventory-pos-list");

        }
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = ViewData.ImageList != null && ViewData.ImageList.Any() ? ViewData.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {

                        if (file.Size > 1000000)
                        {
                            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Image size must be less than 1 MB");
                            return;
                        }
                        else
                        {
                            var files = e.GetMultipleFiles(imageCount).ToList();
                            List<string> imageList = new List<string>();
                            if (files != null && files.Count > 0)
                            {
                                foreach (var item in files)
                                {
                                    //string newSize = ImageResize(item, 250, 250);
                                    var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Product, OldFileName = ViewData.ImageList };

                                    var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                    if (result != null)
                                    {
                                        FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                        if (response != null && response.Details != null && response.Details.Count > 0)
                                        {
                                            imageList.Add(response.Details.FirstOrDefault().FilePath);
                                        }
                                        ViewData.Image = response.Details[0].FilePath;
                                        imageRequest.image = response.Details[0].FilePath;

                                    }
                                }
                                StateHasChanged();
                            }
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    //public string ImageResize(IBrowserFile img, int Maxwidth, int MaxHeight)
    //{
    //    if (img.Width > Maxwidth || img.Height > MaxHeight)
    //    {
    //        double widthRatio = (double)img.Width / Maxwidth;
    //        double HeightRatio = (double)img.Height / MaxHeight;
    //        double ratio = Math.Max(widthRatio, HeightRatio);
    //        int newWidth = (int)(img.Width / ratio);
    //        int newHeight = (int)(img.Height / ratio);
    //        return newHeight.ToString() + "," + newWidth.ToString();
    //    }
    //    else
    //    {
    //        return img.Height.ToString() + "," + img.Width.ToString();
    //    }
    //}

    private async Task DeleteImage()
    {
        ViewData.Image = new CommonHelpers(FileUpload).DeleteImage(ViewData.Image);
    }

    internal async Task AddUpdateData()
    {
        Loader = true;

        imageRequest.Id = ViewData.Id;
        imageRequest.Description = ViewData.Description;

        var result = await ProductHelpers.UpdateInventoryImage(imageRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (Id == null)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Added Successfully!");
                }
                NavManager.NavigateTo("/PosInventory-pos-list");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("Event not found"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                    if (Id == null)
                        NavManager.NavigateTo("/PosInventory-pos-list");
                    else
                        NavManager.NavigateTo($"/pos-inventory/view/{imageRequest.Id}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }
}
