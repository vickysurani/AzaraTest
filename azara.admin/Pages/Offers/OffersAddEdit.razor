@page "/offers/insert"
@page "/offers/update/{Id}"
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Const
@using azara.admin.Models.Offers.Request

<PageTitle>@AdminTitleModel.OffersTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Offer : " : "Add Offer")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="offersInsertRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/offers" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Offer Name</label>
                        <InputText type="text" class="form-control without-ic" placeholder="Enter offer name" @bind-Value=offersInsertRequest.Name aria-describedby="storenamelabel" aria-label="Store Name" />
                        <ValidationMessage For="@(() => offersInsertRequest.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Amount</label>
                        <InputText type="text" class="form-control without-ic" placeholder="Enter Amount"
                               rows="12" @bind-Value=offersInsertRequest.Amount aria-describedby="contactnumberlabel" aria-label="Amount" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="2" />
                        <ValidationMessage For="@(() => offersInsertRequest.Amount)" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea type="text" class="form-control without-ic" placeholder="Enter Description" @bind-Value=offersInsertRequest.Description aria-describedby="descriptionlabel" aria-label="Offer Description" />
                        <ValidationMessage For="@(() => offersInsertRequest.Description)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Offer Image</label>
                    <div id="file-upload-form" class="uploader">
                        <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" />
                        <ValidationMessage For="@(() => offersInsertRequest.Image)" />
                        <label for="file-upload" id="file-drag">
                            @if (!string.IsNullOrWhiteSpace(offersInsertRequest.Image))
                            {
                                <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            }
                            <img id="file-image" src="@offersInsertRequest.Image" alt="" class="@((string.IsNullOrEmpty(offersInsertRequest.Image)? "hidden" : ""))" @bind-Value="offersInsertRequest.Image" @bind-Value:event="OnInput">
                            <div id="start">
                                @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                <i class="fa fa-upload" aria-hidden="true"></i>
                                <div>Drag & Drop Here or </div>
                                <div id="notimage" class="hidden">Please select an image</div>
                                <a id="file-upload-btn" class="">CHoose a file</a>
                                <p class="second-theme-color">max. 2GB</p>
                            </div>
                            <div id="response" class="hidden d-none">
                                <div id="messages"></div>
                                <progress class="progress" id="file-progress" value="0">
                                    <span>0</span>%
                                </progress>
                            </div>
                        </label>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    OffersInsertRequest offersInsertRequest = new OffersInsertRequest();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            offersInsertRequest.Id = Id;
            Loader = false;
            var result = await OfferHelpers.OffersGetById(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                offersInsertRequest = JsonConvert.DeserializeObject<OffersInsertRequest>(result.data);
                Title = offersInsertRequest.Name;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Offer not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New Offer";
            offersInsertRequest = new OffersInsertRequest();
        }
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        offersInsertRequest.Id = Id;
        var result = await OfferHelpers.OffersAddUpdateApi(offersInsertRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result.meta.statusCode == 200)
            {
                if (!string.IsNullOrEmpty(offersInsertRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Offer Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Offer Insert Successfully!");
                }
                NavManager.NavigateTo("/offers");
            }
            else if (result.meta.statusCode == 500)
            {
                if (result.meta.message[0].Equals("Please enter valid location"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please enter valid location!");
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = offersInsertRequest.ImageList != null && offersInsertRequest.ImageList.Any() ? offersInsertRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Offer, OldFileName = offersInsertRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    offersInsertRequest.Image = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task DeleteImage()
    {
        offersInsertRequest.Image = new CommonHelpers(FileUpload).DeleteImage(offersInsertRequest.Image);
    }
}