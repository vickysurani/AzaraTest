@page "/admin/reset-password/{AdminId}/{Token}"
@layout WithoutSideNavMenu

@using azara.admin.Models.Account.Request
@using azara.admin.Models.Base.Response
@using azara.common.Helpers
@using azara.models.Requests.Admin
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.AdminResetPasswordTitle</PageTitle>

//@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="auth-sec align-item-center">
        <div class="logo-sec justify-center">
            @*<img src="images/big-logo.svg" alt="big-logo" />*@
            <img src="images/azara-logo.svg" alt="big-logo" />
        </div>
        <div class="auth-details">
            <div class="auth-width">
                <div class="bk-btn">
                    <a href="/admin/forgot-password"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
                </div>
                <h1>Reset Password</h1>
                <p>Please enter your new password to reset it.</p>
                <EditForm Model="resetPasswordRequest" OnValidSubmit="ResetAdminPassword">
                    <DataAnnotationsValidator />
                    <InputText type="hidden" @bind-Value="resetPasswordRequest.AdminId" />
                    <div class="form-group">
                        <label>New Password</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">
                                    <img src="images/pwd-ic.svg"
                                     alt="pwd-ic" />
                                </span>
                            </div>
                            <InputText type="@TextType" @bind-Value="resetPasswordRequest.Password" class="form-control" id="password" placeholder="Enter the password"
                                   aria-label="Password" aria-describedby="basic-addon1" />
                            <span @onclick="ShowPassword"><i class="@EyeIcon" id="eyeIcon" aria-hidden="true"></i></span>
                        </div>
                        <div class="addValidation">
                            <ValidationMessage For="@(() => resetPasswordRequest.Password)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Confirm New Password</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="basic-addon1">
                                    <img src="images/pwd-ic.svg"
                                     alt="pwd-ic" />
                                </span>
                            </div>
                            <InputText type="@TextType" @bind-Value="resetPasswordRequest.ConfirmPassword" class="form-control" id="password" placeholder="Enter the confirm password"
                                   aria-label="Password" aria-describedby="basic-addon1" />
                            <span @onclick="ShowPassword"><i class="@EyeIcon" id="eyeIcon" aria-hidden="true"></i></span>
                        </div>
                        <div class="addValidation">
                            <ValidationMessage For="@(() => resetPasswordRequest.ConfirmPassword)" />
                        </div>
                    </div>
                    <div class="signin-btn">
                        <input type="submit" value="Submit" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public string Token { get; set; }

    [Parameter]
    public string AdminId { get; set; }

    private bool Loader { get; set; }
    protected string EyeIcon = "fa fa-eye-slash";
    protected string TextType = "password";

    AdminResetPasswordRequest resetPasswordRequest { get; set; } = new AdminResetPasswordRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                NavManager.NavigateTo("/");
            }
            else
            {
                var result = await AccountHelper.IsAdminValidApi(new CheckAdminResetRequest
                    {
                        AdminId = AdminId,
                        Token = Token
                    });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    resetPasswordRequest.AdminId = GenericHelpers.Decipher(AdminId, 3);
                    Loader = false;
                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    await ShowBadRequestResponse(result.meta.message[0]);
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
                    NavManager.NavigateTo("/not-found");
                }

                Loader = false;
            }
            StateHasChanged();
        }
    }

    internal async Task ResetAdminPassword()
    {
        Loader = true;
        var result = await AccountHelper.ResetPasswordApi(resetPasswordRequest);
        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully reset your password!");
            NavManager.NavigateTo("/");
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            await ShowBadRequestResponse(result.meta.message[0]);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
            return;
        }

        Loader = false;
    }

    protected void ShowPassword()
    {
        if (this.TextType.Equals("password"))
        {
            EyeIcon = "fa fa-eye";
            TextType = "text";
        }
        else
        {
            EyeIcon = "fa fa-eye-slash";
            TextType = "password";
        }
    }

    private async Task ShowBadRequestResponse(string message)
    {
        if (message.Contains("Account not found"))
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Bad request, try again!");
            NavManager.NavigateTo("/admin/forgot-password");
        }
        else if (message.Contains("Otp Expired"))
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Token is expired");
            NavManager.NavigateTo("/admin/forgot-password");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something Was Wrong");
            NavManager.NavigateTo("/not-found");
        }
    }
}
