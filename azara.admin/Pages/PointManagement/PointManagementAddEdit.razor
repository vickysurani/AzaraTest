@page "/pointManagement/insert"
@page "/pointManagement/update/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Event.Request
@using azara.admin.Models.Const
@using azara.admin.Models.PointManagement.Request;

<PageTitle>@AdminTitleModel.PointManagementTitle</PageTitle>


@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Point : " : "Add Point ")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="pointManagementInsertRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/pointManagement" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter name" @bind-Value=pointManagementInsertRequest.name aria-describedby="namelabel" aria-label="Name" />
                        <ValidationMessage For="@(() => pointManagementInsertRequest.name)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Name</label>
                        <InputNumber class="form-control without-ic" placeholder="Enter Point" @bind-Value=pointManagementInsertRequest.point
                        aria-describedby="namelabel" aria-label="Point" />
                        <ValidationMessage For="@(() => pointManagementInsertRequest.point)" />
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }
    PointManagementInsertRequest pointManagementInsertRequest = new PointManagementInsertRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    private DateTime MinDate { get; set; } = DateTime.UtcNow;

    private bool Loader { get; set; } = true;
    public string Title { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            pointManagementInsertRequest.Id = new(Id);
            Loader = false;
            var result = await PointManagementHelpers.GetPointManagementItem(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                pointManagementInsertRequest = JsonConvert.DeserializeObject<PointManagementInsertRequest>(result.data);
               
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New Points";
            pointManagementInsertRequest = new PointManagementInsertRequest();
        }
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;

        

        pointManagementInsertRequest.Id = !string.IsNullOrWhiteSpace(Id) ? new(Id) : null;
        var result = await PointManagementHelpers.PointManagementAddUpdateApi(pointManagementInsertRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(pointManagementInsertRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "pointManagement Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "pointManagement Added Successfully!");
                }
                NavManager.NavigateTo("/pointManagement");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("pointManagement not found"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "pointManagement not found");
                    if (!string.IsNullOrWhiteSpace(pointManagementInsertRequest.Id))
                        NavManager.NavigateTo("/pointManagement/insert");
                    else
                        NavManager.NavigateTo($"/pointManagement/update/{pointManagementInsertRequest.Id}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }
}
