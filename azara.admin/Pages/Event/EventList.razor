@page "/event"
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Event.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const
@using azara.admin.Models.Sub_admin.Response;

<PageTitle>@AdminTitleModel.EventTitle</PageTitle>

<!--******************* Middle Section Start ******************-->
<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage Event</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>
<h2 class="d-lg-none d-block mt-3">Manage Event</h2>
<div class="data-table-area">
    <div class="filter-area align-item-center">

        <div class="head-topbar-search">
            <i class="fa fa-search" aria-hidden="true"></i>
            <input type="text" class="form-custom" placeholder="Search" @bind-value="@listRequest.Name" />
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @onclick="SearchData">Search</a>
            </div>
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @onclick="Clear">Clear</a>
            </div>
        </div>

        <div class="justify-end flex-column flex-md-row ml-auto mr-0">
            <div class="add-btn">
                <a @onclick="AddEvent">Add Event</a>
            </div>
        </div>
    </div>
    <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>
    <div class="data-table mt-1">
        <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
            <thead>
                <tr>
                    <th scope="col">Sr No</th>
                    <th>Image</th>
                    <th @onclick="@(() => SortBy("name"))">
                        Name
                        <i class="fa fa-sort"></i>
                    </th>
                    <th @onclick="@(() => SortBy("event_date"))">
                        Event Date
                        <i class="fa fa-sort"></i>
                    </th>
                    <th>Event Time</th>
                    <th>Event Location</th>
                    @if (!IsDeleted)
                    {
                        <th scope="col">Status</th>
                    }
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (eventListResponse.Details != null && eventListResponse.Details.Any())
                {
                    int srNum = 1;
                    @foreach (var eventData in eventListResponse.Details)
                    {
                        <tr>
                            <td scope="row">@eventData.SrNo</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(eventData.image))
                                {
                                    <img src="@eventData.image" class="imageThumbnail" />
                                }
                                else
                                {
                                    <p>No Image</p>
                                }
                            </td>
                            <td>@eventData.name</td>
                            <td>@eventData.eventdate.ToString("dd MMM, yyyy")</td>
                            <td>@eventData.eventstarttime.ToString("hh:mm tt") to @eventData.eventendtime.ToString("hh:mm tt")</td>
                            <td><p>@eventData.eventLocation</p></td>
                            @if (!IsDeleted)
                            {
                                <td class="access-req">
                                    <div class="switch-icon">
                                        <label class="switch">
                                            <input type="checkbox" id="tableActiveInactiveId-@srNum" checked="@eventData.active" @onchange="((e) => StatusUpdate(eventData,(bool) e.Value, srNum))">
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                </td>
                            }
                            <td>
                                <div class="view-btn btn">
                                    <a @onclick='e => UpdateByID(eventData.Id, "view")'><img src="images/eye-ic.png" alt="eye-ic" /></a>
                                </div>
                                <div class="view-btn edit-btn btn">
                                    <a @onclick='e => UpdateByID(eventData.Id, "edit")'><img src="images/edit-ic.png" alt="edit-ic" /></a>
                                </div>
                                <div class="view-btn delete-btn btn">
                                    <a @onclick="(() => UpdateByID(eventData.Id))" data-toggle="modal" data-target="#donate-modal">
                                        <img src="images/delete-ic.png" alt="delete-ic" />
                                    </a>
                                </div>
                            </td>
                        </tr>
                        srNum++;
                    }
                }
                else
                {
                    <tr>
                        <td class="text-center text-danger" colspan=8><h4>No Data Found</h4></td>
                    </tr>
                }
            </tbody>
        </table>
        <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
    </div>
    <p>
        @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
    </p>
</div>
<!-- Modal Content-->
@if (Permission != null)
{

    @if (Permission.Contains("Delete"))
    {

        <div class="modal donate-modal" id="donate-modal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Delete Event</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="donate-blk del-img">
                            <img src="images/delete-ico.svg" alt="delete-ico" />
                            <h6>Are you sure you want to delete this @(DeleteStoreItem) Event?</h6>
                            <div class="d-flex justify-content-center">
                                <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                                <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@if (Loader == true)
{
    <Loader></Loader>
}

@code {

    protected string DeleteStoreId { get; set; }
    protected string DeleteStoreItem { get; set; }
    EventListResponse eventListResponse = new();
    ListRequest listRequest = new ListRequest();
    BaseStatusUpdateRequest statusUpdateRequest = new BaseStatusUpdateRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();
    SubAdminRetrieveById ViewResponse { get; set; } = new SubAdminRetrieveById();

    int PageSize = 10;
    bool Loader = true, IsDeleted = false;
    public string UserId, Permission;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            UserId = await localStorage.GetItemAsync<string>("adminId");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                Permission = await MenuList(UserId, "Events");
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal async void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
            {
                if (Permission.Contains("View"))
                {

                    NavManager.NavigateTo($"/event/view/{cipheredId}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "You Dont have permission for View the Events");
                    NavManager.NavigateTo($"/event");
                }
            }
            if (value.Equals("edit"))
            {

                if (Permission.Contains("Update"))
                {

                    NavManager.NavigateTo($"/event/update/{cipheredId}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "You Dont have permission for Update the Events");
                    NavManager.NavigateTo($"/event");
                }
            }
        }
        else
        {
            if (Permission.Contains("Delete"))
            {
                DeleteStoreId = id;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "You Dont have permission for Delete the Events");
                NavManager.NavigateTo($"/event");
            }
        }

        StateHasChanged();
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;
        IsDeleted = listRequest.IsDeleted;

        var result = await EventHelpers.EventList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            eventListResponse = JsonConvert.DeserializeObject<EventListResponse>(result.data);

            int i = 1;
            eventListResponse.Details.ForEach(x =>
            {
                x.SrNo = (PageSize * eventListResponse.Offset + i);
                i++;
            });
            if (eventListResponse.Details.Count != 0)
            {
                pagingParameter.TotalCount = eventListResponse.Total;
                pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                pagingParameter.PageNumber = eventListResponse.Offset + 1;
                pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                pagingParameter.ShowFooter = true;
                pagingParameter.ShowPageNumber = true;
            }
            else
            {
                pagingParameter.ShowFooter = false;
                pagingParameter.ShowPageNumber = false;
                pagingParameter.TotalCount = 0;
            }
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                eventListResponse = JsonConvert.DeserializeObject<EventListResponse>(result.data);

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        }
        Loader = false;
        StateHasChanged();
    }
    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteStoreId) && value)
        {
            try
            {
                var result = await EventHelpers.DeleteStoreApi(new BaseIdRequest { Id = new(DeleteStoreId) });
                if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted event!");
                    NavManager.NavigateTo("/event", true);
                }
                else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                {
                    if (result.meta.message[0].Contains("Store not found"))
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Store not found");
                        NavManager.NavigateTo("/event");
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                        return;
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

    private async void SearchData()
    {
        Loader = true;
        listRequest.Name = (listRequest.Name ?? string.Empty).Trim();

        await LoadData();

        Loader = false;
        StateHasChanged();
    }

    private async void AddEvent()
    {
        if (Permission.Contains("Add"))
        {

            NavManager.NavigateTo("/event/insert");
            StateHasChanged();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "You Dont have permission for Add the Events");
            NavManager.NavigateTo($"/event");
        }
    }

    public async void Clear()
    {
        listRequest.Name = string.Empty;
        listRequest = new ListRequest();
        await LoadData();

    }

    internal async Task StatusUpdate(EventListData eventData, bool isApproved, int srNum)
    {
        statusUpdateRequest.Id = new(eventData.Id);
        statusUpdateRequest.Active = isApproved;

        var result = await EventHelpers.EventStatusUpdate(statusUpdateRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (isApproved)
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{eventData.name} is now active.");
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{eventData.name} is now inactive.");
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("Warning");
                await JsRuntime.InvokeVoidAsync("BaseActiveInactive", "tableActiveInactiveId-" + srNum.ToString(), eventData.active);
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        }
    }


    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(listRequest.SortBy))
        {
            string[] search = listRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                listRequest.SortBy = listRequest.SortBy.Contains("desc") ? listRequest.SortBy.Replace("desc", "asc") : listRequest.SortBy.Replace("asc", "desc");
            else
                listRequest.SortBy = $"{sortBy}_asc";
        }
        else
            listRequest.SortBy = $"{sortBy}_asc";

        await LoadData();
    }

    internal async static Task<string> MenuList(string Id, string menuName)
    {
        string temp = null;
        var result = await SubadminHelper.GetSubadminByID(new BaseIdRequest { Id = new(Id) });

        if (result.meta.statusCode == 200)
        {
            SubAdminRetrieveById Action = JsonConvert.DeserializeObject<SubAdminRetrieveById>(result.data);
            foreach (var menu in Action.MenuList)
            {
                if (menu.name == menuName && menu.isSelected == true)
                {
                    temp = menu.permissionCsv;
                }
            }
        }
        return temp;
    }
}
