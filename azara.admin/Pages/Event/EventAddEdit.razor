@page "/event/insert"
@page "/event/update/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Event.Request
@using azara.admin.Models.Const
@using azara.admin.Models.Sub_admin.Response;

<PageTitle>@AdminTitleModel.EventTitle</PageTitle>


@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Event : " : "Add Event")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="eventInsertUpdateRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/event" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter Event Name" @bind-Value=eventInsertUpdateRequest.Name aria-describedby="namelabel" aria-label="Name" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Event Date</label>
                        <input type="date" class="form-control without-ic" placeholder="Event Date" @bind-value=eventInsertUpdateRequest.EventDate min='@MinDate.ToString("yyyy-MM-dd")' aria-describedby="eventdatelabel" aria-label="event date" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.EventDate)" />
                    </div>
                    <div class="form-group">
                        <label>Event StartTime</label>
                        <input type="time" class="form-control without-ic" placeholder="Event Start time" @bind-value=eventInsertUpdateRequest.EventStartTime step="any" aria-describedby="eventstarttimelabel" aria-label="event start time" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.EventStartTime)" />
                    </div>
                    <div class="form-group">
                        <label>Event EndTime</label>
                        <input type="time" class="form-control without-ic" placeholder="Event End time" @bind-value=eventInsertUpdateRequest.EventEndTime step="any" aria-describedby="eventendtimelabel" aria-label="event end time" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.EventEndTime)" />
                    </div>
                    <div class="form-group">
                        <label>Event Location</label>
                        <InputText class="form-control without-ic" placeholder="Event Location" @bind-Value=eventInsertUpdateRequest.EventLocation aria-describedby="eventlocationlabel" aria-label="event location" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.EventLocation)" />
                    </div>
                    <div class="form-group">
                        <label>Descriptions</label>
                        <InputTextArea type="text" class="form-control without-ic" placeholder="Enter Descriptions" @bind-Value=eventInsertUpdateRequest.Description aria-describedby="descriptionslabel" aria-label="Descriptions" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.Description)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Event Image</label>
                    <div id="file-upload-form" class="uploader">
                        <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" />
                        <ValidationMessage For="@(() => eventInsertUpdateRequest.Image)" />
                        <label for="file-upload" id="file-drag">
                            @if (!string.IsNullOrWhiteSpace(eventInsertUpdateRequest.Image))
                            {

                                <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            }
                            <img id="file-image" src="@eventInsertUpdateRequest.Image" alt="" class="@((string.IsNullOrEmpty(eventInsertUpdateRequest.Image)? "hidden" : ""))" @bind-Value="eventInsertUpdateRequest.Image" @bind-Value:event="OnInput">
                            <div id="start">
                                @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                <i class="fa fa-upload" aria-hidden="true"></i>
                                <div>Drag & Drop Here or </div>
                                <div id="notimage" class="hidden">Please select an image</div>
                                <a id="file-upload-btn" class="">CHoose a file</a>
                                <p class="second-theme-color">max. 2GB</p>
                            </div>
                            <div id="response" class="hidden d-none">
                                <div id="messages"></div>
                                <progress class="progress" id="file-progress" value="0">
                                    <span>0</span>%
                                </progress>
                            </div>
                        </label>
                    </div>
                    @*<div class="form-group">
                <label>Status</label>
                <label class="switch">
                <InputCheckbox class="form-control without-ic" placeholder="Enter Status"
                rows="12" @bind-Value=eventInsertUpdateRequest.Active aria-describedby="productsubcategorystatuslabel" checked="@eventInsertUpdateRequest.Active" aria-label="Status" />
                <span class="slider round"></span>
                </label>
                </div>*@
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }
    EventInsertUpdateRequest eventInsertUpdateRequest = new EventInsertUpdateRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    SubAdminRetrieveById ViewResponse { get; set; } = new SubAdminRetrieveById();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    private DateTime MinDate { get; set; } = DateTime.UtcNow;

    private bool Loader { get; set; } = true;
    public string Title { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");

            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                if(Id != null)
                {

                    
                        await LoadData();
                  
                }
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            eventInsertUpdateRequest.Id = new(Id);
            Loader = false;
            var result = await EventHelpers.GetEventItem(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                eventInsertUpdateRequest = JsonConvert.DeserializeObject<EventInsertUpdateRequest>(result.data);
                if (eventInsertUpdateRequest != null)
                {
                    MinDate = eventInsertUpdateRequest.EventDate;
                    Title = eventInsertUpdateRequest.Name;
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New Event";
            eventInsertUpdateRequest = new EventInsertUpdateRequest();
        }
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;

        if (eventInsertUpdateRequest.EventEndTime.CompareTo(eventInsertUpdateRequest.EventStartTime) != 1)
        {
            Loader = false;
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "The event end time should be greater than the event start time!");
            return;
        }

        eventInsertUpdateRequest.Id = !string.IsNullOrWhiteSpace(Id) ? new(Id) : null;
        var result = await EventHelpers.EventAddUpdateApi(eventInsertUpdateRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(eventInsertUpdateRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Event Added Successfully!");
                }
                NavManager.NavigateTo("/event");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("Event not found"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Event not found");
                    if (!string.IsNullOrWhiteSpace(eventInsertUpdateRequest.Id))
                        NavManager.NavigateTo("/event/insert");
                    else
                        NavManager.NavigateTo($"/event/update/{eventInsertUpdateRequest.Id}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = eventInsertUpdateRequest.ImageList != null && eventInsertUpdateRequest.ImageList.Any() ? eventInsertUpdateRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Event, OldFileName = eventInsertUpdateRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    eventInsertUpdateRequest.Image = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task DeleteImage()
    {
        eventInsertUpdateRequest.Image = new CommonHelpers(FileUpload).DeleteImage(eventInsertUpdateRequest.Image);
    }

    internal async static Task<string> MenuList(string Id, string menuName)
    {
        string temp = null;
        var result = await SubadminHelper.GetSubadminByID(new BaseIdRequest { Id = new(Id) });

        if (result.meta.statusCode == 200)
        {
            SubAdminRetrieveById Action = JsonConvert.DeserializeObject<SubAdminRetrieveById>(result.data);
            foreach (var menu in Action.MenuList)
            {
                if (menu.name == menuName && menu.isSelected == true)
                {
                    temp = menu.permissionCsv;
                }
            }
        }
        return temp;
    }
}
