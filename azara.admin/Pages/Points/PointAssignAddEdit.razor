@page "/point/update/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.User.Request
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.PointAssign</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">Update points </h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="userInsertUpdateRequest">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="pointassign-users" class="cancel-btn">Cancel</a>
                    <input type="button" @onclick="AddUpdateData" value="Submit"  />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>First Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter first name" @bind-Value=userInsertUpdateRequest.FirstName aria-describedby="firstnamelabel" aria-label="First Name" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.FirstName)" />
                    </div>
             @*       <div class="form-group">
                        <label>Last Name</label>
                        <InputText class="form-control without-ic" placeholder="Enter last name" @bind-Value=userInsertUpdateRequest.LastName aria-describedby="lastnamelabel" aria-label="Last Name" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.LastName)" />
                    </div>*@
                    <div class="form-group">
                        <label>EmailId</label>
                        <InputText class="form-control without-ic" placeholder="Enter email Id" @bind-Value=userInsertUpdateRequest.EmailId aria-describedby="emailidlabel" aria-label="Email Id" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.EmailId)" />
                    </div>

                    <div class="form-group">
                        <label>Point</label>
                        <InputText class="form-control without-ic" placeholder="Enter Points" @bind-Value=userInsertUpdateRequest.AssignPoints aria-describedby="pointidlabel" aria-label="Point" />
                        <ValidationMessage For="@(() => userInsertUpdateRequest.AssignPoints)" />
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}


@code {

    [Parameter]
    public string Id { get; set; }

    UserInsertUpdateRequest userInsertUpdateRequest = new UserInsertUpdateRequest();
    PointAssignRequest pointAssignRequest = new PointAssignRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    BaseImageUploadRequest baseImageUpload { get; set; } = new();

    private DateTime? MinDate { get; set; } = DateTime.UtcNow;
    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    public string EyeIcon = "fa fa-eye-slash";
    protected string TextType = "password";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            userInsertUpdateRequest.Id = Id;
            Loader = false;
            var result = await UserHelpers.UserGetById(new BaseIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                userInsertUpdateRequest = JsonConvert.DeserializeObject<UserInsertUpdateRequest>(result.data);
                if (userInsertUpdateRequest != null)
                {
                    MinDate = userInsertUpdateRequest.BirthDate;
                    Title = userInsertUpdateRequest.FirstName + " " + userInsertUpdateRequest.LastName;
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New User";
            userInsertUpdateRequest = new UserInsertUpdateRequest();
        }
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        //Id = GenericHelper.Decipher(Id, 3);
        userInsertUpdateRequest.Id = Id;
        pointAssignRequest.UserId = Guid.Parse(Id);
        var result = await PointsHelpers.PointAssignUsers(pointAssignRequest.UserId.ToString(), userInsertUpdateRequest.AssignPoints);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(userInsertUpdateRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "User points added Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "User points Added Successfully!");
                }
                NavManager.NavigateTo("/pointassign-users");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("User is already exists"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User is already exists");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");

            return;
        }
    }

    protected void ShowPassword()
    {
        if (this.TextType.Equals("password"))
        {
            EyeIcon = "fa fa-eye";
            TextType = "text";
        }
        else
        {
            EyeIcon = "fa fa-eye-slash";
            TextType = "password";
        }
    }

  
}