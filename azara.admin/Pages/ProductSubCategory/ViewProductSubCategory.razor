@page "/product_sub_category/view/{Id}"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Product.Request
@using azara.admin.Models.ProductCategory.Request
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ProductSubCategoryTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">View Product Sub-Category : </h2><h4 class="ms-1">@Title</h4>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <div class="gray-bg">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a @onclick='e => UpdateByID(Id)' class="cancel-btn">Edit</a>
                    <a href="/product_sub_category">Cancel</a>
                </div>
            </div>
            <form class="form-details m-t-15">
                <div class="row form-details-box">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Product Category Name</label>
                            <p>@productCategoryInsertUpdateRequest.Name</p>
                        </div>
                        @*<div class="form-group">
                    <label>Status</label>
                    <label class="switch">
                    <input class="form-control without-ic" placeholder="Enter Status"
                    rows="12" aria-describedby="productcategorystatuslabel" checked="@productCategoryInsertUpdateRequest.Status" aria-label="Status" type="checkbox" disabled />
                    <span class="slider round"></span>
                    </label>
                    </div>*@
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Product Category Image</label>
                            <div id="file-upload-form" class="uploader">
                                <label for="file-upload" id="file-drag">
                                    <img src="@productCategoryInsertUpdateRequest.Image" id="file-image" />
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    ProductCategoryInsertUpdateRequest productCategoryInsertUpdateRequest { get; set; } = new ProductCategoryInsertUpdateRequest();
    PosByIdRequest request = new PosByIdRequest();
    PosByIntIdRequest posByIntIdRequest = new PosByIntIdRequest();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal void UpdateByID(string id)
    {
        int key = 3;
        string navID = id.ToString();
        var cipheredId = GenericHelper.Encipher(navID, key);
        NavManager.NavigateTo($"/product_sub_category/update/{id}");
        StateHasChanged();
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            posByIntIdRequest.Id = Int32.Parse(Id);
            Loader = false;
            var result = await ProductCategoryHelpers.ProductSubCategoryGetById(posByIntIdRequest);
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                productCategoryInsertUpdateRequest = JsonConvert.DeserializeObject<ProductCategoryInsertUpdateRequest>(result.data);
                Title = productCategoryInsertUpdateRequest.Name;
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Product Sub Category not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Create New Product Sub Category";
            productCategoryInsertUpdateRequest = new ProductCategoryInsertUpdateRequest();
        }
    }
}
