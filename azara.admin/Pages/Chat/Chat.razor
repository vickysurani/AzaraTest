@page "/chat-list"

@using Microsoft.AspNetCore.SignalR.Client
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Chat.Request
@using azara.admin.Models.Chat.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ChatTitle</PageTitle>
<!-- Chat Section Start -->

<div class="custom-section-wrap">
    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage Chats</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>

<div class="py-5">
    <div class="row">
        <div class="col-12 mx-auto">
            <div class="chat-wrap-section">
                <div class="row">
                    <div class="col-4 col-xl-3">
                        <div class="chat-list">
                            <div class="search-panel">
                                <input class="form-control" type="text" placeholder="Search here..." @onchange="SearchData">
                            </div>
                            <div class="listing">
                                @if (chatListResponse.Details != null)
                                {
                                    @if (chatListResponse.Details.Count != 0)
                                    {
                                        @foreach (var chat in chatListResponse.Details)
                                        {
                                            <a @onclick="(() => StartChat(chat.UserId))" class="profile-chat">
                                                @if (!string.IsNullOrWhiteSpace(@chat.UserImage))
                                                {
                                                    <div class="profile-img">
                                                        <img src="@chat.UserImage" class="img-fluid" alt="Profile">
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="profile-img">
                                                        <img src="images/profileImg.jpg" class="img-fluid" alt="Profile">
                                                    </div>
                                                }
                                                <div>
                                                    <h3>@chat.UserName</h3>
                                                    <h4>@chat.UserLastMessage</h4>
                                                    @if (chat.UnReadMessageCount > 0)
                                                    {
                                                        <span class="msg-num">@chat.UnReadMessageCount</span>
                                                    }
                                                    @*@if (chat.LastMessageTime != new DateTime())
                                        {
                                        <span>@chat.LastMessageTime.ToString("HH:mm tt")</span>
                                        }*@
                                                </div>
                                            </a>
                                        }

                                    }

                                }
                            </div>
                        </div>
                    </div>
                    <!-- col -->
                    <div class="col-8 col-xl-9">

                        <div class="chat-detail-section position-relative">
                            @*<div class="chat-details-section">*@
                            <div class="chat-header">
                                @if (byIdResponse != null && chatListResponse != null && chatListResponse.Details != null && chatListResponse.Details.Count > 0)
                                {
                                    var userData = chatListResponse.Details.Where(w => w.UserId.Equals(byIdResponse.UserId)).Select(s => new { UserName = s.UserName, UserImage = s.UserImage }).FirstOrDefault();
                                    if (userData != null)
                                    {
                                        @if (!string.IsNullOrWhiteSpace(userData.UserImage))
                                        {
                                            <div class="person-img">
                                                <img src="@userData.UserImage" class="img-fluid" alt="Profile">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="person-img">
                                                <img src="images/profileImg.jpg" class="img-fluid" alt="Profile">
                                            </div>
                                        }
                                        <div>
                                            <h3>@userData.UserName</h3>
                                        </div>
                                    }
                                }
                            </div>
                            @if (!string.IsNullOrWhiteSpace(UserId))
                            {
                                @if (byIdResponse.IsNewConversation && byIdResponse.chatDetails.Count == 0)
                                {
                                    <img src="images/Conversation.png" class="img-fluid" />
                                    <h6>Start Conversation</h6>
                                }
                                @if (byIdResponse.chatDetails != null && byIdResponse.chatDetails.Count > 0)
                                {
                                    bool isDateChange = true;
                                    DateTime date = DateTime.UtcNow;
                                    <ul class="p-0 m-0 chat-section">
                                        @foreach (var store in byIdResponse.chatDetails)
                                        {
                                            if (date.Date != store.Created.Date)
                                            {
                                                date = store.Created;
                                                isDateChange = true;
                                            }

                                            if (isDateChange)
                                            {
                                                if (store.Created >= DateTime.Today)
                                                {
                                                    <li class="text-center mx-auto">Today</li>
                                                }
                                                else if (store.Created >= DateTime.Today.AddDays(-1))
                                                {
                                                    <li class="text-center mx-auto">Yesterday</li>
                                                }
                                                else
                                                {
                                                    <li class="text-center mx-auto">@store.Created.ToString("dd/MM/yy")</li>
                                                }
                                                isDateChange = false;
                                            }
                                            @if (!string.IsNullOrWhiteSpace(store.Message))
                                            {
                                                <li class="@(!@store.IsUserMessage ? "userMessage" : "adminMessage")">
                                                    <p>@store.Message</p>
                                                    <span class="time">@store.Created.ToString("HH:mm tt")</span>
                                                    <div class="position-absolute top-0">

                                                        <div class="dropdown">
                                                            @* <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="false">
                                            <span></span><span></span><span></span>
                                            </button>*@
                                                            <div class="dropdown-menu">
                                                                <a class="dropdown-item" href="#"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
                                                                <a class="dropdown-item" href="#"><i class="fa fa-times" aria-hidden="true"></i>Remove</a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                                <EditForm Model="chatInsert" OnValidSubmit="SendChat">
                                    <div class="msg-footer">
                                        <div class="position-relative w-100">
                                            <InputText @bind-Value="chatInsert.Message" class="form-control" placeholder="Write here..." id="message"></InputText>
                                            <ValidationMessage For="@(() => chatInsert.Message)" />
                                            @*<a href="javascript:void(0)" class="gallery"><img src="images/gallery-icon.svg" class="img-fluid" alt="Gallery"></a>*@
                                        </div>
                                        <button class="submit"><img src="images/submit-icon.svg" class="img-fluid" alt="Submit"></button>
                                    </div>
                                </EditForm>
                            }
                            else
                            {
                                @*<h1>Okay Done</h1>*@
                                <div class="chat-welcom-section">
                                    <h1>Welcome, Amisha !</h1>
                                </div>
                            }
                            @*</div>*@
                        </div>
                    </div>
                    <!-- col -->
                </div>
                <!-- row -->
            </div>
        </div>
    </div>
</div>
@if (Loader == true)
{
    <Loader></Loader>
}

<!-- Chat Section End -->
@code {

    public string UserId { get; set; }

    ChatListResponse chatListResponse = new ChatListResponse();
    ListRequest listRequest = new ListRequest();
    ChatGetByIdResponse byIdResponse = new ChatGetByIdResponse();
    ChatInsertRequest chatInsert = new ChatInsertRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();

    int PageSize = 10,ChatCount = 0;
    bool Loader = true;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("token");
        if (token != null && token != string.Empty && token == TokenResponse.Token)
        {
            await StartHubConnection();
            await LoadData();
            await ChatReceive();
            Loader = false;
        }
        else
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        StateHasChanged();
    }



    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;

        var result = await ChatHelpers.ChatList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                chatListResponse = JsonConvert.DeserializeObject<ChatListResponse>(result.data);
                int i = 1;
                chatListResponse.Details.ForEach(x =>
                {
                    x.SrNo = (PageSize * chatListResponse.OffSet + i);
                    i++;
                });
                if (chatListResponse.Details.Count != 0)
                {
                    pagingParameter.TotalCount = chatListResponse.Total;
                    pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                    pagingParameter.PageNumber = chatListResponse.OffSet + 1;
                    pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                    pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                    pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                    pagingParameter.ShowFooter = true;
                    pagingParameter.ShowPageNumber = true;
                }
                else
                {
                    pagingParameter.ShowFooter = false;
                    pagingParameter.ShowPageNumber = false;
                    pagingParameter.TotalCount = 0;
                }

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
        }
        Loader = false;
        StateHasChanged();
    }

    private async Task LoadChat()
    {
        if (string.IsNullOrWhiteSpace(UserId))
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User chat not found!");
            return;
        }
        var result = await ChatHelpers.ChatbyId(new BaseRequiredIdRequest { Id = new(UserId), IsAdmin = true });
        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            byIdResponse = JsonConvert.DeserializeObject<ChatGetByIdResponse>(result.data);
        }
        else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            Loader = false;
            UserId = string.Empty;
            if (result.meta.message[0].Contains("error_chat_not_found"))
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User chat not found!");
                NavManager.NavigateTo("/chat-list");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                return;
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
        chatInsert.Message = string.Empty;
        await LoadData();
        await JsRuntime.InvokeVoidAsync("scrollDown");
        Loader = false;
    }

    private async Task StartChat(string id)
    {
        UserId = id;
        await LoadChat();
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("scrollDown");
    }

    private async void SearchData(ChangeEventArgs e)
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            listRequest.Name = e.Value.ToString().Trim();
            await LoadData();
        }
        else
        {
            listRequest.Name = string.Empty;
            await LoadData();
        }
        Loader = false;
        StateHasChanged();
    }

    private async Task SendChat()
    {
        if (string.IsNullOrWhiteSpace(UserId))
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "User chat not found!");
            return;
        }

        if (string.IsNullOrWhiteSpace(chatInsert.Message))
            return;

        chatInsert.UserId = new(UserId);
        var adminId = await localStorage.GetItemAsync<string>("adminId");
        if (!string.IsNullOrWhiteSpace(adminId))
        {
            chatInsert.AdminId = new(adminId);
        }
        else
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        var result = await ChatHelpers.ChatInsertApi(chatInsert);
        if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
        {
            await LoadData();
            await LoadChat();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
        chatInsert.Message = string.Empty;
    }

    private HubConnection hubConnection;


    private async Task StartHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri($"{ApiEndPointConsts.BaseRouteWithoutVersion}azara_api_notifications", UriKind.Absolute))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        //if (IsConnected)
        //    await JsRuntime.InvokeAsync<string>("console.log", "SignalR Connected");
        StateHasChanged();
    }

    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async Task ChatReceive()
    {
        try
        {
            hubConnection.On<dynamic>("admin_chat", (data) =>
            {
                string encodedMsg = $"{data}";
                if (!string.IsNullOrWhiteSpace(encodedMsg))
                {
                    var chatReceive = JsonConvert.DeserializeObject<ChatReceive>(encodedMsg);
                    if (chatReceive != null)
                    {
                        if (chatReceive.Id.Equals(new(UserId)) && !string.IsNullOrWhiteSpace(chatReceive.Message))
                        {
                            AddChatData(chatReceive.Message);
                        }
                        LoadData();
                    }
                }
            });
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>("console.log", $"SignalR disconnected by error. Error is : {ex.Message}");
        }
    }

    private async Task AddChatData(string message)
    {
        ChatCount++;
        byIdResponse.chatDetails.Add(new ChatDetail
            {
                Created = DateTime.UtcNow,
                IsUserMessage = true,
                Message = message,
                UnseenCount = ChatCount
            });
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("scrollDown");
    }
}
