@page "/old-chat-list"
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Chat.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ChatTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
   <!--******************* Middle Section Start ******************-->
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title">
                <h2 class="d-lg-block d-none">Chat Section</h2>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <h2 class="d-lg-none d-block mt-3">Manage Product</h2>
    <div class="data-table-area">
        <div class="filter-area justify-space-between align-item-center">
            <!-- <div class="result-filter">
                <p>Showing <b>10</b> from <b>100</b> results</p>
              </div> -->
            <div class="head-topbar-search">
                <i class="fa fa-search" aria-hidden="true"></i>
                <input type="text" class="form-custom" placeholder="Search" value="@listRequest.Name" @onchange="SearchData" />
                <i class="fa fa-times" aria-hidden="true"></i>
            </div>
            @*<div class="search-box">
        <input type="search" class="form-control" placeholder="Search" />
        <i class="fa fa-times" aria-hidden="true"></i>
        </div>*@

        </div>
        <div class="data-table">
            <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>

            <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
                <thead>
                    <tr>
                        <th scope="col">Sr No</th>
                        <th>Profile Image</th>
                        <th>
                            Name
                        </th>
                        <th>
                            LastMessage
                        </th>
                        <th>
                            UnReadMessage
                        </th>
                        <th>
                            Action
                        </th>

                    </tr>
                </thead>
                @if (chatListResponse.Details != null)
                {
                    @if (chatListResponse.Details.Count != 0)
                    {
                        @foreach (var chat in chatListResponse.Details)
                        {
                            <tbody>
                                <tr>
                                    <td>@chat.SrNo</td>
                                    <td>
                                        @if (!string.IsNullOrWhiteSpace(@chat.UserImage))
                                        {
                                            <img src="@chat.UserImage" class="imageThumbnail" />
                                        }
                                        else
                                        {
                                            <p>No Image</p>
                                        }
                                    </td>
                                    <td>@chat.UserName</td>
                                    <td>@chat.UserLastMessage</td>
                                    <td>@chat.UnReadMessageCount</td>
                                    <td>
                                        <div class="view-btn btn">
                                            <NavLink href="chat" class="btn btn-info"><img src="images/eye-ic.png" alt="eye-ic" /></NavLink>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center text-danger" colspan=7><h4>No Data Found</h4></td>
                        </tr>
                    }
                }

            </table>
            <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
        </div>
        <p>
            @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
        </p>
    </div>
    <!-- Modal Content-->
}

@code {
    protected string DeleteProductId { get; set; }
    protected string DeleteProductItem { get; set; }
    ChatListResponse chatListResponse = new ChatListResponse();
    ListRequest listRequest = new ListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();

    int PageSize = 10;
    bool Loader = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }


    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;

        var result = await ChatHelpers.ChatList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                chatListResponse = JsonConvert.DeserializeObject<ChatListResponse>(result.data);
                int i = 1;
                chatListResponse.Details.ForEach(x =>
                {
                    x.SrNo = (PageSize * chatListResponse.OffSet + i);
                    i++;
                });
                if (chatListResponse.Details.Count != 0)
                {
                    pagingParameter.TotalCount = chatListResponse.Total;
                    pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                    pagingParameter.PageNumber = chatListResponse.OffSet + 1;
                    pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                    pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                    pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                    pagingParameter.ShowFooter = true;
                    pagingParameter.ShowPageNumber = true;
                }
                else
                {
                    pagingParameter.ShowFooter = false;
                    pagingParameter.ShowPageNumber = false;
                    pagingParameter.TotalCount = 0;
                }

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message}");
        }
        Loader = false;
        StateHasChanged();
    }

    private void UpdateByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/chat");
        }
        else
        {
            DeleteProductId = id;
        }

        StateHasChanged();
    }



    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async void SearchData(ChangeEventArgs e)
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            listRequest.Name = e.Value.ToString().Trim();
            await LoadData();
        }
        else
        {
            listRequest.Name = string.Empty;
            await LoadData();
        }
        Loader = false;
        StateHasChanged();
    }

    public async void SortBy(string sortBy)
    {
        if (!String.IsNullOrEmpty(listRequest.SortBy))
        {
            string[] search = listRequest.SortBy.Split('_');
            if (sortBy.Equals(search.First()))
                listRequest.SortBy = listRequest.SortBy.Contains("desc") ? listRequest.SortBy.Replace("desc", "asc") : listRequest.SortBy.Replace("asc", "desc");
            else
                listRequest.SortBy = $"{sortBy}_asc";
        }
        else
            listRequest.SortBy = $"{sortBy}_asc";

        await LoadData();
    }
}
