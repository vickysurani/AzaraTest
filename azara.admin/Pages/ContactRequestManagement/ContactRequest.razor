@page "/contact-request"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.ContactRequest.Response
@using azara.admin.Models.Product.Request
@using azara.admin.Models.Product.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const

<PageTitle>@AdminTitleModel.ContactUsTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <!--******************* Middle Section Start ******************-->
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title">
                <h2 class="d-lg-block d-none">Manage Contact Request</h2>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <h2 class="d-lg-none d-block mt-3">Manage Product</h2>
    <div class="data-table-area">
        <div class="filter-area align-item-center">

            <div class="head-topbar-search">
                <i class="fa fa-search" aria-hidden="true"></i>
                <input type="text" class="form-custom" placeholder="Search" @bind-value="@listRequest.Name" />
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="SearchData">Search</a>
                </div>
            </div>
            <div class="justify-end flex-column flex-md-row ml-1">

                <div class="add-btn">
                    <a class="text-white cursor-pointer m-0" @onclick="Clear">Clear</a>
                </div>
            </div>
        </div>
        <div class="data-table">
            <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>

            <table id="table-1" class="table product-custom-table store-cate-table" style="width:100%">
                <thead>
                    <tr>
                        <th scope="col">Sr No</th>
                        <th>User Nane</th>
                        <th>Email Id</th>
                        <th class="action">Action</th>
                    </tr>
                </thead>
                @if (contactResponse.Details != null)
                {
                    @if (contactResponse.Details.Count != 0)
                    {
                        @foreach (var data in contactResponse.Details)
                        {
                            <tbody>
                                <tr>
                                    <td>@data.SrNo</td>
                                    <td>@data.Name</td>
                                    <td>@data.EmailId</td>
                                    <td>
                                        <div class="view-btn btn">
                                            <NavLink @onclick='e => GetByID(data.Id, "view")' class="btn btn-info"><img src="images/eye-ic.png" alt="eye-ic" /></NavLink>
                                        </div>
                                        <div class="view-btn delete-btn btn">
                                            <a @onclick="(() => GetByID(data.Id))" data-toggle="modal" data-target="#donate-modal">
                                                <img src="images/delete-ic.png" alt="delete-ic" />
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="text-center text-danger" colspan=7><h4>No Data Found</h4></td>
                        </tr>
                    }
                }

            </table>
            <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
        </div>
        <p>
            @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
        </p>
    </div>
    <!-- Modal Content-->
    <div class="modal donate-modal" id="donate-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Contact Request</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="donate-blk del-img">
                        <img src="images/delete-ico.svg" alt="delete-ico" />
                        <h6>Are you sure you want to delete this @(DeleteContactRequest) Contact Request?</h6>
                        <div class="d-flex justify-content-center">
                            <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                            <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@code {

    protected string DeleteContactRequestId { get; set; }
    protected string DeleteContactRequest { get; set; }
    ContactResponse contactResponse = new ContactResponse();
    ListRequest listRequest = new ListRequest();
    public PagingParameter pagingParameter { get; set; } = new PagingParameter();

    int PageSize = 10;
    bool Loader = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }



    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;
        listRequest.PageNo = pageNumber;
        listRequest.PageSize = pagingParameter.PageSize = PageSize;

        var result = await ContactRequestHelpers.ContactRequestList(listRequest);
        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                contactResponse = JsonConvert.DeserializeObject<ContactResponse>(result.data);
                int i = 1;
                contactResponse.Details.ForEach(x =>
                {
                    x.SrNo = (PageSize * contactResponse.OffSet + i);
                    i++;
                });
                if (contactResponse.Details.Count != 0)
                {
                    pagingParameter.TotalCount = contactResponse.Total;
                    pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                    pagingParameter.PageNumber = contactResponse.OffSet + 1;
                    pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                    pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                    pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                    pagingParameter.ShowFooter = true;
                    pagingParameter.ShowPageNumber = true;
                }
                else
                {
                    pagingParameter.ShowFooter = false;
                    pagingParameter.ShowPageNumber = false;
                    pagingParameter.TotalCount = 0;
                }

            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {

            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
        }
        Loader = false;
        StateHasChanged();
    }

    private void GetByID(string id, string value = null)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (value.Equals("view"))
                NavManager.NavigateTo($"/contact-request-view/{cipheredId}");
        }
        else
        {
            DeleteContactRequestId = id;
        }

        StateHasChanged();
    }

    private async Task OnConfirmationChange(bool value)
    {
        if (!string.IsNullOrWhiteSpace(DeleteContactRequestId) && value)
        {
            try
            {
                var result = await ContactRequestHelpers.DeleteContactRequest(new BaseIdRequest { Id = new(DeleteContactRequestId) });
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted ContactRequest!");
                NavManager.NavigateTo("contact-request");

            }
            catch (Exception)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                return;
            }
        }
    }

    internal async void SetPage(int pagenumber)
    {
        await LoadData(pagenumber - 1);
    }

    #region Change Page Size
    public async void ChangePageSize(int pageSize)
    {
        PageSize = pageSize;
        pagingParameter.PageSize = pageSize;
        await LoadData();
    }
    #endregion

    private async void SearchData()
    {
        Loader = true;
        listRequest.Name = (listRequest.Name ?? string.Empty).Trim();

        await LoadData();

        Loader = false;
        StateHasChanged();
    }

    public async void Clear()
    {
        listRequest.Name = string.Empty;
        listRequest = new ListRequest();
        await LoadData();

    }
}
