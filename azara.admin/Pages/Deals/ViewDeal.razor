@page "/deal/view/{Id}"
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Advertisement.Request
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Const
@using azara.models.Responses.Dropdown
@using azara.models.Responses.Product

<PageTitle>@AdminTitleModel.AdvertisementTitle</PageTitle>
@*
//@if (Loader)
{
    <Loader></Loader>
}
else
{*@
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">View Deal : </h2><h4 class="ms-1">@Title</h4>
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>


    <div class="data-table-area">
        <div class="gray-bg">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a @onclick='e => UpdateByID(Id)' class="cancel-btn btn text-light">Edit</a>
                    <a href="/deal">Cancel</a>
                </div>
            </div>
            <form class="form-details m-t-15">
                <div class="row form-details-box">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Deal Name</label>
                            <p>@ViewResponse.Title</p>
                        </div>
                        <div class="form-group">
                            <label>Deal URL</label>
                            <p>@ViewResponse.Url</p>
                        </div>
                        <div class="form-group">
                            <label>Deal Position</label>
                            <p>@ViewResponse.Position</p>
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <p>@ViewResponse.Description</p>
                        </div>
                        <div class="form-group">
                            <label>Stores</label>
                           @foreach (var store in ViewResponse.StoreDetails)
                           {
                                <p>@store.Name</p>

                           }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Advertisement Image</label>
                            <div class="row">
                                <div class="col-md-4 my-2 mx-1">
                                    <div class="room-image" style="background: url('@ViewResponse.BannerImage') 50% 50%; ">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
@*}*@

@code {

    [Parameter]
    public string Id { get; set; }

    private bool Loader { get; set; } = true;
    public string Title { get; set; }
    DealInsertUpdateRequest ViewResponse { get; set; } = new DealInsertUpdateRequest();
    List<StoreDropDownResponse> StoreList { get; set; } = new();
    private List<string> StoreName { get; set; } = new();
    private string LocationDetail { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(LocationDetail))
        {
            var dropDownList = await ProductHelpers.GetStoreProductCategory(new LocationDetailRequest { LocationDetail = LocationDetail });
            if (dropDownList.meta.statusCode == StatusCodeConsts.Success)
            {
                var dropDownData = JsonConvert.DeserializeObject<StoreProductCategoryResponse>(dropDownList.data);
                StoreList = dropDownData.StoreList;
            }
        }
        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            ViewResponse.Id = Id;
            Loader = false;
            var result = await AdvertisementHelpers.GetAdvertisementItem(new DealIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                ViewResponse = JsonConvert.DeserializeObject<DealInsertUpdateRequest>(result.data);
                if (ViewResponse != null)
                {
                    Title = ViewResponse.Title;
                    StoreName = JsonConvert.DeserializeObject<List<string>>(ViewResponse.StoreId);
                    StoreName = StoreList.Where(w => StoreName.Contains(w.Id)).Select(s => s.Name).ToList();
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Advertisement not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong");
                return;
            }
        }
    }

    internal void UpdateByID(string id)
    {
        int key = 3;
        var cipheredId = GenericHelper.Encipher(id, key);
        NavManager.NavigateTo($"/deal/update/{cipheredId}");
        StateHasChanged();
    }
}
