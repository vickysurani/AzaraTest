@page "/deal/insert"
@page "/deal/update/{Id}"

@using System.Text.Json.Nodes
@using azara.admin.Helpers.Generic
@using azara.admin.Models.Advertisement.Request
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.Const
@using azara.models.Responses.Dropdown
@using azara.models.Responses.Product

<PageTitle>@AdminTitleModel.AdvertisementTitle</PageTitle>

@if (Loader)
{
    <Loader></Loader>
}
else
{
    <div class="custom-section-wrap">
        <div class="d-flex justify-space-between align-item-center">
            <div class="page-title justify-content-center align-item-center">
                <h2 class="d-lg-block d-none">@(!string.IsNullOrWhiteSpace(Id) ? "Update Deal : " : "Add Deal")</h2>
                @if (!string.IsNullOrWhiteSpace(Id))
                {
                    <h4 class="ms-1">@Title</h4>
                }
                <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
            </div>
            <AdminProfile></AdminProfile>
        </div>
    </div>
    <div class="data-table-area">
        <EditForm class="form-details m-t-15" Model="insertUpdateRequest" OnValidSubmit="AddUpdateData">
            <div class="filter-area justify-end align-item-center">
                <div class="add-btn">
                    <a href="/deal" class="cancel-btn">Cancel</a>
                    <input type="submit" value="Submit" />
                </div>
            </div>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Title</label>
                        <InputText class="form-control without-ic" placeholder="Enter Deal Title" @bind-Value=insertUpdateRequest.Title aria-describedby="namelabel" aria-label="AdvertisementTitle" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Title)" />
                    </div>
                    <div class="form-group">
                        <label>URL</label>
                        <InputText class="form-control without-ic" placeholder="URL" @bind-Value=insertUpdateRequest.Url aria-describedby="urllabel" aria-label="url" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Url)" />
                    </div>
                    <div class="form-group">
                        <label>Position</label>
                        <InputText class="form-control without-ic" placeholder="Position" @bind-Value=insertUpdateRequest.Position aria-describedby="eventstarttimelabel" aria-label="position" onkeypress="return ((event.charCode >= 48 && event.charCode <= 57) || event.charCode == 13 || event.charCode == 190)" maxlength="100000000" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Position)" />
                    </div>
                    <div class="dropdown">
                        <label>Store</label>
                        <button class="btn btn-secondary dropdown-toggle" type="button"
                            id="sampleDropdownMenu" data-toggle="dropdown">
                            Select Store
                        </button>
                        <div class="form-group position-static m-0">
                            <ul class="dropdown-menu checkbox-menu allow-focus">
                                <li>
                                    <label>
                                        Choose Nearest Store
                                    </label>
                                </li>
                                @foreach (var store in StoreList.Where(w => w.IsLocationFound))
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" id="checkId" checked='@(!string.IsNullOrWhiteSpace(insertUpdateRequest.StoreId) && insertUpdateRequest.StoreId.Contains(store.Id))' @onchange="(() => SetStoreData(store.Id))" /> @store.Name
                                        </label>
                                    </li>
                                }
                                <li>
                                    <label>
                                        Choose Other Store
                                    </label>
                                </li>
                                @foreach (var store in StoreList.Where(w => !w.IsLocationFound))
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" id="checkId" checked='@(!string.IsNullOrWhiteSpace(insertUpdateRequest.StoreId) && insertUpdateRequest.StoreId.Contains(store.Id))' @onchange="(() => SetStoreData(store.Id))" /> @store.Name
                                        </label>
                                    </li>
                                }
                            </ul>
                            <ValidationMessage For="@(() => insertUpdateRequest.StoreId)" />
                        </div>
                    </div>
                    <div class="form-group store-form-group">
                        @foreach (var store in SelectedStoreIds)
                        {
                            <div class="col-md-3 my-2 position-relative">
                                <div class="border" id="checkId">
                                    <span>
                                        @(StoreList.FirstOrDefault(f => f.Id.Equals(store))?.Name)
                                    </span>
                                </div>
                                <button type="button" class="delete-Storea file-close-btn" @onclick="(() => DeleteStoreData(store))">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea type="text" class="form-control without-ic" placeholder="Enter Description" @bind-Value=insertUpdateRequest.Description aria-describedby="descriptionlabel" aria-label="Description" />
                        <ValidationMessage For="@(() => insertUpdateRequest.Description)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Deal Image</label>
                    <div id="file-upload-form" class="uploader">
                        <InputFile id="file-upload" type="file" name="fileUpload" accept="image/*" OnChange="HandleImageUpload" />
                        <ValidationMessage For="@(() => insertUpdateRequest.BannerImage)" />
                        <label for="file-upload" id="file-drag">
                            @if (!string.IsNullOrWhiteSpace(insertUpdateRequest.BannerImage))
                            {
                                <button type="button" class="file-close-btn" @onclick="DeleteImage">
                                    <i class="fa fa-times" aria-hidden="true"></i>
                                </button>
                            }
                            <img id="file-image" src="@insertUpdateRequest.BannerImage" alt="" class="@((string.IsNullOrEmpty(insertUpdateRequest.BannerImage)? "hidden" : ""))" @bind-Value="insertUpdateRequest.BannerImage" @bind-Value:event="OnInput">
                            <div id="start">
                                @*<img src="images/choose-file.png" class="file-img" alt="file-img">*@
                                <i class="fa fa-upload" aria-hidden="true"></i>
                                <div>Drag & Drop Here or </div>
                                <div id="notimage" class="hidden">Please select an image</div>
                                <a id="file-upload-btn" class="">CHoose a file</a>
                                <p class="second-theme-color">max. 2GB</p>
                            </div>
                            <div id="response" class="hidden d-none">
                                <div id="messages"></div>
                                <progress class="progress" id="file-progress" value="0">
                                    <span>0</span>%
                                </progress>
                            </div>
                        </label>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }
    DealInsertUpdateRequest insertUpdateRequest = new DealInsertUpdateRequest();
    BaseIdRequest baseIdRequest = new BaseIdRequest();
    private string StoreName { get; set; }
    BaseImageUploadRequest baseImageUpload { get; set; } = new();
    List<StoreDropDownResponse> StoreList { get; set; } = new();
    List<string> SelectedStoreIds { get; set; } = new();
    ListRequest listRequest = new ListRequest();


    private bool Loader { get; set; } = true;
    public string Title { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                var location = await JsRuntime.InvokeAsync<JsonArray>("getCoords");
                if (location != null)
                {
                    await localStorage.SetItemAsync("locationDetail", location.ToString());
                    listRequest.LocationDetail = location.ToString();
                }
                await LoadData();
                Loader = false;
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        Loader = true;
        if (!string.IsNullOrWhiteSpace(listRequest.LocationDetail))
        {
            var dropDownList = await ProductHelpers.GetStoreProductCategory(new LocationDetailRequest { LocationDetail = listRequest.LocationDetail });
            if (dropDownList.meta.statusCode == StatusCodeConsts.Success)
            {
                var dropDownData = JsonConvert.DeserializeObject<StoreProductCategoryResponse>(dropDownList.data);
                StoreList = dropDownData.StoreList;
            }
        }

        if (!string.IsNullOrWhiteSpace(Id))
        {
            Id = GenericHelper.Decipher(Id, 3);
            insertUpdateRequest.Id = new(Id);
            Loader = false;
            var result = await AdvertisementHelpers.GetAdvertisementItem(new DealIdRequest { Id = new(Id) });
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                insertUpdateRequest = JsonConvert.DeserializeObject<DealInsertUpdateRequest>(result.data);
                if (insertUpdateRequest != null)
                {
                    Title = insertUpdateRequest.Title;
                    SelectedStoreIds = JsonConvert.DeserializeObject<List<string>>(insertUpdateRequest.StoreId);
                }
            }
            else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Advertisement not found");
                return;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
                return;
            }
        }
        else
        {
            Loader = false;
            Title = "Add New Deal";
            insertUpdateRequest = new DealInsertUpdateRequest();
        }
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        Loader = true;
        if (SelectedStoreIds != null && SelectedStoreIds.Count > 0)
        {
            insertUpdateRequest.StoreId = JsonConvert.SerializeObject(SelectedStoreIds);
        }
        else
        {
            Loader = false;
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the store!");
            return;
        }

        insertUpdateRequest.Id = !string.IsNullOrWhiteSpace(Id) ? new(Id) : null;
        var result = await AdvertisementHelpers.AdvertisementAddUpdateApi(insertUpdateRequest);

        if (result.meta.statusCode == 401)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            Loader = false;
            if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
            {
                if (!string.IsNullOrWhiteSpace(insertUpdateRequest.Id))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Advertisement Updated Successfully!");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Advertisement Added Successfully!");
                }
                NavManager.NavigateTo("/deal");
            }
            else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
            {
                if (result.meta.message[0].Contains("Advertisement not found"))
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Advertisement not found");
                    if (!string.IsNullOrWhiteSpace(insertUpdateRequest.Id))
                        NavManager.NavigateTo("/deal/insert");
                    else
                        NavManager.NavigateTo($"/deal/update/{insertUpdateRequest.Id}");
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
                    return;
                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
            return;
        }
    }

    int imageCount = 12;
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = insertUpdateRequest.ImageList != null && insertUpdateRequest.ImageList.Any() ? insertUpdateRequest.ImageList : new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg")
                    {
                        var files = e.GetMultipleFiles(imageCount).ToList();
                        List<string> imageList = new List<string>();
                        if (files != null && files.Count > 0)
                        {
                            foreach (var item in files)
                            {
                                var fileRequest = new FileNewInsertUploadRequest { File = new List<IBrowserFile> { item }, FileName = new List<string> { item.Name }, FolderName = BlobContainerConsts.Deals, OldFileName = insertUpdateRequest.ImageList };

                                var result = await CommonHelpers.UploadNewFileApi(fileRequest);

                                if (result != null)
                                {
                                    FileListResponse response = JsonConvert.DeserializeObject<FileListResponse>(result.data);

                                    if (response != null && response.Details != null && response.Details.Count > 0)
                                    {
                                        imageList.Add(response.Details.FirstOrDefault().FilePath);
                                    }
                                    insertUpdateRequest.BannerImage = response.Details[0].FilePath;

                                }
                            }
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Please select the .jpg, .png & .jpeg images");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", ex.Message);
            return;
        }
    }

    private async Task DeleteImage()
    {
        insertUpdateRequest.BannerImage = new CommonHelpers(FileUpload).DeleteImage(insertUpdateRequest.BannerImage);
    }

    private void SetStoreData(string storeId)
    {
        if (SelectedStoreIds.Contains(storeId))
            SelectedStoreIds.Remove(storeId);
        else
            SelectedStoreIds.Add(storeId);
    }

    private async void DeleteStoreData(string storeId)
    {
        SelectedStoreIds.Remove(storeId);
        await JsRuntime.InvokeVoidAsync("uncheck");
        StateHasChanged();

    }
}
