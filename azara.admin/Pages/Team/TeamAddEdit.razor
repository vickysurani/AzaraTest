@page "/AddTeam"
@using System.Text.RegularExpressions;
@using azara.admin.Helpers.Generic;
@using azara.admin.Models.TeamManagement.Request;
@using azara.admin.Models.TeamManagement.Response;

@if (Loader)
{
    <Loader></Loader>
}
else
{
@*<div class="bg-white-wrap common-bg-white pb-0">
    <div class="row">
    <div class="col-12 col-md-6 col-lg-4">
    <h6>Team</h6>
    <h5>Sub Admin</h5>
    </div>
    <div class="col-12 col-md-6 col-lg-4">
    <h6>Modified By</h6>
    <h5>Amisha</h5>
    </div>
    </div>
    </div>*@
<EditForm Model="@teamInsertRequest" OnValidSubmit="AddUpdateData">
    <DataAnnotationsValidator />
    <div class="custom-check-list-section">
        <div class="bg-white-wrap common-bg-white pb-0">
            <div class="row">
                <div class="col-12 col-md-6 col-lg-4">
                    <h6>Team Name</h6>
                    <input type="text" @bind-value=@teamInsertRequest.Name class="form-control" placeholder="Team Name">
                    <div class="filter-area justify-end align-item-center">
                        <div class="add-btn">
                            <a href="/teamlist" class="cancel-btn">Cancel</a>
                            <input type="submit" value="Submit" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="common-bg-white px-3">
            <h2>Applied Permissions <small>(Preview Only)</small></h2>
            <ul class="check-listing-wrap m-0 p-0">
                @if (teamInsertRequest.MenuList != null)
                {
                    int menuid = 1;
                    @foreach (var mainmenu in teamInsertRequest.MenuList)
                    {
                        if (mainmenu.defaultPermissionCsv != null)
                        {
                            string[] defaultPermission = mainmenu.defaultPermissionCsv.Split(',');
                        }
                        <li class="d-flex">
                            @if (mainmenu.isSelected == true)

                            {
                                <div class="custom-border d-flex align-items-center justify-content-center mr-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked name="@mainmenu.name" id="@mainmenu.name" @onclick="((x) => MainMenuChange(mainmenu, !mainmenu.isSelected))">
                                    </div>
                                </div>
                                <div class="custom-border d-flex align-items-center w-100">
                                    <h5>@mainmenu.name</h5>
                                    @if (mainmenu.defaultPermissionCsv != null)
                                    {
                                        string[] temp = mainmenu.defaultPermissionCsv.Split(",");
                                        @for (int i = 0; i < temp.Length; i++)
                                        {
                                            var Value = temp[i];
                                            bool Checked = false;
                                            if (mainmenu.permissionCsv != null)
                                            {
                                                if (Regex.IsMatch(mainmenu.permissionCsv, $@"\b{Value}\b", RegexOptions.IgnoreCase))
                                                {
                                                    Checked = true;
                                                }
                                            }
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" checked=@Checked id=@mainmenu.name-@Value @onchange="eventArgs => { CheckboxClicked(mainmenu, Value, eventArgs.Value);}">
                                                <label class="form-check-label" for=@mainmenu.name-@Value>
                                                    @Regex.Replace(Value, "([A-Z])", " $1").Trim()
                                                </label>
                                            </div>

                                        }

                                    }

                                </div>
                            }

                            else
                            {
                                <div class="custom-border d-flex align-items-center justify-content-center mr-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="" id="defaultCheck0">
                                    </div>
                                </div>
                                <div class="custom-border d-flex align-items-center w-100">
                                    <h5>@mainmenu.name</h5>
                                    @if (mainmenu.defaultPermissionCsv != null)
                                    {
                                        string[] temp = mainmenu.defaultPermissionCsv.Split(",");
                                        @for (int i = 0; i < temp.Length; i++)
                                        {
                                            var Value = temp[i];
                                            bool Checked = false;

                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id=@mainmenu.name-@Value @onchange="eventArgs => { CheckboxClicked(mainmenu, Value, eventArgs.Value);}">
                                                <label class="form-check-label" for=@mainmenu.name-@Value>
                                                    @Regex.Replace(Value, "([A-Z])", " $1").Trim()
                                                </label>
                                            </div>
                                        }

                                    }

                                </div>
                            }
                        </li>

                    }
                }
            </ul>
        </div>
    </div>
</EditForm>

}


@code {

    [Parameter]
    public string Id
    {
        get; set;
    }

    TeamInsertRequest teamInsertRequest = new TeamInsertRequest();
    DefaultPermissions defaultPermissions = new DefaultPermissions();
    BaseIdResponse baseIdResponse = new BaseIdResponse();
    public bool SubmitButton = false, TableLoader = false, SearchFormLoader = false, IsUpdate = false;
    string SearchBy = string.Empty, DefalutPermissionActions;
    public string Permission = string.Empty, token = string.Empty;
    private bool IsDisable = false, Loader = true;

    protected override async Task OnInitializedAsync()
    {
        Loader = false;
        var token = await localStorage.GetItemAsync<string>("token");
        TokenResponse.Token = token;
        await DefaultPermission();
        Loader = true;
    }




    internal async Task DefaultPermission()
    {

        var result = await TeamHelper.GetTeamsDefaultPermission(TokenResponse.Token);
        if (result.meta.statusCode == 401)
        {
            await localStorage.SetItemAsync("token", "");
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == 200)
            {
                defaultPermissions = JsonConvert.DeserializeObject<DefaultPermissions>(result.data);
                teamInsertRequest.MenuList = defaultPermissions.details;
                var menu = defaultPermissions.details;
            }

        }

        SubmitButton = false;
        StateHasChanged();
    }

    public void MainMenuChange(Detail MainMenu, bool isSelected = false)
    {
        if (isSelected)
        {

            MainMenu.isSelected = isSelected;
            MainMenu.permissionCsv = MainMenu.defaultPermissionCsv;
            StateHasChanged();
        }
        else
        {
            MainMenu.isSelected = isSelected;
            MainMenu.permissionCsv = null;
            StateHasChanged();
        }
    }

    public void CheckboxClicked(Detail menu, string name, object aChecked)
    {
        List<string> PermissionArray = new List<string>();
        if (menu.permissionCsv == menu.defaultPermissionCsv && (bool)aChecked)
            menu.permissionCsv = null;
        if (menu.permissionCsv != null)
        {
            string[] PermissionString = menu.permissionCsv.Split(",");
            foreach (var item in PermissionString)
            {
                PermissionArray.Add(item);
            }
        }
        if ((bool)aChecked)
        {
            PermissionArray.Add(name);
        }
        else
        {
            if (PermissionArray.Contains(name))
            {
                PermissionArray.Remove(name);
                if (!PermissionArray.Any() || PermissionArray.First() == "")
                    menu.isSelected = false;
                else
                    menu.isSelected = true;
            }
        }
        menu.permissionCsv = String.Join(",", PermissionArray.Select(x => x.ToString()).ToArray());
        if (menu.permissionCsv == menu.defaultPermissionCsv || !string.IsNullOrWhiteSpace(menu.permissionCsv))
            menu.isSelected = true;
        StateHasChanged();
    }

    internal async Task AddUpdateData()
    {
        IsDisable = true;
        List<Detail>
            mainmenu = teamInsertRequest.MenuList.FindAll(mainmenu => mainmenu.isSelected == true).ToList();

        if (mainmenu != null)
        {
            foreach (var menu in mainmenu)
            {
                if (menu.isChild == true)
                {
                    menu.menuList = menu.menuList.FindAll(menu => menu.isSelected == true).ToList();

                    bool IsSubmenu = menu.menuList.Any(menu => menu.isSelected == true);

                    if (IsSubmenu)
                    {
                        foreach (var submenu in menu.menuList)
                        {
                            if (submenu.isChild)
                                submenu.menuList = submenu.menuList.FindAll(submenu => submenu.isSelected == true).ToList();
                        }
                    }
                }
            }
        }

        if (mainmenu.Count == 0)
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"smothing went wrong");

        else
        {
            teamInsertRequest.MenuList = mainmenu;
            dynamic result = null;

            teamInsertRequest.Name = (teamInsertRequest.Name).Trim();
            result = await TeamHelper.TeamAdd(teamInsertRequest, TokenResponse.Token);


            if (result.meta.statusCode == 401)
            {
                await localStorage.SetItemAsync("token", "");
                NavManager.NavigateTo("/");
            }
            else
            {
                if (result.meta.statusCode == 200)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"Team added Succsesfully");
                    NavManager.NavigateTo("/teamlist");


                }
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"smothing went wrong");

            }
        }
        IsDisable = false;
        StateHasChanged();
    }
}
