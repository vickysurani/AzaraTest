@page "/teamlist"

@using azara.admin.Helpers.Generic
@using azara.admin.Models.Base.Request
@using azara.admin.Models.Base.Response
@using azara.admin.Models.ProductCategory.Response
@using azara.admin.Models.Shared
@using azara.admin.Models.Const
@using azara.admin.Models.TeamManagement.Response;

<PageTitle>@AdminTitleModel.TeamTitle</PageTitle>

<!--******************* Middle Section Start ******************-->
<div class="custom-section-wrap">

    <div class="d-flex justify-space-between align-item-center">
        <div class="page-title">
            <h2 class="d-lg-block d-none">Manage Team</h2>
            <span onclick="openNav()" class="d-lg-none d-block"><i class="fa fa-bars"></i></span>
        </div>
        <AdminProfile></AdminProfile>
    </div>
</div>

<h2 class="d-lg-none d-block mt-3">Manage Team</h2>
<div class="data-table-area">
    <div class="filter-area align-item-center">

        <div class="head-topbar-search">
            <i class="fa fa-search" aria-hidden="true"></i>
            <input type="text" class="form-custom" placeholder="Search" @*@bind-value="@listRequest.Name" *@ />
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @*@onclick="SearchData" *@>Search</a>
            </div>
        </div>
        <div class="justify-end flex-column flex-md-row ml-1">

            <div class="add-btn">
                <a class="text-white cursor-pointer m-0" @*@onclick="Clear" *@>Clear</a>
            </div>
        </div>

        <div class="justify-end flex-column flex-md-row ml-auto mr-0">

            <div class="add-btn">
                <a href="/AddTeam">Add Team</a>
            </div>
        </div>
    </div>
    
        <CountDropdown ParentPagingSizeParameter="@pagingParameter.PageSize" ChangePageSize="ChangePageSize"></CountDropdown>

        <div class="data-table">
            <table id="table-1" class="table product-custom-table store-cate-table store-cate-table" style="width:100%">
                <thead>
                    <tr>
                        <th scope="col">Sr No</th>
                        <th>Name</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (teamListResponse.details != null)
                    {
                        @if (teamListResponse.details.Count != 0)
                        {
                            int srNum = 1;

                            @foreach (var team in teamListResponse.details)
                            {
                                <tr>
                                    <th scope="row">@team.SrNo</th>
                                    <td>@team.name</td>
                                <td>
                                    <div class="view-btn btn">
                                        <NavLink @onclick='e => UpdateByID(team.id, "view")' class="btn btn-info"><img src="images/eye-ic.png" alt="eye-ic" /></NavLink>
                                    </div>
                                </td>
                                    
                                </tr>
                                srNum++;

                            }
                        }
                        else
                        {
                            <tr>
                                <td class="text-center text-danger" colspan=8><h4>No Data Found</h4></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <Pagination ParentpagingParameter="pagingParameter" PageNumber="pagingParameter.PageNumber" SetPageChanged="SetPage"></Pagination>
        </div>
        <p>
            @($"Showing {pagingParameter.FirstItemNumber} - {pagingParameter.LastItemNumber} of {pagingParameter.TotalCount}")
        </p>
    </div>
    <!-- Modal Content-->
    <div class="modal donate-modal" id="donate-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Store</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="donate-blk del-img">
                        <img src="images/delete-ico.svg" alt="delete-ico" />
                        <h6>Are you sure you want to delete this @(DeleteStoreItem) store?</h6>
                        <div class="d-flex justify-content-center">
                            <button data-dismiss="modal" class="del-btn" @onclick="() => OnConfirmationChange(true)">delete</button>
                            <button data-dismiss="modal" @onclick="() => OnConfirmationChange(false)">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Loader == true)
    {
        <Loader></Loader>
    }

    @code {

        protected string DeleteStoreId { get; set; }
        protected string DeleteStoreItem { get; set; }
        TeamListResponse teamListResponse = new TeamListResponse();
        ListRequest listRequest = new ListRequest();
        public PagingParameter pagingParameter { get; set; } = new PagingParameter();
        BaseStatusUpdateRequest statusUpdateRequest = new BaseStatusUpdateRequest();
        int PageSize = 10;
        bool Loader = true, IsDeleted = false, IsShowTable = false;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                var token = await localStorage.GetItemAsync<string>("token");
                if (token != null && token != string.Empty && token == TokenResponse.Token)
                {
                    await LoadData();
                    Loader = false;
                }
                else
                {
                    await localStorage.ClearAsync();
                    NavManager.NavigateTo("/");
                }
                StateHasChanged();
            }
        }

        internal void UpdateByID(string id, string value = null)
        {
            int key = 3;
            var cipheredId = GenericHelper.Encipher(id, key);
            if (!string.IsNullOrWhiteSpace(value))
            {
                if (value.Equals("view"))
                    NavManager.NavigateTo($"/team/view/{cipheredId}");
                if (value.Equals("edit"))
                    NavManager.NavigateTo($"/store/update/{cipheredId}");
            }
            else
            {
                DeleteStoreId = id;
            }

            StateHasChanged();
        }

        //internal async Task StatusUpdate(StoreListData storeData, bool isApproved, int srNum)
        //{
        //    statusUpdateRequest.Id = new(storeData.id);
        //    statusUpdateRequest.Active = isApproved;

        //    var result = await StoreHelpers.StoreStatusUpdate(statusUpdateRequest);
        //    if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        //    {
        //        await localStorage.ClearAsync();
        //        NavManager.NavigateTo("/");
        //    }
        //    else
        //    {
        //        if (result.meta.statusCode == StatusCodeConsts.Success)
        //        {
        //            if (isApproved)
        //                await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{storeData.name} is now active.");
        //            else
        //                await JsRuntime.InvokeVoidAsync("ShowToastr", "success", $"{storeData.name} is now inactive.");
        //        }
        //        else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
        //        {
        //            await JsRuntime.InvokeVoidAsync("Warning");
        //            await JsRuntime.InvokeVoidAsync("BaseActiveInactive", "tableActiveInactiveId-" + srNum.ToString(), storeData.active);
        //        }
        //        else
        //            await JsRuntime.InvokeVoidAsync("ShowErrorConfirmationModel");
        //    }
        //}

        internal async Task LoadData(int pageNumber = 0)
        {
            Loader = true;
            listRequest.PageNo = pageNumber;
            listRequest.PageSize = pagingParameter.PageSize = PageSize;
            IsDeleted = listRequest.IsDeleted;

            var result = await TeamHelper.Teamlist(listRequest);
            if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            else if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                teamListResponse = JsonConvert.DeserializeObject<TeamListResponse>(result.data);

                int i = 1;
                teamListResponse.details.ForEach(x =>
                {
                    x.SrNo = (PageSize * teamListResponse.offSet + i);
                    i++;
                });
                if (teamListResponse.details.Count != 0)
                {
                    pagingParameter.TotalCount = teamListResponse.total;
                    pagingParameter.TotalPage = (int)Math.Ceiling((decimal)pagingParameter.TotalCount / PageSize);
                    pagingParameter.PageNumber = teamListResponse.offSet + 1;
                    pagingParameter.CurrentPageNumber = pagingParameter.PageNumber;
                    pagingParameter.FirstItemNumber = (PageSize * pagingParameter.PageNumber) - (PageSize - 1);
                    pagingParameter.LastItemNumber = (pagingParameter.CurrentPageNumber == pagingParameter.TotalPage) ? pagingParameter.TotalCount : PageSize * pagingParameter.PageNumber;
                    pagingParameter.ShowFooter = true;
                    pagingParameter.ShowPageNumber = true;
                }
                else
                {
                    pagingParameter.ShowFooter = false;
                    pagingParameter.ShowPageNumber = false;
                    pagingParameter.TotalCount = 0;
                }
            }
            else
            {
                if (result.meta.statusCode == StatusCodeConsts.Success)
                {
                    teamListResponse = JsonConvert.DeserializeObject<TeamListResponse>(result.data);

                }
                else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
                {

                }
                else
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
            }
            Loader = false;
            StateHasChanged();
        }
        internal async void SetPage(int pagenumber)
        {
            await LoadData(pagenumber - 1);
        }

        #region Change Page Size
        public async void ChangePageSize(int pageSize)
        {
            PageSize = pageSize;
            pagingParameter.PageSize = pageSize;
            await LoadData();
        }
        #endregion

        private async Task OnConfirmationChange(bool value)
        {
            if (!string.IsNullOrWhiteSpace(DeleteStoreId) && value)
            {
                try
                {
                    var result = await StoreHelpers.DeleteStoreApi(new BaseIdRequest { Id = new(DeleteStoreId) });
                    if (result != null && result.meta.statusCode == StatusCodeConsts.Success)
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Successfully deleted Store!");
                        NavManager.NavigateTo("/store", true);
                    }
                    else if (result != null && result.meta.statusCode == StatusCodeConsts.BadRequest)
                    {
                        if (result.meta.message[0].Contains("Store not found"))
                        {
                            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Store not found");
                            NavManager.NavigateTo("/store");
                        }
                        else
                        {
                            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                            return;
                        }
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                        return;
                    }
                }
                catch (Exception)
                {
                    await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something was wrong!");
                    return;
                }
            }
        }
        private async void SearchData()
        {
            Loader = true;
            listRequest.Name = (listRequest.Name ?? string.Empty).Trim();

            await LoadData();

            Loader = false;
            StateHasChanged();
        }

        public async void Clear()
        {
            listRequest.Name = string.Empty;
            listRequest = new ListRequest();
            await LoadData();

        }
    }
