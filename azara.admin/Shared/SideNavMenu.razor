@using azara.admin.Models.Account.Response;
@using azara.admin.Models.Sub_admin.Response;
@using azara.admin.Models.TeamManagement.Request;
@using azara.admin.Models.TeamManagement.Response;
<div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">×</a>
    <section class="sidebar-menu">
        <div class="sidebar-logo text-center"><img src="images/azara-logo.svg" alt="sidebar-logo"></div>
        <div class="menu-link">

            <ul>
                @if (ViewResponse.MenuList != null && ViewResponse.MenuList.Any())
                {
                    @foreach (var menuItem in ViewResponse.MenuList.Where(x => x.isSelected).OrderBy(x => x.priority))
                    {
                        <li class="align-item-center nav-link " id="@menuItem.name">
                            <span class="material-symbols-outlined">
                                @menuItem.fontIconName
                            </span>
                            <a href="@menuItem.pageUrl">@menuItem.name</a>
                        </li>
                    }

                }
            </ul>
        </div>
    </section>
</div>

@code
{
    MenuListResponse menuListResponse = new MenuListResponse();
    SubAdminRetrieveById ViewResponse { get; set; } = new SubAdminRetrieveById();
    TeamGetByIdResponse teamGetByIdResponse = new TeamGetByIdResponse();
    TeamDetailsGetByIdRequest teamDetailsGetByIdRequest = new TeamDetailsGetByIdRequest();

    bool Loader = true;
    string UserId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await localStorage.GetItemAsync<string>("token");
            UserId = await localStorage.GetItemAsync<string>("adminId");

            if (token != null && token != string.Empty && token == TokenResponse.Token)
            {
                await LoadData();
            }
            else
            {
                await localStorage.ClearAsync();
                NavManager.NavigateTo("/");
            }
            StateHasChanged();
        }
    }

    internal async Task LoadData(int pageNumber = 0)
    {
        Loader = true;

        var result = await SubadminHelper.GetSubadminByID(new BaseIdRequest { Id = new(UserId) });
        if (result.meta.statusCode == StatusCodeConsts.Success)
        {
            ViewResponse = JsonConvert.DeserializeObject<SubAdminRetrieveById>(result.data);
            //teamGetByIdResponse.menuList = ViewResponse.MenuList;
            //await GetTeamDetailsById();
            
        }
        else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "SubAdmin not found");
            return;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Something went wrong");
            return;
        }
        //var result = await AccountHelper.MenuList();
        //if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        //{
        //    await localStorage.ClearAsync();
        //    NavManager.NavigateTo("/");
        //}
        //else if (result.meta.statusCode == StatusCodeConsts.Success)
        //{
        //    menuListResponse = JsonConvert.DeserializeObject<MenuListResponse>(result.data);
        //}
        //else
        //{
        //    if (result.meta.statusCode == StatusCodeConsts.Success)
        //    {
        //        menuListResponse = JsonConvert.DeserializeObject<MenuListResponse>(result.data);

        //    }
        //    else if (result.meta.statusCode == StatusCodeConsts.BadRequest)
        //    {

        //    }
        //    else
        //        await JsRuntime.InvokeVoidAsync("ShowToastr", "error", $"{result.meta.message[0]}");
        //}
        Loader = false;
        StateHasChanged();
    }

    public async Task GetTeamDetailsById()
    {
        //teamDetailsGetByIdRequest.Id = ViewResponse.TeamId;
        var result = await TeamHelper.TeamGetByBaseId(teamDetailsGetByIdRequest);

        if (result.meta.statusCode == StatusCodeConsts.UnAuthorized)
        {
            await localStorage.ClearAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            if (result.meta.statusCode == StatusCodeConsts.Success)
            {
                try
                {
                    teamGetByIdResponse = JsonConvert.DeserializeObject<TeamGetByIdResponse>(result.data);
                }
                catch (Exception ex)
                {

                }
            }
            else
                await JsRuntime.InvokeVoidAsync("ShowToastr", "erro", $"Something went wrong");

            StateHasChanged();

        }
    }


   

}